---
title: Variables, lists, dictionaries and branches
format: live-html
---

This is a **formative test**. It is an occasion to practice the course material. It **does not** contribute to your final grade.

Using the topics covered within the workshops (or otherwise), complete the questions below.

Make sure to use any described variable names exactly and do not change the name of this file. This ensures the nbgrader tool can grade your work correctly.

---
```{pyodide}
#| setup: 
#| exercise:
#|  - ex_1a
#|  - ex_1b
pi = 3.141592
import numpy as np
```

### Question 1

1A) Using the `pi` variable defined below (representing $\pi$ to 6 decimal places), calculate the circumference of a circle with radius of 5 and assign to a variable called `circum_circle`.

```{pyodide}
#| exercise: ex_1a
pi = 3.141592
radius = ______
circum_circle = ______
````

```{pyodide}
#| exercise: ex_1a
#| check: true
feedback = None
if np.isclose(circum_circle, 2*pi*5):
    feedback = {"correct": True, "message": "Nice work!"}
else:
    feedback = {"correct": False, "message": "That's incorrect, sorry."}
feedback
```

::: { .hint exercise="ex\_1"}
::: { .callout-note collapse="false"}

## Hint

Remember to define the radius and use the formula: `circum_circle = 2 * pi * radius`.
:::
:::

::: { .solution exercise="ex\_1" }
::: { .callout-tip collapse="false"}

## Fully worked solution

```python
radius = 5
circum_circle = 2 * pi * radius
```

:::
:::

---

1B) Calculate the area of a circle with radius 2.5 and assign to `area_circle`.

```{pyodide}
#| exercise: ex_1b
radius = 2.5
area_circle = ______
```

```{pyodide}
#| exercise: ex_1b
#| check: true
import numpy  as np
feedback = None
if np.isclose(area_circle, 3.141592*2.5**2):
    feedback = {"correct": True, "message": "Well done!"}
else:
    feedback = {"correct": False, "message": "Check your formula for area."}
feedback
```

::: { .hint exercise="ex\_1b"}
::: { .callout-note collapse="false"}

## Hint

Use `Area = pi * radius**2`.
:::
:::

::: { .solution exercise="ex\_1b" }
::: { .callout-tip collapse="false"}

## Fully worked solution

```python
area_circle = pi * radius**2
```

:::
:::

---

### Question 2

```{pyodide}
#| setup: 
#| exercise:
#|  - ex_2a
#|  - ex_2b
names = ["Pythagoras", "Marie Curie", "Charles Darwin"]
```

2A) Access the second name in the `names` list and assign to `chemist`.

```{pyodide}
#| exercise: ex_2a
names = ["Pythagoras", "Marie Curie", "Charles Darwin"]
chemist = ______
```

```{pyodide}
#| exercise: ex_2a
#| check: true
feedback = None
if chemist == "Marie Curie":
    feedback = {"correct": True, "message": "Correct!"}
else:
    feedback = {"correct": False, "message": "Remember lists are zero-indexed."}
feedback
```

::: { .hint exercise="ex\_2a"}
::: { .callout-note collapse="false"}

## Hint

Second element has index `1`.
:::
:::

::: { .solution exercise="ex\_2a" }
::: { .callout-tip collapse="false"}

## Fully worked solution

```python
chemist = names[1]
```

:::
:::

---

2B) Add `"Albert Einstein"` to the `names` list.

```{pyodide}
#| exercise: ex_2b
names.append(______)
```

```{pyodide}
#| exercise: ex_2b
#| check: true
feedback = None
if names[-1] == "Albert Einstein":
    feedback = {"correct": True, "message": "Great!"}
else:
    feedback = {"correct": False, "message": "Check how to append an element to a list."}
feedback
```

::: { .hint exercise="ex\_2b"}
::: { .callout-note collapse="false"}

## Hint

Use `names.append("Albert Einstein")`.
:::
:::

::: { .solution exercise="ex\_2b" }
::: { .callout-tip collapse="false"}

## Fully worked solution

```python
names.append("Albert Einstein")
```

:::
:::

---

### Question 3


```{pyodide}
#| setup: 
#| exercise:
#|  - ex_3a
#|  - ex_3b
quantity_units = {"distance": ["m", "feet"],
                  "temperature": ["K", "degreesC"],
                  "weight": ["N"],
                  "mass": ["kg", "tonne"],
                  "speed": ["m/s", "mph"]}
```

3A) Access the value for `quantity = "temperature"` in `quantity_units` and assign to `units`.

```{pyodide}
#| exercise: ex_3a
quantity_units = {"distance": ["m", "feet"],
                  "temperature": ["K", "degreesC"],
                  "weight": ["N"],
                  "mass": ["kg", "tonne"],
                  "speed": ["m/s", "mph"]}
quantity = "temperature"
units = ______
```

```{pyodide}
#| exercise: ex_3a
#| check: true
feedback = None
if units == ["K", "degreesC"]:
    feedback = {"correct": True, "message": "Correct!"}
else:
    feedback = {"correct": False, "message": "Use the key to access the dictionary value."}
feedback
```

::: { .hint exercise="ex\_3a"}
::: { .callout-note collapse="false"}

## Hint

Access dictionary values with `dictionary[key]`.
:::
:::

::: { .solution exercise="ex\_3a" }
::: { .callout-tip collapse="false"}

## Fully worked solution

```python
units = quantity_units[quantity]
```

:::
:::

---

3B) For the variable `second_quantity` defined below, check whether this key is present in the `quantity_units` dictionary. If this is in the dictionary create a variable called `quantity_present` and assign this to a value of True, otherwise assign this to a value of False.

Notes:

- You can use the `print` function to check the value within your `quantity_present` variable (boolean). If this produces a `NameError`, you may need to check that `quantity_present` has been successfully created.
- Check your Week 3 notes for examples of how to check *membership* (i.e. whether a value is contained within a collection like a list or a dictionary).


```{pyodide}
#| exercise: ex_3b
second_quantity = "height"
_____
```

```{pyodide}
#| exercise: ex_3b
#| check: true
feedback = None
if quantity_present == False:
    feedback = {"correct": True, "message": "Correct, this key is not present."}
else:
    feedback = {"correct": False, "message": "Check your membership test syntax."}
feedback
```

::: { .hint exercise="ex\_3b"}
::: { .callout-note collapse="false"}

## Hint

Use `key in dictionary` to check membership.
:::
:::

::: { .solution exercise="ex\_3b" }
::: { .callout-tip collapse="false"}

## Fully worked solution

```python
if second_quantity in quantity_units:
    quantity_present = True
else:
    quantity_present = False
# OR
quantity_present = second_quantity in quantity_units
```

:::
:::

---

### Question 4

4A) Two values of heights in units of feet are provided below in a list called `height_feet`. Convert these values to metres and calculate the difference in metres. Store this difference in a variable called `height_difference_m`.

Conversion from feet to metres can be done using the equation:

The conversion equation is:
$$ \mathrm{height_{feet}} = \mathrm{height_{m}} \times 3.28084$$


```{pyodide}
#| setup: 
#| exercise:
#|  - ex_4a
#|  - ex_4b
import numpy as np
height_feet = [5, 6]
feet_per__metre = 3.28084 
```

```{pyodide}
#| envir: myenv
#| exercise: ex_4a
height_feet = [5, 6]
feet_per_metre = 3.28084 
# more code here

height_difference_m = ______
```

```{pyodide}
#| exercise: ex_4a
#| check: true
feedback = None
height_metre = [h/feet_per_metre for h in height_feet]
expected_diff = height_metre[1]-height_metre[0]
if np.isclose(height_difference_m, expected_diff):
    feedback = {"correct": True, "message": "Good job!"}
else:
    feedback = {"correct": False, "message": "Check your conversion from feet to metres."}
feedback
```

::: { .hint exercise="ex\_4a"}
::: { .callout-note collapse="false"}

## Hint

Convert each height to metres and subtract: `(h2 * conversion - h1 * conversion)`.
:::
:::

::: { .solution exercise="ex\_4a" }
::: { .callout-tip collapse="false"}

## Fully worked solution

```python
height_metre = [height_feet[0]/feet_per_metre, height_feet[1]/feet_per_metre]
# or if you have learnt about loops and list comprehension
height_metre = [h/feet_per_metre for h in height_feet]

height_difference_m = height_metre[1]-height_metre[0]
```

:::
:::

---

4B) Check whether `height_difference_m` is:

 - If `height_difference_m` is greater than 0.5 metres (50cm), create a variable called `check` and set this to `1`
 - If `height_difference_m` is between 0.3 and 0.5 metres (30 to 50cm), create a variable called `check` and set this to `2`
 - If `height_difference_m` is something else, create a variable called `check` and set this to `3`

 do this by constructing and `if`--`else` block.


```{pyodide}
#| envir: myenv
#| exercise: ex_4b
#your code here

check = ______
```

```{pyodide}
#| exercise: ex_4b
#| check: true
feedback = None
if check == 2:
    feedback = {"correct": True, "message": "Correct range!"}
else:
    feedback = {"correct": False, "message": "Check the conditions for each range."}
feedback
```

::: { .hint exercise="ex\_4b"}
::: { .callout-note collapse="false"}

## Hint
You need an `if`, `elif` `else` construct.
:::
:::

::: { .solution exercise="ex\_4b" }
::: { .callout-tip collapse="false"}

## Fully worked solution

```python
check = 0
if height_difference_m > 0.5:
    print(f"{height_difference_m:.3f} is greater than 0.5m")
    check=1
elif height_difference_m > 0.3 and height_difference_m <= 0.5:
    print(f"{height_difference_m:.3f} is greater than 0.3m but less than or equal to 0.5m")
    check=2
else:
    print(height_difference_m)
    check=3
```

:::
:::

