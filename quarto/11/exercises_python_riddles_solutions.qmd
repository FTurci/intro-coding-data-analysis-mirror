---
title: Consolidation - `Python` riddles
jupyter: python3
---



Solve the following using standard Python features and built-in functions.

If possible, work in the **pair programming** paradigm: work in pairs, with one person taking the role of the **driver** (writing the code) and one taking the role of the **navigator** (reading and understanding the documentation). Alternate the roles. Try to find solutions that are **short** (i.e. few line sof code) but **easy to understand**.

**Sum of Digits**
- Riddle: Write a function `sum_digits(n)` that takes an integer `n` and returns the sum of its digits.
- Test it with the following test cases: `sum_digits(145)-->10` and `sum_digits(102)-->3`

Hint: remember that you can convert an integer to a string with `str(n)` and a character `c` to integer with `int(c)`.

```{python}
def sum_digits(n):
    return sum(int(c) for c in str(n))

assert sum_digits(102)==3
assert sum_digits(145)==10
```

**Palyndrome checker**

- Riddle: A word is a palyndrome if it reads the same forwards and backwards. Write a function `is_palindrome(s)` that takes an object `s`, checks that it is a string and returns `True` if `s` is a palindrome and `False` otherwise. 
- Test it with the following test cases: `is_palindrome("racecar")-->True` , `is_palindrome("hello")-->False` and  `is_palindrome(3)-->error`


Hint: an object is a string if `typ(s)` returns `str`.

```{python}
#YOUR CODE HERE
def is_palindrome(s):
    if type(s) == str:
        return s == s[::-1]
    else:
        print("Error: Input is not a string.")
        return

assert is_palindrome("racecar")==True
assert is_palindrome("hello")==False

is_palindrome(3)
```


