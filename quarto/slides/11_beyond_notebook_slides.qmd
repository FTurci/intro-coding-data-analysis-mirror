---
title: 'Beyond the Notebook'
format: 
  revealjs:
    theme: default
    highlight-style: github
    code-block-bg: true
    code-block-border-left: "#31BAE9"
    code-copy: true
    code-overflow: wrap
execute:
  echo: true
  eval: false
  warning: false
---

## File System Navigation

**Notebooks exist in directories** - we can navigate using bash commands

**Key commands (use `!` prefix in notebooks):**
```python
# Current directory location
! pwd

# List files and directories
! ls

# Create new directory
! mkdir new_folder

# Change directory
! cd new_folder
! cd ..  # Go back to parent directory
```

---

## Working with Files

**Creating and viewing files:**
```python
# Create empty file
! touch filename.txt

# View file contents
! cat filename.txt

# View first/last lines
! head filename.txt
! tail filename.txt
```

**File system navigation:**
- `.` = current directory
- `..` = parent directory
- Paths can be absolute (`/full/path`) or relative (`folder/file`)

---

## Python Scripts vs Notebooks

**Notebooks (.ipynb):**
- Rich multimedia content
- Markdown, images, metadata
- Interactive development
- Complex file format

**Scripts (.py):**
- Pure Python code only
- Comments with `#`
- Simple text files
- Portable and lightweight

---

## Running Scripts

**From notebook:**
```python
# Using the 'run' magic command
run path/to/script.py
```

**From terminal:**
```bash
# Using python command
python path/to/script.py
```

**Example script (`hello.py`):**
```python
print("Hello, World!")
x = 42
print(f"The answer is {x}")
```

---

## The Terminal

**Text-based interface** to the operating system

**Accessing terminal:**
- In Noteable: New → Terminal
- Pure command-line environment
- No mouse interaction
- Uses bash scripting language

**Basic terminal workflow:**
1. Navigate to directory (`cd`)
2. Create/edit files (`touch`, text editor)
3. Run Python scripts (`python script.py`)

---

## Creating Python Modules

**Scripts can be imported as modules:**

**Step 1:** Create `math_utils.py`:
```python
def add_numbers(a, b):
    return a + b

def square(x):
    return x ** 2

PI = 3.14159
```

**Step 2:** Import and use:
```python
import math_utils as mu

result = mu.add_numbers(5, 3)
area = mu.PI * mu.square(radius)
```

---

## Practical Example: Plotting Module

**Create `plotting.py`:**
```python
import numpy as np
import matplotlib.pyplot as plt

def plot_parabola(a, b, c, xlo=0, xhi=10, npoints=100):
    x = np.linspace(xlo, xhi, npoints)
    y = a * x**2 + b * x + c
    
    plt.figure()
    plt.plot(x, y, 'b-', linewidth=2)
    plt.xlabel('x')
    plt.ylabel('y')
    plt.title(f'Parabola: y = {a}x² + {b}x + {c}')
    plt.grid(True)
    plt.show()
```

---

## Using Custom Modules

**Import your module:**
```python
import plotting as plt_mod

# Use your custom function
plt_mod.plot_parabola(a=1, b=-2, c=1)
```

**Benefits of modules:**
- **Reusability:** Use same code across projects
- **Organization:** Separate concerns
- **Maintainability:** Update code in one place
- **Collaboration:** Share functionality

---

## Bash Command Options

**Commands often have options using `-` syntax:**

```bash
# List files in long format
ls -l

# List files in reverse time order
ls -lt

# Get help for any command
command_name --help
```

**Common file operations:**
```bash
# Move/rename files
mv old_name.py new_name.py

# Copy files
cp source.py destination.py

# Remove files (careful!)
rm filename.py
```

---

## Script vs. Notebook Output

**Notebook execution:**
- Output appears inline
- Variables remain in memory
- Interactive environment

**Script execution:**
- Output goes to terminal/file
- No persistent variables
- One-time execution
- For plots: use `plt.savefig()` instead of `plt.show()`

---

## Best Practices

**When to use scripts:**
- Reusable functions
- Production code
- Automated tasks
- Sharing with others

**When to use notebooks:**
- Exploratory analysis
- Documentation with results
- Teaching/presentations
- Prototyping

**Module organization:**
- Group related functions
- Clear, descriptive names
- Add docstrings to functions

---

## Key Takeaways

- **File system** navigation with bash commands
- **Scripts** are portable, reusable Python code
- **Terminal** provides direct system access
- **Modules** enable code organization and reuse
- **Choose the right tool:** notebooks for exploration, scripts for production
- **Practice** using both environments effectively

**Next steps:** Start organizing your code into reusable modules!
