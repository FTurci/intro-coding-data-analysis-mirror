---
title: 'Plotting with `matplotlib`'
format: 
  revealjs:
    theme: default
    highlight-style: github
    code-block-bg: true
    code-block-border-left: "#31BAE9"
    code-copy: true
    code-overflow: wrap
execute:
  echo: true
  eval: true
  warning: false
  fig-width: 8
  fig-height: 5
---

## Introduction to matplotlib

**matplotlib** - Powerful Python library for creating visualizations

```{python}
import matplotlib.pyplot as plt
import numpy as np
```

**Key concepts:**
- **Figure**: The canvas
- **Axes**: The x-y plotting area
- **Object-oriented** approach (recommended)

```{python}
fig, ax = plt.subplots()  # Create figure and axes
```

---

## Two Plotting Approaches

**Pyplot (MATLAB-style):**
```python
plt.plot(x, y)  # Direct plotting
```

**Object-oriented (Recommended):**
```{python}
fig, ax = plt.subplots()
ax.plot(x, y)  # Plot using axes object
```

**Why object-oriented?**
- More explicit control
- Better for complex plots
- Modern best practice

---

## Basic Plot Types

```{python}
# Sample data
rng = np.random.default_rng(seed=124)
x = np.arange(1, 20, 2)
y1 = x**2
y2 = x**2 + rng.normal(size=len(x))*50

fig, ax = plt.subplots()
ax.plot(x, y1, label="Line plot")        # Line plot
ax.scatter(x, y2, label="Scatter plot")  # Scatter plot
ax.legend()
```

---

## Customizing Appearance

```{python}
fig, ax = plt.subplots(figsize=(8, 4))

# Styling options
ax.plot(x, y1, color="slategrey", linestyle="--", linewidth=2)
ax.scatter(x, y2, color="indianred", marker='+', s=60)

# Labels and limits
ax.set_xlabel("X values")
ax.set_ylabel("Y values")
ax.set_xlim(0, 20)
ax.set_title("Customized Plot")
```

---

## Common Style Options

**Colors:** Named colors, hex codes, RGB
- `color="red"`, `color="#FF0000"`, `color=(1,0,0)`

**Line styles:** 
- `linestyle="-"` (solid), `"--"` (dashed), `":"` (dotted)

**Markers:**
- `marker="o"` (circle), `"+"` (plus), `"^"` (triangle)

**Transparency:**
- `alpha=0.7` (70% opaque)

---

## Legends and Annotations

```{python}
fig, ax = plt.subplots()

ax.plot(x, y1, label="Fitted line", color="blue", linestyle="--")
ax.scatter(x, y2, label="Measurements", color="red", marker='o')

ax.set_xlabel("x")
ax.set_ylabel("y") 
ax.legend()  # Uses the label parameters
ax.set_title("Plot with Legend")
```

---

## Histograms

```{python}
# Generate random data
rng = np.random.default_rng(seed=68)
data1 = rng.normal(0, 1, 5000)
data2 = rng.normal(1, 1.5, 1000)

fig, ax = plt.subplots()
bins = np.arange(-4, 6, 0.3)

ax.hist(data1, bins=bins, alpha=0.7, color="skyblue", 
        density=True, label="Dataset 1")
ax.hist(data2, bins=bins, alpha=0.7, color="orange", 
        density=True, label="Dataset 2")

ax.set_xlabel("Value")
ax.set_ylabel("Density")
ax.legend()
```

---

## Histogram Options

**Key parameters:**
- `bins`: Number or explicit bin edges
- `alpha`: Transparency (0-1)
- `density`: Normalize to show probability density
- `histtype`: 'bar', 'step', 'stepfilled'

```{python}
fig, ax = plt.subplots()
ax.hist(data1, bins=30, alpha=0.6, histtype='step', 
        color='purple', linewidth=2)
```

---

## Multiple Plots on Same Axes

```{python}
fig, ax = plt.subplots(figsize=(10, 5))

# Multiple data series
x_vals = np.linspace(0, 2*np.pi, 100)
y1 = np.sin(x_vals)
y2 = np.cos(x_vals)
y3 = np.sin(2*x_vals)

ax.plot(x_vals, y1, label="sin(x)")
ax.plot(x_vals, y2, label="cos(x)", linestyle='--')
ax.scatter(x_vals[::10], y3[::10], label="sin(2x)", marker='o')

ax.legend()
ax.set_xlabel("x")
ax.set_ylabel("y")
```

---

## Anatomy of a Figure

![Matplotlib anatomy shows the components: Figure, Axes, Labels, Legend, Ticks, etc.](images/anatomy_example.png){width=60%}

**Key components:**
- **Figure**: Overall container
- **Axes**: Plot area with data
- **Axis labels**: x/y descriptions  
- **Ticks**: Scale markers
- **Legend**: Data series identification

---

## Figure Size and Layout

```{python}
# Control figure size
fig, ax = plt.subplots(figsize=(12, 6))

# Multiple subplots (brief example)
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
ax1.plot([1, 2, 3], [1, 4, 2])
ax2.scatter([1, 2, 3], [2, 1, 3])
ax1.set_title("Plot 1")
ax2.set_title("Plot 2")
```

---

## Best Practices

- **Always** label your axes
- **Use legends** for multiple data series
- **Choose appropriate** plot types for your data
- **Control figure size** for readability
- **Use colors wisely** - consider colorblind accessibility
- **Keep it simple** - don't over-decorate

```{python}
# Good example
fig, ax = plt.subplots(figsize=(8, 5))
ax.plot(x, y1, label="Data")
ax.set_xlabel("Time (s)")
ax.set_ylabel("Amplitude (V)")
ax.set_title("Signal vs Time")
ax.legend()
```

---

## Key Takeaways

- **matplotlib** is the standard Python plotting library
- **Object-oriented** approach with `fig, ax` is recommended
- **Customization** options for colors, styles, markers
- **Multiple plot types**: line, scatter, histogram
- **Always annotate** with labels, legends, titles
- **Practice** with different plot types and styling options
