{"title":"`numpy` Exercises","markdown":{"yaml":{"title":"`numpy` Exercises","jupyter":"python3"},"headingText":"Exercise 1: Import and Basic Array Creation","containsRefs":false,"markdown":"\n\n\nThese exercises test your understanding of the NumPy concepts covered in the introduction notebook.\n\n\n\n**Task:** Import NumPy with the standard `import` command and create a NumPy array from the list `[2, 4, 6, 8, 10, 12]`. Print the array, its data type, and its shape.\n\n```{python}\nimport numpy as np\n\narr = np.array([2, 4, 6, 8, 10, 12])\nprint(\"Array:\", arr)\nprint(\"Data type:\", arr.dtype)\nprint(\"Shape:\", arr.shape)\n```\n\n## Exercise 2: Array Indexing and Slicing\n\n**Task:** Using the array you created in Exercise 1:\n\n- Print the first element\n- Print the last element\n- Print elements from index 2 to 4 (inclusive of 2, exclusive of 5)\n- Print every second element\n\n```{python}\nprint(\"First element:\", arr[0])\nprint(\"Last element:\", arr[-1])\nprint(\"Elements from index 2 to 4:\", arr[2:5])\nprint(\"Every second element:\", arr[::2])\n```\n\n## Exercise 3: Element-wise Operations\n\n**Task:** Create a NumPy array `arr = np.array([1, 4, 9, 16, 25])`. Perform the following operations and print the results:\n\n- Multiply each element by 3\n- Add 10 to each element\n- Calculate the square root of each element\n- Apply the sine function to each element\n\n```{python}\narr = np.array([1, 4, 9, 16, 25])\nprint(\"Original array:\", arr)\nprint(\"Multiply by 3:\", arr * 3)\nprint(\"Add 10:\", arr + 10)\nprint(\"Square root:\", np.sqrt(arr))\nprint(\"Sine function:\", np.sin(arr))\n```\n\n## Exercise 4: Array Operations with Two Arrays\n\n**Task:** Create two NumPy arrays:\n\n- `arr1 = np.array([1, 2, 3, 4, 5])`\n- `arr2 = np.array([10, 20, 30, 40, 50])`\n\nPerform element-wise operations and print the results:\n\n- Add the two arrays\n- Subtract arr1 from arr2\n- Multiply the two arrays\n- Divide arr2 by arr1\n\n```{python}\narr1 = np.array([1, 2, 3, 4, 5])\narr2 = np.array([10, 20, 30, 40, 50])\n\nprint(\"arr1:\", arr1)\nprint(\"arr2:\", arr2)\nprint(\"Addition:\", arr1 + arr2)\nprint(\"Subtraction (arr2 - arr1):\", arr2 - arr1)\nprint(\"Multiplication:\", arr1 * arr2)\nprint(\"Division (arr2 / arr1):\", arr2 / arr1)\n```\n\n## Exercise 5: Shape Mismatch Error\n\n**Task:** Create two arrays with different lengths:\n\n- `arr_a = np.array([1, 2, 3, 4])`\n- `arr_b = np.array([10, 20])`\n\nTry to add these arrays together. What happens? Write the code and explain the error in a comment.\n\n```{python}\narr_a = np.array([1, 2, 3, 4])\narr_b = np.array([10, 20])\n\nprint(\"arr_a:\", arr_a)\nprint(\"arr_b:\", arr_b)\n\ntry:\n    result = arr_a + arr_b\n    print(\"Result:\", result)\nexcept ValueError as e:\n    print(\"Error occurred:\", e)\n    \n# This happens because the arrays have different shapes: (4,) and (2,)\n# NumPy cannot broadcast these shapes together for element-wise operations\n# The arrays must have compatible shapes for element-wise operations\n```\n\n## Exercise 6: Reductive Operations\n\n**Task:** Create a NumPy array `data = np.array([12, 8, 15, 3, 7, 20, 11, 9])`. Calculate and print:\n\n- The sum of all elements\n- The mean (average) of all elements\n- The maximum value\n- The minimum value\n- The standard deviation\n\n```{python}\ndata = np.array([12, 8, 15, 3, 7, 20, 11, 9])\n\nprint(\"Data:\", data)\nprint(\"Sum:\", np.sum(data))\nprint(\"Mean:\", np.mean(data))\nprint(\"Maximum:\", np.max(data))\nprint(\"Minimum:\", np.min(data))\nprint(\"Standard deviation:\", np.std(data))\n```\n\n## Exercise 7: Array Manipulation\n\n**Task:** Create a NumPy array `numbers = np.array([5, 2, 8, 1, 9, 3])`. Perform the following operations:\n\n- Sort the array and print the result\n- Calculate the cumulative sum and print the result\n- Create a new array with duplicates: `with_duplicates = np.array([5, 2, 8, 1, 9, 3, 5, 2, 1])` and find the unique elements\n\n```{python}\nnumbers = np.array([5, 2, 8, 1, 9, 3])\nprint(\"Original numbers:\", numbers)\nprint(\"Sorted array:\", np.sort(numbers))\nprint(\"Cumulative sum:\", np.cumsum(numbers))\n\nwith_duplicates = np.array([5, 2, 8, 1, 9, 3, 5, 2, 1])\nprint(\"Array with duplicates:\", with_duplicates)\nprint(\"Unique elements:\", np.unique(with_duplicates))\n```\n\n## Exercise 8: List vs NumPy Comparison\n\n**Task:** Compare the flexibility of lists vs NumPy arrays:\n\n1. Create a Python list containing mixed data types: `mixed_list = [1, 'hello', 3.14, True]`\n2. Try to create a NumPy array from this list. What happens to the data types?\n3. Create a list of numbers: `num_list = [1, 2, 3, 4, 5]`\n4. Try to multiply the entire list by 2 using `num_list * 2`. What happens?\n5. Create a NumPy array from the same numbers and multiply by 2. Compare the results.\n\n```{python}\n# Mixed data types\nmixed_list = [1, 'hello', 3.14, True]\nprint(\"Mixed list:\", mixed_list)\n\nmixed_array = np.array(mixed_list)\nprint(\"NumPy array from mixed list:\", mixed_array)\nprint(\"Array dtype:\", mixed_array.dtype)\nprint(\"# NumPy converted everything to strings (the most general type)\")\n\n# List multiplication vs NumPy\nnum_list = [1, 2, 3, 4, 5]\nprint(\"\\nNumeric list:\", num_list)\nprint(\"List * 2:\", num_list * 2)\nprint(\"# List multiplication repeats the entire list\")\n\nnum_array = np.array([1, 2, 3, 4, 5])\nprint(\"NumPy array:\", num_array)\nprint(\"Array * 2:\", num_array * 2)\nprint(\"# NumPy multiplication is element-wise\")\n```\n\n## Exercise 9: Performance Comparison\n\n**Task:** Compare the performance of list comprehension vs NumPy operations:\n\n1. Import the `time` module\n2. Create a range of 50,000 numbers using numpy `np.arange()`\n3. Time how long it takes to square each number using a **list comprehension**, i.e. the syntax `[x**2 for x in myarray]`\n4. Time how long it takes to square each number using NumPy operations\n5. Calculate and print how many times faster the NumPy operation is\n\n```{python}\nimport time\n\nnum_range = 50000\ntest_array = np.arange(num_range)\n\n# List comprehension timing\ntime1 = time.time()\nlist_squared = [x**2 for x in test_array]\ntime2 = time.time()\nlist_time = time2 - time1\n\n# NumPy operation timing\ntime1 = time.time()\narr_squared = test_array**2\ntime2 = time.time()\narr_time = time2 - time1\n\nprint(f\"List comprehension time: {list_time:.6f} seconds\")\nprint(f\"NumPy operation time: {arr_time:.6f} seconds\")\n\nif arr_time > 0:\n    print(f\"NumPy is {list_time/arr_time:.1f} times faster\")\nelse:\n    print(\"NumPy operation was too fast to measure accurately\")\n```\n\n## Exercise 10: Complex Operations\n\n**Task:** Create a NumPy array representing angles in degrees: `angles_deg = np.array([0, 30, 45, 60, 90, 120, 180])`\n\n1. Convert these angles to radians (hint: multiply by π/180, use `np.pi`)\n2. Calculate the sine and cosine of each angle\n3. Verify that sin²(x) + cos²(x) = 1 for each angle (use `np.sin()` and `np.cos()`)\n4. Print all results\n\n```{python}\nangles_deg = np.array([0, 30, 45, 60, 90, 120, 180])\nprint(\"Angles in degrees:\", angles_deg)\n\n# Convert to radians\nangles_rad = angles_deg * np.pi / 180\nprint(\"Angles in radians:\", angles_rad)\n\n# Calculate sine and cosine\nsin_values = np.sin(angles_rad)\ncos_values = np.cos(angles_rad)\nprint(\"Sine values:\", sin_values)\nprint(\"Cosine values:\", cos_values)\n\n# Verify sin²(x) + cos²(x) = 1\nverification = sin_values**2 + cos_values**2\nprint(\"sin²(x) + cos²(x):\", verification)\nprint(\"All close to 1?\", np.allclose(verification, 1))\n```\n\n```{python}\n# Additional verification - showing the identity holds for each angle\nfor i, angle in enumerate(angles_deg):\n    identity_value = sin_values[i]**2 + cos_values[i]**2\n    print(f\"{angle}°: sin²({angle}) + cos²({angle}) = {identity_value:.10f}\")\n```\n\n## Challenge Exercise: Temperature Conversion\n\n**Task:** You have temperature readings in Celsius: `celsius_temps = np.array([0, 10, 20, 25, 30, 35, 40])`\n\n1. Convert all temperatures to Fahrenheit using the formula: F = (C × 9/5) + 32\n2. Convert all temperatures to Kelvin using the formula: K = C + 273.15\n3. Calculate the temperature range (max - min) for each scale\n\n```{python}\ncelsius_temps = np.array([0, 10, 20, 25, 30, 35, 40])\nprint(\"Celsius temperatures:\", celsius_temps)\n\n# Convert to Fahrenheit\nfahrenheit_temps = (celsius_temps * 9/5) + 32\nprint(\"Fahrenheit temperatures:\", fahrenheit_temps)\n\n# Convert to Kelvin\nkelvin_temps = celsius_temps + 273.15\nprint(\"Kelvin temperatures:\", kelvin_temps)\n\n# Calculate temperature ranges\ncelsius_range = np.max(celsius_temps) - np.min(celsius_temps)\nfahrenheit_range = np.max(fahrenheit_temps) - np.min(fahrenheit_temps)\nkelvin_range = np.max(kelvin_temps) - np.min(kelvin_temps)\n\nprint(f\"\\nTemperature ranges:\")\nprint(f\"Celsius: {celsius_range}°C\")\nprint(f\"Fahrenheit: {fahrenheit_range}°F\") \nprint(f\"Kelvin: {kelvin_range}K\")\n\n# Note: The range in Celsius and Kelvin is the same because it's just a shift\n# The range in Fahrenheit is larger due to the scaling factor (9/5)\n```\n\n    ## Challenge 2: Kinetic energy\n\n    **Task** Given arrays of mass (kg) and velocity (m/s) for several objects:\n    ```python\n    # copy and paste this code below\n    masses = np.array([2.0, 1.5, 3.0, 0.5])      # in kilograms\n    velocities = np.array([10.0, 20.0, 15.0, 5.0]) # in meters per second\n    ```\n\n    1. Calculate the kinetic energy $K$ for each object using the formula: \n\n    $$K =  \\dfrac{1}{2}m v^2$$\n\n    2. Calculate the total kinetic energy of the system (sum of all objects)\n\n\n```{python}\nimport numpy as np\n\nmasses = np.array([2.0, 1.5, 3.0, 0.5])       # kg\nvelocities = np.array([10.0, 20.0, 15.0, 5.0]) # m/s\n\n# 1. Kinetic energy for each object\nkinetic_energy = 0.5 * masses * velocities**2\nprint(\"Kinetic energy of each object:\", kinetic_energy)\n\n# 2. Total kinetic energy of the system\ntotal_ke = np.sum(kinetic_energy)\nprint(\"Total kinetic energy:\", total_ke)\n```\n\n## Challenge 3: Temperature Analysis\n\n**Task:**\nGiven a NumPy array of daily temperatures for 30 days:\n\n```python\ntemperatures = np.array([23.5, 24.0, 21.2, 25.6, 22.8, 23.9, 26.1, 27.3, 21.7, 22.5,\n                         24.6, 25.8, 20.9, 22.3, 24.7, 26.0, 27.5, 21.0, 22.9, 24.8,\n                         25.9, 27.6, 20.8, 22.7, 24.5, 26.2, 27.7, 20.5, 22.6, 24.9])\n```\n\nPerform the following tasks:\n\n1. Find the top 3 hottest days and their temperatures.\n2. Calculate the day-to-day percentage change in temperature.\n\n```{python}\nimport numpy as np\n\ntemperatures = np.array([23.5, 24.0, 21.2, 25.6, 22.8, 23.9, 26.1, 27.3, 21.7, 22.5,\n                         24.6, 25.8, 20.9, 22.3, 24.7, 26.0, 27.5, 21.0, 22.9, 24.8,\n                         25.9, 27.6, 20.8, 22.7, 24.5, 26.2, 27.7, 20.5, 22.6, 24.9])\n\n# 1. Top 3 hottest days\ntop3_indices = np.argsort(temperatures)[-3:][::-1]\ntop3_temps = temperatures[top3_indices]\nprint(\"Top 3 hottest days (indices and temperatures):\", list(zip(top3_indices, top3_temps)))\n\n# 2. Day-to-day percentage change\npct_change = (temperatures[1:] - temperatures[:-1]) / temperatures[:-1] * 100\nprint(\"Day-to-day percentage change:\", pct_change)\n```\n\n","srcMarkdownNoYaml":"\n\n\nThese exercises test your understanding of the NumPy concepts covered in the introduction notebook.\n\n\n## Exercise 1: Import and Basic Array Creation\n\n**Task:** Import NumPy with the standard `import` command and create a NumPy array from the list `[2, 4, 6, 8, 10, 12]`. Print the array, its data type, and its shape.\n\n```{python}\nimport numpy as np\n\narr = np.array([2, 4, 6, 8, 10, 12])\nprint(\"Array:\", arr)\nprint(\"Data type:\", arr.dtype)\nprint(\"Shape:\", arr.shape)\n```\n\n## Exercise 2: Array Indexing and Slicing\n\n**Task:** Using the array you created in Exercise 1:\n\n- Print the first element\n- Print the last element\n- Print elements from index 2 to 4 (inclusive of 2, exclusive of 5)\n- Print every second element\n\n```{python}\nprint(\"First element:\", arr[0])\nprint(\"Last element:\", arr[-1])\nprint(\"Elements from index 2 to 4:\", arr[2:5])\nprint(\"Every second element:\", arr[::2])\n```\n\n## Exercise 3: Element-wise Operations\n\n**Task:** Create a NumPy array `arr = np.array([1, 4, 9, 16, 25])`. Perform the following operations and print the results:\n\n- Multiply each element by 3\n- Add 10 to each element\n- Calculate the square root of each element\n- Apply the sine function to each element\n\n```{python}\narr = np.array([1, 4, 9, 16, 25])\nprint(\"Original array:\", arr)\nprint(\"Multiply by 3:\", arr * 3)\nprint(\"Add 10:\", arr + 10)\nprint(\"Square root:\", np.sqrt(arr))\nprint(\"Sine function:\", np.sin(arr))\n```\n\n## Exercise 4: Array Operations with Two Arrays\n\n**Task:** Create two NumPy arrays:\n\n- `arr1 = np.array([1, 2, 3, 4, 5])`\n- `arr2 = np.array([10, 20, 30, 40, 50])`\n\nPerform element-wise operations and print the results:\n\n- Add the two arrays\n- Subtract arr1 from arr2\n- Multiply the two arrays\n- Divide arr2 by arr1\n\n```{python}\narr1 = np.array([1, 2, 3, 4, 5])\narr2 = np.array([10, 20, 30, 40, 50])\n\nprint(\"arr1:\", arr1)\nprint(\"arr2:\", arr2)\nprint(\"Addition:\", arr1 + arr2)\nprint(\"Subtraction (arr2 - arr1):\", arr2 - arr1)\nprint(\"Multiplication:\", arr1 * arr2)\nprint(\"Division (arr2 / arr1):\", arr2 / arr1)\n```\n\n## Exercise 5: Shape Mismatch Error\n\n**Task:** Create two arrays with different lengths:\n\n- `arr_a = np.array([1, 2, 3, 4])`\n- `arr_b = np.array([10, 20])`\n\nTry to add these arrays together. What happens? Write the code and explain the error in a comment.\n\n```{python}\narr_a = np.array([1, 2, 3, 4])\narr_b = np.array([10, 20])\n\nprint(\"arr_a:\", arr_a)\nprint(\"arr_b:\", arr_b)\n\ntry:\n    result = arr_a + arr_b\n    print(\"Result:\", result)\nexcept ValueError as e:\n    print(\"Error occurred:\", e)\n    \n# This happens because the arrays have different shapes: (4,) and (2,)\n# NumPy cannot broadcast these shapes together for element-wise operations\n# The arrays must have compatible shapes for element-wise operations\n```\n\n## Exercise 6: Reductive Operations\n\n**Task:** Create a NumPy array `data = np.array([12, 8, 15, 3, 7, 20, 11, 9])`. Calculate and print:\n\n- The sum of all elements\n- The mean (average) of all elements\n- The maximum value\n- The minimum value\n- The standard deviation\n\n```{python}\ndata = np.array([12, 8, 15, 3, 7, 20, 11, 9])\n\nprint(\"Data:\", data)\nprint(\"Sum:\", np.sum(data))\nprint(\"Mean:\", np.mean(data))\nprint(\"Maximum:\", np.max(data))\nprint(\"Minimum:\", np.min(data))\nprint(\"Standard deviation:\", np.std(data))\n```\n\n## Exercise 7: Array Manipulation\n\n**Task:** Create a NumPy array `numbers = np.array([5, 2, 8, 1, 9, 3])`. Perform the following operations:\n\n- Sort the array and print the result\n- Calculate the cumulative sum and print the result\n- Create a new array with duplicates: `with_duplicates = np.array([5, 2, 8, 1, 9, 3, 5, 2, 1])` and find the unique elements\n\n```{python}\nnumbers = np.array([5, 2, 8, 1, 9, 3])\nprint(\"Original numbers:\", numbers)\nprint(\"Sorted array:\", np.sort(numbers))\nprint(\"Cumulative sum:\", np.cumsum(numbers))\n\nwith_duplicates = np.array([5, 2, 8, 1, 9, 3, 5, 2, 1])\nprint(\"Array with duplicates:\", with_duplicates)\nprint(\"Unique elements:\", np.unique(with_duplicates))\n```\n\n## Exercise 8: List vs NumPy Comparison\n\n**Task:** Compare the flexibility of lists vs NumPy arrays:\n\n1. Create a Python list containing mixed data types: `mixed_list = [1, 'hello', 3.14, True]`\n2. Try to create a NumPy array from this list. What happens to the data types?\n3. Create a list of numbers: `num_list = [1, 2, 3, 4, 5]`\n4. Try to multiply the entire list by 2 using `num_list * 2`. What happens?\n5. Create a NumPy array from the same numbers and multiply by 2. Compare the results.\n\n```{python}\n# Mixed data types\nmixed_list = [1, 'hello', 3.14, True]\nprint(\"Mixed list:\", mixed_list)\n\nmixed_array = np.array(mixed_list)\nprint(\"NumPy array from mixed list:\", mixed_array)\nprint(\"Array dtype:\", mixed_array.dtype)\nprint(\"# NumPy converted everything to strings (the most general type)\")\n\n# List multiplication vs NumPy\nnum_list = [1, 2, 3, 4, 5]\nprint(\"\\nNumeric list:\", num_list)\nprint(\"List * 2:\", num_list * 2)\nprint(\"# List multiplication repeats the entire list\")\n\nnum_array = np.array([1, 2, 3, 4, 5])\nprint(\"NumPy array:\", num_array)\nprint(\"Array * 2:\", num_array * 2)\nprint(\"# NumPy multiplication is element-wise\")\n```\n\n## Exercise 9: Performance Comparison\n\n**Task:** Compare the performance of list comprehension vs NumPy operations:\n\n1. Import the `time` module\n2. Create a range of 50,000 numbers using numpy `np.arange()`\n3. Time how long it takes to square each number using a **list comprehension**, i.e. the syntax `[x**2 for x in myarray]`\n4. Time how long it takes to square each number using NumPy operations\n5. Calculate and print how many times faster the NumPy operation is\n\n```{python}\nimport time\n\nnum_range = 50000\ntest_array = np.arange(num_range)\n\n# List comprehension timing\ntime1 = time.time()\nlist_squared = [x**2 for x in test_array]\ntime2 = time.time()\nlist_time = time2 - time1\n\n# NumPy operation timing\ntime1 = time.time()\narr_squared = test_array**2\ntime2 = time.time()\narr_time = time2 - time1\n\nprint(f\"List comprehension time: {list_time:.6f} seconds\")\nprint(f\"NumPy operation time: {arr_time:.6f} seconds\")\n\nif arr_time > 0:\n    print(f\"NumPy is {list_time/arr_time:.1f} times faster\")\nelse:\n    print(\"NumPy operation was too fast to measure accurately\")\n```\n\n## Exercise 10: Complex Operations\n\n**Task:** Create a NumPy array representing angles in degrees: `angles_deg = np.array([0, 30, 45, 60, 90, 120, 180])`\n\n1. Convert these angles to radians (hint: multiply by π/180, use `np.pi`)\n2. Calculate the sine and cosine of each angle\n3. Verify that sin²(x) + cos²(x) = 1 for each angle (use `np.sin()` and `np.cos()`)\n4. Print all results\n\n```{python}\nangles_deg = np.array([0, 30, 45, 60, 90, 120, 180])\nprint(\"Angles in degrees:\", angles_deg)\n\n# Convert to radians\nangles_rad = angles_deg * np.pi / 180\nprint(\"Angles in radians:\", angles_rad)\n\n# Calculate sine and cosine\nsin_values = np.sin(angles_rad)\ncos_values = np.cos(angles_rad)\nprint(\"Sine values:\", sin_values)\nprint(\"Cosine values:\", cos_values)\n\n# Verify sin²(x) + cos²(x) = 1\nverification = sin_values**2 + cos_values**2\nprint(\"sin²(x) + cos²(x):\", verification)\nprint(\"All close to 1?\", np.allclose(verification, 1))\n```\n\n```{python}\n# Additional verification - showing the identity holds for each angle\nfor i, angle in enumerate(angles_deg):\n    identity_value = sin_values[i]**2 + cos_values[i]**2\n    print(f\"{angle}°: sin²({angle}) + cos²({angle}) = {identity_value:.10f}\")\n```\n\n## Challenge Exercise: Temperature Conversion\n\n**Task:** You have temperature readings in Celsius: `celsius_temps = np.array([0, 10, 20, 25, 30, 35, 40])`\n\n1. Convert all temperatures to Fahrenheit using the formula: F = (C × 9/5) + 32\n2. Convert all temperatures to Kelvin using the formula: K = C + 273.15\n3. Calculate the temperature range (max - min) for each scale\n\n```{python}\ncelsius_temps = np.array([0, 10, 20, 25, 30, 35, 40])\nprint(\"Celsius temperatures:\", celsius_temps)\n\n# Convert to Fahrenheit\nfahrenheit_temps = (celsius_temps * 9/5) + 32\nprint(\"Fahrenheit temperatures:\", fahrenheit_temps)\n\n# Convert to Kelvin\nkelvin_temps = celsius_temps + 273.15\nprint(\"Kelvin temperatures:\", kelvin_temps)\n\n# Calculate temperature ranges\ncelsius_range = np.max(celsius_temps) - np.min(celsius_temps)\nfahrenheit_range = np.max(fahrenheit_temps) - np.min(fahrenheit_temps)\nkelvin_range = np.max(kelvin_temps) - np.min(kelvin_temps)\n\nprint(f\"\\nTemperature ranges:\")\nprint(f\"Celsius: {celsius_range}°C\")\nprint(f\"Fahrenheit: {fahrenheit_range}°F\") \nprint(f\"Kelvin: {kelvin_range}K\")\n\n# Note: The range in Celsius and Kelvin is the same because it's just a shift\n# The range in Fahrenheit is larger due to the scaling factor (9/5)\n```\n\n    ## Challenge 2: Kinetic energy\n\n    **Task** Given arrays of mass (kg) and velocity (m/s) for several objects:\n    ```python\n    # copy and paste this code below\n    masses = np.array([2.0, 1.5, 3.0, 0.5])      # in kilograms\n    velocities = np.array([10.0, 20.0, 15.0, 5.0]) # in meters per second\n    ```\n\n    1. Calculate the kinetic energy $K$ for each object using the formula: \n\n    $$K =  \\dfrac{1}{2}m v^2$$\n\n    2. Calculate the total kinetic energy of the system (sum of all objects)\n\n\n```{python}\nimport numpy as np\n\nmasses = np.array([2.0, 1.5, 3.0, 0.5])       # kg\nvelocities = np.array([10.0, 20.0, 15.0, 5.0]) # m/s\n\n# 1. Kinetic energy for each object\nkinetic_energy = 0.5 * masses * velocities**2\nprint(\"Kinetic energy of each object:\", kinetic_energy)\n\n# 2. Total kinetic energy of the system\ntotal_ke = np.sum(kinetic_energy)\nprint(\"Total kinetic energy:\", total_ke)\n```\n\n## Challenge 3: Temperature Analysis\n\n**Task:**\nGiven a NumPy array of daily temperatures for 30 days:\n\n```python\ntemperatures = np.array([23.5, 24.0, 21.2, 25.6, 22.8, 23.9, 26.1, 27.3, 21.7, 22.5,\n                         24.6, 25.8, 20.9, 22.3, 24.7, 26.0, 27.5, 21.0, 22.9, 24.8,\n                         25.9, 27.6, 20.8, 22.7, 24.5, 26.2, 27.7, 20.5, 22.6, 24.9])\n```\n\nPerform the following tasks:\n\n1. Find the top 3 hottest days and their temperatures.\n2. Calculate the day-to-day percentage change in temperature.\n\n```{python}\nimport numpy as np\n\ntemperatures = np.array([23.5, 24.0, 21.2, 25.6, 22.8, 23.9, 26.1, 27.3, 21.7, 22.5,\n                         24.6, 25.8, 20.9, 22.3, 24.7, 26.0, 27.5, 21.0, 22.9, 24.8,\n                         25.9, 27.6, 20.8, 22.7, 24.5, 26.2, 27.7, 20.5, 22.6, 24.9])\n\n# 1. Top 3 hottest days\ntop3_indices = np.argsort(temperatures)[-3:][::-1]\ntop3_temps = temperatures[top3_indices]\nprint(\"Top 3 hottest days (indices and temperatures):\", list(zip(top3_indices, top3_temps)))\n\n# 2. Day-to-day percentage change\npct_change = (temperatures[1:] - temperatures[:-1]) / temperatures[:-1] * 100\nprint(\"Day-to-day percentage change:\", pct_change)\n```\n\n"},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["/Users/ft14968/Repos/intro-coding-data-analysis/quarto/_extensions/r-wasm/live/live.lua"],"include-in-header":{"text":"<meta name=\"robots\" content=\"noindex, nofollow\">\n"},"css":["../styles.css"],"toc":true,"toc-depth":3,"highlight-style":"github","number-sections":false,"output-file":"exercises_numpy_solutions.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.31","ojs-engine":true,"revealjs-plugins":[],"theme":"cosmo","toc-location":"right","code-copy":true,"grid":{"sidebar-width":"350px"},"title":"`numpy` Exercises","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["live-html"]}