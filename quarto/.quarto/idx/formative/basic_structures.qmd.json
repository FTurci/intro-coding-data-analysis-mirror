{"title":"Variables, lists, dictionaries and branches","markdown":{"yaml":{"title":"Variables, lists, dictionaries and branches","format":"live-html"},"headingText":"Question 1","containsRefs":false,"markdown":"\n\nThis is a **formative test**. It is an occasion to practice the course material. It **does not** contribute to your final grade.\n\nUsing the topics covered within the workshops (or otherwise), complete the questions below.\n\nMake sure to use any described variable names exactly and do not change the name of this file. This ensures the nbgrader tool can grade your work correctly.\n\n---\n```{pyodide}\n#| setup: \n#| exercise:\n#|  - ex_1a\n#|  - ex_1b\npi = 3.141592\nimport numpy as np\n```\n\n\n1A) Using the `pi` variable defined below (representing $\\pi$ to 6 decimal places), calculate the circumference of a circle with radius of 5 and assign to a variable called `circum_circle`.\n\n```{pyodide}\n#| exercise: ex_1a\npi = 3.141592\nradius = ______\ncircum_circle = ______\n````\n\n```{pyodide}\n#| exercise: ex_1a\n#| check: true\nfeedback = None\nif np.isclose(circum_circle, 2*pi*5):\n    feedback = {\"correct\": True, \"message\": \"Nice work!\"}\nelse:\n    feedback = {\"correct\": False, \"message\": \"That's incorrect, sorry.\"}\nfeedback\n```\n\n::: { .hint exercise=\"ex\\_1\"}\n::: { .callout-note collapse=\"false\"}\n\n## Hint\n\nRemember to define the radius and use the formula: `circum_circle = 2 * pi * radius`.\n:::\n:::\n\n::: { .solution exercise=\"ex\\_1\" }\n::: { .callout-tip collapse=\"false\"}\n\n## Fully worked solution\n\n```python\nradius = 5\ncircum_circle = 2 * pi * radius\n```\n\n:::\n:::\n\n---\n\n1B) Calculate the area of a circle with radius 2.5 and assign to `area_circle`.\n\n```{pyodide}\n#| exercise: ex_1b\nradius = 2.5\narea_circle = ______\n```\n\n```{pyodide}\n#| exercise: ex_1b\n#| check: true\nimport numpy  as np\nfeedback = None\nif np.isclose(area_circle, 3.141592*2.5**2):\n    feedback = {\"correct\": True, \"message\": \"Well done!\"}\nelse:\n    feedback = {\"correct\": False, \"message\": \"Check your formula for area.\"}\nfeedback\n```\n\n::: { .hint exercise=\"ex\\_1b\"}\n::: { .callout-note collapse=\"false\"}\n\n## Hint\n\nUse `Area = pi * radius**2`.\n:::\n:::\n\n::: { .solution exercise=\"ex\\_1b\" }\n::: { .callout-tip collapse=\"false\"}\n\n## Fully worked solution\n\n```python\narea_circle = pi * radius**2\n```\n\n:::\n:::\n\n---\n\n### Question 2\n\n```{pyodide}\n#| setup: \n#| exercise:\n#|  - ex_2a\n#|  - ex_2b\nnames = [\"Pythagoras\", \"Marie Curie\", \"Charles Darwin\"]\n```\n\n2A) Access the second name in the `names` list and assign to `chemist`.\n\n```{pyodide}\n#| exercise: ex_2a\nnames = [\"Pythagoras\", \"Marie Curie\", \"Charles Darwin\"]\nchemist = ______\n```\n\n```{pyodide}\n#| exercise: ex_2a\n#| check: true\nfeedback = None\nif chemist == \"Marie Curie\":\n    feedback = {\"correct\": True, \"message\": \"Correct!\"}\nelse:\n    feedback = {\"correct\": False, \"message\": \"Remember lists are zero-indexed.\"}\nfeedback\n```\n\n::: { .hint exercise=\"ex\\_2a\"}\n::: { .callout-note collapse=\"false\"}\n\n## Hint\n\nSecond element has index `1`.\n:::\n:::\n\n::: { .solution exercise=\"ex\\_2a\" }\n::: { .callout-tip collapse=\"false\"}\n\n## Fully worked solution\n\n```python\nchemist = names[1]\n```\n\n:::\n:::\n\n---\n\n2B) Add `\"Albert Einstein\"` to the `names` list.\n\n```{pyodide}\n#| exercise: ex_2b\nnames.append(______)\n```\n\n```{pyodide}\n#| exercise: ex_2b\n#| check: true\nfeedback = None\nif names[-1] == \"Albert Einstein\":\n    feedback = {\"correct\": True, \"message\": \"Great!\"}\nelse:\n    feedback = {\"correct\": False, \"message\": \"Check how to append an element to a list.\"}\nfeedback\n```\n\n::: { .hint exercise=\"ex\\_2b\"}\n::: { .callout-note collapse=\"false\"}\n\n## Hint\n\nUse `names.append(\"Albert Einstein\")`.\n:::\n:::\n\n::: { .solution exercise=\"ex\\_2b\" }\n::: { .callout-tip collapse=\"false\"}\n\n## Fully worked solution\n\n```python\nnames.append(\"Albert Einstein\")\n```\n\n:::\n:::\n\n---\n\n### Question 3\n\n\n```{pyodide}\n#| setup: \n#| exercise:\n#|  - ex_3a\n#|  - ex_3b\nquantity_units = {\"distance\": [\"m\", \"feet\"],\n                  \"temperature\": [\"K\", \"degreesC\"],\n                  \"weight\": [\"N\"],\n                  \"mass\": [\"kg\", \"tonne\"],\n                  \"speed\": [\"m/s\", \"mph\"]}\n```\n\n3A) Access the value for `quantity = \"temperature\"` in `quantity_units` and assign to `units`.\n\n```{pyodide}\n#| exercise: ex_3a\nquantity_units = {\"distance\": [\"m\", \"feet\"],\n                  \"temperature\": [\"K\", \"degreesC\"],\n                  \"weight\": [\"N\"],\n                  \"mass\": [\"kg\", \"tonne\"],\n                  \"speed\": [\"m/s\", \"mph\"]}\nquantity = \"temperature\"\nunits = ______\n```\n\n```{pyodide}\n#| exercise: ex_3a\n#| check: true\nfeedback = None\nif units == [\"K\", \"degreesC\"]:\n    feedback = {\"correct\": True, \"message\": \"Correct!\"}\nelse:\n    feedback = {\"correct\": False, \"message\": \"Use the key to access the dictionary value.\"}\nfeedback\n```\n\n::: { .hint exercise=\"ex\\_3a\"}\n::: { .callout-note collapse=\"false\"}\n\n## Hint\n\nAccess dictionary values with `dictionary[key]`.\n:::\n:::\n\n::: { .solution exercise=\"ex\\_3a\" }\n::: { .callout-tip collapse=\"false\"}\n\n## Fully worked solution\n\n```python\nunits = quantity_units[quantity]\n```\n\n:::\n:::\n\n---\n\n3B) For the variable `second_quantity` defined below, check whether this key is present in the `quantity_units` dictionary. If this is in the dictionary create a variable called `quantity_present` and assign this to a value of True, otherwise assign this to a value of False.\n\nNotes:\n\n- You can use the `print` function to check the value within your `quantity_present` variable (boolean). If this produces a `NameError`, you may need to check that `quantity_present` has been successfully created.\n- Check your Week 3 notes for examples of how to check *membership* (i.e. whether a value is contained within a collection like a list or a dictionary).\n\n\n```{pyodide}\n#| exercise: ex_3b\nsecond_quantity = \"height\"\n_____\n```\n\n```{pyodide}\n#| exercise: ex_3b\n#| check: true\nfeedback = None\nif quantity_present == False:\n    feedback = {\"correct\": True, \"message\": \"Correct, this key is not present.\"}\nelse:\n    feedback = {\"correct\": False, \"message\": \"Check your membership test syntax.\"}\nfeedback\n```\n\n::: { .hint exercise=\"ex\\_3b\"}\n::: { .callout-note collapse=\"false\"}\n\n## Hint\n\nUse `key in dictionary` to check membership.\n:::\n:::\n\n::: { .solution exercise=\"ex\\_3b\" }\n::: { .callout-tip collapse=\"false\"}\n\n## Fully worked solution\n\n```python\nif second_quantity in quantity_units:\n    quantity_present = True\nelse:\n    quantity_present = False\n# OR\nquantity_present = second_quantity in quantity_units\n```\n\n:::\n:::\n\n---\n\n### Question 4\n\n4A) Two values of heights in units of feet are provided below in a list called `height_feet`. Convert these values to metres and calculate the difference in metres. Store this difference in a variable called `height_difference_m`.\n\nConversion from feet to metres can be done using the equation:\n\nThe conversion equation is:\n$$ \\mathrm{height_{feet}} = \\mathrm{height_{m}} \\times 3.28084$$\n\n\n```{pyodide}\n#| setup: \n#| exercise:\n#|  - ex_4a\n#|  - ex_4b\nimport numpy as np\nheight_feet = [5, 6]\nfeet_per__metre = 3.28084 \n```\n\n```{pyodide}\n#| envir: myenv\n#| exercise: ex_4a\nheight_feet = [5, 6]\nfeet_per_metre = 3.28084 \n# more code here\n\nheight_difference_m = ______\n```\n\n```{pyodide}\n#| exercise: ex_4a\n#| check: true\nfeedback = None\nheight_metre = [h/feet_per_metre for h in height_feet]\nexpected_diff = height_metre[1]-height_metre[0]\nif np.isclose(height_difference_m, expected_diff):\n    feedback = {\"correct\": True, \"message\": \"Good job!\"}\nelse:\n    feedback = {\"correct\": False, \"message\": \"Check your conversion from feet to metres.\"}\nfeedback\n```\n\n::: { .hint exercise=\"ex\\_4a\"}\n::: { .callout-note collapse=\"false\"}\n\n## Hint\n\nConvert each height to metres and subtract: `(h2 * conversion - h1 * conversion)`.\n:::\n:::\n\n::: { .solution exercise=\"ex\\_4a\" }\n::: { .callout-tip collapse=\"false\"}\n\n## Fully worked solution\n\n```python\nheight_metre = [height_feet[0]/feet_per_metre, height_feet[1]/feet_per_metre]\n# or if you have learnt about loops and list comprehension\nheight_metre = [h/feet_per_metre for h in height_feet]\n\nheight_difference_m = height_metre[1]-height_metre[0]\n```\n\n:::\n:::\n\n---\n\n4B) Check whether `height_difference_m` is:\n\n - If `height_difference_m` is greater than 0.5 metres (50cm), create a variable called `check` and set this to `1`\n - If `height_difference_m` is between 0.3 and 0.5 metres (30 to 50cm), create a variable called `check` and set this to `2`\n - If `height_difference_m` is something else, create a variable called `check` and set this to `3`\n\n do this by constructing and `if`--`else` block.\n\n\n```{pyodide}\n#| envir: myenv\n#| exercise: ex_4b\n#your code here\n\ncheck = ______\n```\n\n```{pyodide}\n#| exercise: ex_4b\n#| check: true\nfeedback = None\nif check == 2:\n    feedback = {\"correct\": True, \"message\": \"Correct range!\"}\nelse:\n    feedback = {\"correct\": False, \"message\": \"Check the conditions for each range.\"}\nfeedback\n```\n\n::: { .hint exercise=\"ex\\_4b\"}\n::: { .callout-note collapse=\"false\"}\n\n## Hint\nYou need an `if`, `elif` `else` construct.\n:::\n:::\n\n::: { .solution exercise=\"ex\\_4b\" }\n::: { .callout-tip collapse=\"false\"}\n\n## Fully worked solution\n\n```python\ncheck = 0\nif height_difference_m > 0.5:\n    print(f\"{height_difference_m:.3f} is greater than 0.5m\")\n    check=1\nelif height_difference_m > 0.3 and height_difference_m <= 0.5:\n    print(f\"{height_difference_m:.3f} is greater than 0.3m but less than or equal to 0.5m\")\n    check=2\nelse:\n    print(height_difference_m)\n    check=3\n```\n\n:::\n:::\n\n","srcMarkdownNoYaml":"\n\nThis is a **formative test**. It is an occasion to practice the course material. It **does not** contribute to your final grade.\n\nUsing the topics covered within the workshops (or otherwise), complete the questions below.\n\nMake sure to use any described variable names exactly and do not change the name of this file. This ensures the nbgrader tool can grade your work correctly.\n\n---\n```{pyodide}\n#| setup: \n#| exercise:\n#|  - ex_1a\n#|  - ex_1b\npi = 3.141592\nimport numpy as np\n```\n\n### Question 1\n\n1A) Using the `pi` variable defined below (representing $\\pi$ to 6 decimal places), calculate the circumference of a circle with radius of 5 and assign to a variable called `circum_circle`.\n\n```{pyodide}\n#| exercise: ex_1a\npi = 3.141592\nradius = ______\ncircum_circle = ______\n````\n\n```{pyodide}\n#| exercise: ex_1a\n#| check: true\nfeedback = None\nif np.isclose(circum_circle, 2*pi*5):\n    feedback = {\"correct\": True, \"message\": \"Nice work!\"}\nelse:\n    feedback = {\"correct\": False, \"message\": \"That's incorrect, sorry.\"}\nfeedback\n```\n\n::: { .hint exercise=\"ex\\_1\"}\n::: { .callout-note collapse=\"false\"}\n\n## Hint\n\nRemember to define the radius and use the formula: `circum_circle = 2 * pi * radius`.\n:::\n:::\n\n::: { .solution exercise=\"ex\\_1\" }\n::: { .callout-tip collapse=\"false\"}\n\n## Fully worked solution\n\n```python\nradius = 5\ncircum_circle = 2 * pi * radius\n```\n\n:::\n:::\n\n---\n\n1B) Calculate the area of a circle with radius 2.5 and assign to `area_circle`.\n\n```{pyodide}\n#| exercise: ex_1b\nradius = 2.5\narea_circle = ______\n```\n\n```{pyodide}\n#| exercise: ex_1b\n#| check: true\nimport numpy  as np\nfeedback = None\nif np.isclose(area_circle, 3.141592*2.5**2):\n    feedback = {\"correct\": True, \"message\": \"Well done!\"}\nelse:\n    feedback = {\"correct\": False, \"message\": \"Check your formula for area.\"}\nfeedback\n```\n\n::: { .hint exercise=\"ex\\_1b\"}\n::: { .callout-note collapse=\"false\"}\n\n## Hint\n\nUse `Area = pi * radius**2`.\n:::\n:::\n\n::: { .solution exercise=\"ex\\_1b\" }\n::: { .callout-tip collapse=\"false\"}\n\n## Fully worked solution\n\n```python\narea_circle = pi * radius**2\n```\n\n:::\n:::\n\n---\n\n### Question 2\n\n```{pyodide}\n#| setup: \n#| exercise:\n#|  - ex_2a\n#|  - ex_2b\nnames = [\"Pythagoras\", \"Marie Curie\", \"Charles Darwin\"]\n```\n\n2A) Access the second name in the `names` list and assign to `chemist`.\n\n```{pyodide}\n#| exercise: ex_2a\nnames = [\"Pythagoras\", \"Marie Curie\", \"Charles Darwin\"]\nchemist = ______\n```\n\n```{pyodide}\n#| exercise: ex_2a\n#| check: true\nfeedback = None\nif chemist == \"Marie Curie\":\n    feedback = {\"correct\": True, \"message\": \"Correct!\"}\nelse:\n    feedback = {\"correct\": False, \"message\": \"Remember lists are zero-indexed.\"}\nfeedback\n```\n\n::: { .hint exercise=\"ex\\_2a\"}\n::: { .callout-note collapse=\"false\"}\n\n## Hint\n\nSecond element has index `1`.\n:::\n:::\n\n::: { .solution exercise=\"ex\\_2a\" }\n::: { .callout-tip collapse=\"false\"}\n\n## Fully worked solution\n\n```python\nchemist = names[1]\n```\n\n:::\n:::\n\n---\n\n2B) Add `\"Albert Einstein\"` to the `names` list.\n\n```{pyodide}\n#| exercise: ex_2b\nnames.append(______)\n```\n\n```{pyodide}\n#| exercise: ex_2b\n#| check: true\nfeedback = None\nif names[-1] == \"Albert Einstein\":\n    feedback = {\"correct\": True, \"message\": \"Great!\"}\nelse:\n    feedback = {\"correct\": False, \"message\": \"Check how to append an element to a list.\"}\nfeedback\n```\n\n::: { .hint exercise=\"ex\\_2b\"}\n::: { .callout-note collapse=\"false\"}\n\n## Hint\n\nUse `names.append(\"Albert Einstein\")`.\n:::\n:::\n\n::: { .solution exercise=\"ex\\_2b\" }\n::: { .callout-tip collapse=\"false\"}\n\n## Fully worked solution\n\n```python\nnames.append(\"Albert Einstein\")\n```\n\n:::\n:::\n\n---\n\n### Question 3\n\n\n```{pyodide}\n#| setup: \n#| exercise:\n#|  - ex_3a\n#|  - ex_3b\nquantity_units = {\"distance\": [\"m\", \"feet\"],\n                  \"temperature\": [\"K\", \"degreesC\"],\n                  \"weight\": [\"N\"],\n                  \"mass\": [\"kg\", \"tonne\"],\n                  \"speed\": [\"m/s\", \"mph\"]}\n```\n\n3A) Access the value for `quantity = \"temperature\"` in `quantity_units` and assign to `units`.\n\n```{pyodide}\n#| exercise: ex_3a\nquantity_units = {\"distance\": [\"m\", \"feet\"],\n                  \"temperature\": [\"K\", \"degreesC\"],\n                  \"weight\": [\"N\"],\n                  \"mass\": [\"kg\", \"tonne\"],\n                  \"speed\": [\"m/s\", \"mph\"]}\nquantity = \"temperature\"\nunits = ______\n```\n\n```{pyodide}\n#| exercise: ex_3a\n#| check: true\nfeedback = None\nif units == [\"K\", \"degreesC\"]:\n    feedback = {\"correct\": True, \"message\": \"Correct!\"}\nelse:\n    feedback = {\"correct\": False, \"message\": \"Use the key to access the dictionary value.\"}\nfeedback\n```\n\n::: { .hint exercise=\"ex\\_3a\"}\n::: { .callout-note collapse=\"false\"}\n\n## Hint\n\nAccess dictionary values with `dictionary[key]`.\n:::\n:::\n\n::: { .solution exercise=\"ex\\_3a\" }\n::: { .callout-tip collapse=\"false\"}\n\n## Fully worked solution\n\n```python\nunits = quantity_units[quantity]\n```\n\n:::\n:::\n\n---\n\n3B) For the variable `second_quantity` defined below, check whether this key is present in the `quantity_units` dictionary. If this is in the dictionary create a variable called `quantity_present` and assign this to a value of True, otherwise assign this to a value of False.\n\nNotes:\n\n- You can use the `print` function to check the value within your `quantity_present` variable (boolean). If this produces a `NameError`, you may need to check that `quantity_present` has been successfully created.\n- Check your Week 3 notes for examples of how to check *membership* (i.e. whether a value is contained within a collection like a list or a dictionary).\n\n\n```{pyodide}\n#| exercise: ex_3b\nsecond_quantity = \"height\"\n_____\n```\n\n```{pyodide}\n#| exercise: ex_3b\n#| check: true\nfeedback = None\nif quantity_present == False:\n    feedback = {\"correct\": True, \"message\": \"Correct, this key is not present.\"}\nelse:\n    feedback = {\"correct\": False, \"message\": \"Check your membership test syntax.\"}\nfeedback\n```\n\n::: { .hint exercise=\"ex\\_3b\"}\n::: { .callout-note collapse=\"false\"}\n\n## Hint\n\nUse `key in dictionary` to check membership.\n:::\n:::\n\n::: { .solution exercise=\"ex\\_3b\" }\n::: { .callout-tip collapse=\"false\"}\n\n## Fully worked solution\n\n```python\nif second_quantity in quantity_units:\n    quantity_present = True\nelse:\n    quantity_present = False\n# OR\nquantity_present = second_quantity in quantity_units\n```\n\n:::\n:::\n\n---\n\n### Question 4\n\n4A) Two values of heights in units of feet are provided below in a list called `height_feet`. Convert these values to metres and calculate the difference in metres. Store this difference in a variable called `height_difference_m`.\n\nConversion from feet to metres can be done using the equation:\n\nThe conversion equation is:\n$$ \\mathrm{height_{feet}} = \\mathrm{height_{m}} \\times 3.28084$$\n\n\n```{pyodide}\n#| setup: \n#| exercise:\n#|  - ex_4a\n#|  - ex_4b\nimport numpy as np\nheight_feet = [5, 6]\nfeet_per__metre = 3.28084 \n```\n\n```{pyodide}\n#| envir: myenv\n#| exercise: ex_4a\nheight_feet = [5, 6]\nfeet_per_metre = 3.28084 \n# more code here\n\nheight_difference_m = ______\n```\n\n```{pyodide}\n#| exercise: ex_4a\n#| check: true\nfeedback = None\nheight_metre = [h/feet_per_metre for h in height_feet]\nexpected_diff = height_metre[1]-height_metre[0]\nif np.isclose(height_difference_m, expected_diff):\n    feedback = {\"correct\": True, \"message\": \"Good job!\"}\nelse:\n    feedback = {\"correct\": False, \"message\": \"Check your conversion from feet to metres.\"}\nfeedback\n```\n\n::: { .hint exercise=\"ex\\_4a\"}\n::: { .callout-note collapse=\"false\"}\n\n## Hint\n\nConvert each height to metres and subtract: `(h2 * conversion - h1 * conversion)`.\n:::\n:::\n\n::: { .solution exercise=\"ex\\_4a\" }\n::: { .callout-tip collapse=\"false\"}\n\n## Fully worked solution\n\n```python\nheight_metre = [height_feet[0]/feet_per_metre, height_feet[1]/feet_per_metre]\n# or if you have learnt about loops and list comprehension\nheight_metre = [h/feet_per_metre for h in height_feet]\n\nheight_difference_m = height_metre[1]-height_metre[0]\n```\n\n:::\n:::\n\n---\n\n4B) Check whether `height_difference_m` is:\n\n - If `height_difference_m` is greater than 0.5 metres (50cm), create a variable called `check` and set this to `1`\n - If `height_difference_m` is between 0.3 and 0.5 metres (30 to 50cm), create a variable called `check` and set this to `2`\n - If `height_difference_m` is something else, create a variable called `check` and set this to `3`\n\n do this by constructing and `if`--`else` block.\n\n\n```{pyodide}\n#| envir: myenv\n#| exercise: ex_4b\n#your code here\n\ncheck = ______\n```\n\n```{pyodide}\n#| exercise: ex_4b\n#| check: true\nfeedback = None\nif check == 2:\n    feedback = {\"correct\": True, \"message\": \"Correct range!\"}\nelse:\n    feedback = {\"correct\": False, \"message\": \"Check the conditions for each range.\"}\nfeedback\n```\n\n::: { .hint exercise=\"ex\\_4b\"}\n::: { .callout-note collapse=\"false\"}\n\n## Hint\nYou need an `if`, `elif` `else` construct.\n:::\n:::\n\n::: { .solution exercise=\"ex\\_4b\" }\n::: { .callout-tip collapse=\"false\"}\n\n## Fully worked solution\n\n```python\ncheck = 0\nif height_difference_m > 0.5:\n    print(f\"{height_difference_m:.3f} is greater than 0.5m\")\n    check=1\nelif height_difference_m > 0.3 and height_difference_m <= 0.5:\n    print(f\"{height_difference_m:.3f} is greater than 0.3m but less than or equal to 0.5m\")\n    check=2\nelse:\n    print(height_difference_m)\n    check=3\n```\n\n:::\n:::\n\n"},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["/Users/ft14968/Repos/intro-coding-data-analysis/quarto/_extensions/r-wasm/live/live.lua"],"include-in-header":{"text":"<meta name=\"robots\" content=\"noindex, nofollow\">\n"},"css":["../styles.css"],"toc":true,"toc-depth":3,"highlight-style":"github","number-sections":false,"output-file":"basic_structures.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.31","ojs-engine":true,"revealjs-plugins":[],"theme":"cosmo","toc-location":"right","code-copy":true,"grid":{"sidebar-width":"350px"},"title":"Variables, lists, dictionaries and branches"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["live-html"]}