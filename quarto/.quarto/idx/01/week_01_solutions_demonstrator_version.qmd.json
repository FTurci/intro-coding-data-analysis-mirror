{"title":"Week 1: Solutions","markdown":{"yaml":{"title":"Week 1: Solutions","jupyter":"python3"},"headingText":"Table of Contents","containsRefs":false,"markdown":"\n\n\n\nThis notebook contains the solutions to the week 1 `Beginner`, `Intermediate` and `Advanced` exercises.\n\n\n - [Welcome Page](./week_01_home.qmd)\n - [Beginner: Basic Data Types](./week_01_intro_to_data_types_beginner.qmd)\n - [Intermediate: Collections](./week_01_intro_to_data_types_intermediate.qmd)\n - [Advanced: Copying and References](./week_01_intro_to_data_types_advanced.qmd)\n\n - [**Solutions**](./week_01_solutions.qmd)\n   - [Beginner: Basic Data Types](#Beginner:-Basic-Data-Types)\n   - [Intermediate: Collections](#Intermediate:-Collections)\n   - [Advanced: Copying and References](#Advanced:-Copying-and-References)\n\n## Beginner: Basic Data Types\n\n**Question 1:** The solution to the question is given below:\n\n```{python}\n# Variables x, y and z\nx = 1\ny = 2\nz = 1.26\n\nmy_boolean = ((x**2 < y) and (y < z**3)) or ((z**3 < y) and (y < x**2))\n```\n\n> **Demonstrator Notes:** The purpose of this question is to prompt students to think about the use of the `and` and `or` boolean operators, as well as the syntax for `<`. When advising students on this question, make sure to help them break the inequalities $x^2<y<z^3$ and $z^3<y<x^2$ down using the `and` statement.\n\n**Question 2:** The solution to the question is given below:\n\n```{python}\n# Boolean variables\nis_raining = True\nhave_umbrella = False\n\n# Boolean telling you if you are going to get rained on\ngot_soaked = is_raining and (not have_umbrella)\n\nprint('Question: Will I get rained on?')\nprint('Answer: ' + str(got_soaked))\n```\n\n> **Demonstrator Notes:** Last year, many of the students struggled with Boolean logic. This question aims to get them thinking about how to combine logical connectives like `and` and `not`. If students are struggling with this, please try and prompt them to convert the natural language sentence `it's raining and I don't have my umbrella` to logical syntax by breaking it down into smaller sentences. Highlight that `I don't have my umbrella` is the logical opposite (negation) of `I have my umbrella`.\n\n**Question 3:** The completed truth table for this question is:\n\n\n| `A`     | `B`     | `C`     | `A and B` | `not C` | `(A and B) or (not C)` |\n|---------|---------|---------|-----------|---------|------------------------|\n| `True`  | `True`  | `True`  | `True`    | `False` | `True`                 | \n| `True`  | `True`  | `False` | `True`    | `True`  | `True`                 | \n| `True`  | `False` | `True`  | `False`   | `False` | `False`                | \n| `True`  | `False` | `False` | `False`   | `True`  | `True`                 | \n| `False` | `True`  | `True`  | `False`   | `False` | `False`                | \n| `False` | `True`  | `False` | `False`   | `True`  | `True`                 | \n| `False` | `False` | `True`  | `False`   | `False` | `False`                | \n| `False` | `False` | `False` | `False`   | `True`  | `True`                 | \n\nAnd the code for this question is:\n\n```{python}\n# Boolean variables\nA = True\nB = False\nC = True\n\n# Compute new boolean\nmy_boolean = (A and B) or (not C)\nprint(my_boolean)\n```\n\n> **Demonstrator Notes:** This question is again designed to get students thinking about Boolean logic. It is expected that, for many students, this will be their first encounter with truth tables and first-order logical operators. \n>\n> If a student is struggling with the abstraction, try to relate `A`, `B` and `C` to the example given in the slides. In the slides, `A` represents the statement `The cat is black` and `B` represents the statement `The cat has four legs`. To extend the example, you could define `C` to be, for instance, `The cat has blue eyes`. Once this is understood, try building the truth table column by column, starting with the `A and B` column, then the `not C` column and then finally the `(A and B) or (not C)` column.\n> \n> When giving examples, try to avoid statements with vague/ambiguous truth values. For instance, `The cat is tall` has an ambiguous truth value as there is not a clear distinction between `tall` and `not tall`.\n\n**Question 4:** The solution to this question is given below:\n\n```{python}\n# Height and width variables\nheight = 10\nwidth = 3\n\n# Perimeter\nperimeter = 2*(height+width)\n\n# Area\narea = height*width\n\n# Diagonal\ndiag = (height**2 + width**2)**(1/2)\n\n# Print results\nprint(perimeter, area, diag)\n```\n\n> **Demonstrator Notes:** At this stage, students will not know any `numpy`, so please make sure to use `x**(1/2)` instead of functions such as `np.sqrt(x)`. These functions will be taught at a later stage. It is expected that many students here will mistakenly write `^` for exponentiation instead of `**`, so please look out for this mistake. Some students may also need reminding that Pythagoras' theorem can be used to compute the length of the diagonal.\n\n**Question 5:** The solution to this question is given by:\n\n```{python}\n# Known variables\nv = 10\nu = 0\na = 9.81\n\n# Compute s\ns = (v**2-u**2)/(2*a)\nprint(s)\n```\n\n > **Demonstrator Notes:** Whilst the SUVAT equations are part of the UK A-level Physics syllabus, please be aware that many students may not know them. For instance, data science or chemistry students may not have taken Physics A-level (or potentially even GCSE) and overseas students may have been taught the subject using different notations. For this reason, be aware students may be non-responsive to this question because they do not understand that, e.g., `a` should be set to `9.81`. Try to assess whether the student is comfortable with the subject material before giving advice on how to solve the problem here.\n\n**Question 6:** The solution to this question is given by:\n\n```{python}\n# Compute time using variables from Question 5\nt = 2*s/(u+v)\nprint(t)\n```\n\n > **Demonstrator Notes:** See comments on previous question. Also be aware that there are multiple solutions to this question, as any of the equations $v=u+at$, $s=ut+\\frac{1}{2}at^2$ or $s=\\frac{(u+v)t}{2}$ can be used. Students who are unsure what to do should be encouraged to look at the linked document for question 5.\n\n**Question 7:** A code block containing the examples from the question is given below:\n\n```{python}\nprint((True and False) or True)\nprint(not (False or False))\nprint(True or False and False)\nprint(False ^ True)\nprint((True and not True) and (False or not False))\n```\n\nThe answers follow by standard boolean logic. The only difficult parts are determining the order of operations for the third example (python will interpret this as `True or (False and False)` rather than `(True or False) and False`) and the xor (`^`) on the fourth line.\n\n> **Demonstrator Notes:** Some students may find this question confusing because we are using the Boolean values `True` and `False` directly, rather than naming them as variables (e.g. `A` and `B`). Emphasize that there is no difference between the below code:  \n> ```\n> A = True\n> B = False\n> print(A and B)\n> ```  \n> and this code: \n> ```\n> print(True and False)\n> ```  \n> The logic is identical - the only change is whether we use named variables or literal values. Point this out clearly so students see that the rules of Boolean logic still apply in exactly the same way.  \n\n**Question 8:** The error in the code occurs when `float(x + y)` is run. \n\nWhen `x` and `y` are numeric, the `+` symbol is interpreted as addition and the result is cast to a float (e.g. if `x=1` and `y=5` as in the first example then `x+y` yeilds `6`). However, if they are instead strings (as in the second example), then the `+` symbol is interpreted as concatenation rather than addition. Therefore, when `x='2'` and `y='5'`, we get that `2+5` yeilds `25`, not `7`.\n\nThere are two approaches to resolving the issue. The first is to replace `x='2'` and `y='5'` with  `x=2` and `y=5`. The second, and preferred option, is to replace `float(x + y)` with `float(x)+float(y)` so there is no possibility that the `+` symbol is interpreted as concatenation here.\n\n> **Demonstrator Notes:** If students are struggling with this question, suggest that they search the document for the `+` symbol and make sure they understand how it is being used. Hint that the symbol might not be interpreted in the way they first expect, but avoid giving away the full answer unless they are really stuck. The aim is to guide them toward discovering the behaviour themselves.  \n\n**Question 9:** The first box is an assignment of the value `2 + 1` to a variable named `three`, so does not print anything. The second box prints `true` as the variable `z = (1 + 2 == 3)` is interpreted as a Boolean variable, and in Jupyter notebooks, if the last line of a box is simply a variable, with no assignment, then that variable is printed out. `z` is evaluated as `True` (as `1 + 2` does equal `3` in Python), so `True` is printed.\n\nFor the third box, `False` is printed as due to rounding errors `0.1 + 0.2` is evaluated to `0.30000000000000004` rather than `0.3`. This is a cautionary note that floating point math is not perfect.\n\n> **Demonstrator Notes:** First, it aims to get students to think about the difference between the assignment operator `=` and the equality operator `==`. Second, it serves as a cautionary note about floating point arithmetic in Python.\n> \n> After seeing the result, many students may ask how to properly check whether `0.1 + 0.2` equals `0.3`. For now, explain that we will cover this in more detail when we look at `numpy`. If they push further, encourage them to think about constructing a Boolean expression (similar to Question 1) that checks whether two numbers differ by only a very small amount. The aim here is to prepare them for the `np.allclose` function later on, while prompting them to reason about the problem themselves rather than being given the solution straight away.  \n\n**Question 10:** The final solution is given below:\n\n```{python}\n# The string we want to transform\nstart_string = 'Thas as te arang we want!'\nprint('Start:  ', start_string)\n\n# Helper strings you can use for replacements\nstring1 = 'a'\nstring2 = 'st'\nstring3 = 'he a'\nstring4 = ' ge'\nstring5 = 'stri'\nstring6 = 'sts'\nstring7 = 'is'\nstring8 = 'ara'\nstring9 = 'gen'\nstring10 = 'e a'\n\n# Step 1\nstep1 = start_string.replace(string1,string2)\nprint('Step 1: ', step1)\n\n# Step 2\nstep2 = step1.replace(string6,string7)\nprint('Step 2: ', step2)\n\n# Step 3\nstep3 = step2.replace(string2, string1)\nprint('Step 3: ', step3)\n\n# Step 4\nstep4 = step3.replace(string10, string3)\nprint('Step 4: ', step4)\n\n# Step 5\nstep5 = step4.replace(string8, string5)\nprint('Step 5: ', step5)\n```\n\n> **Demonstrator Notes:**  This question is designed to give students practice with the string `replace` function. Encourage them to experiment and work through the task step by step, even if their first attempt doesn’t work. The key learning outcome is to get comfortable with testing, adjusting, and trying again - it aims to enforce good programming habits.  \n\n## Intermediate: Collections\n\n> **Broad Notes for Demonstrators:** If you see a student attempting the intermediate questions who does not seem at the level of the material, please do encourage them to first try the beginner notebook. \n\n**Question 1:** The code for this question is given below:\n\n```{python}\n# Original list\nnums = [5, 2, 8, 2, 9]\nprint(\"Original list:\", nums)\n\n# 1. Retrieve the third element (index 2 because indexing starts at 0)\nthird_element = nums[2]\nprint(\"Third element:\", third_element)\n\n# 2. Slice the first three elements\nfirst_three = nums[:3]\nprint(\"First three elements:\", first_three)\n\n# 3. Replace the last element with 10\nnums[-1] = 10\nprint(\"After replacing last element with 10:\", nums)\n\n# 4. Append 7 to the end of the list\nnums.append(7)\nprint(\"After appending 7:\", nums)\n\n# 5. Remove the first occurrence of 2\nnums.remove(2)\nprint(\"After removing first occurrence of 2:\", nums)\n```\n\n > **Demonstrator Notes:** This question aims to give students some initial practice with lists. Common errors to look out for include failing to account for the fact Python uses zero indexing, or that slicing syntax such as `nums[:3]` doesn't include `nums[3]` in the output, only `nums[0]`,`nums[1]` and `nums[2]`.\n\n**Question 2:** The key to this question is that a list is *ordered* whilst a set is *unordered*. When the list is converted to a set, it's ordering is lost, and when converted back to a list it is now given in increasing (numerical) order by default.\n\n> **Demonstrator Notes:** Hopefully, this should not be a difficult question. Encourage students who are struggling to print out `my_set` and `my_list` and describe what is different between them.\n\n**Question 3:** The answer to this question is the letter `k`. To see this, the below code can be used:\n\n```{python}\n# Here are two strings\nstring1 = \"This is a long random sentence - I wonder which letters it contains and which letters it doesn't.\"\nstring2 = \"This task makes a clear and coherent string with words taken inside a small set\"\n\n# Make strings lowercase\nstring1 = string1.lower()\nstring2 = string2.lower()\n\n# Convert strings to sets\nstring1 = set(string1)\nstring2 = set(string2)\n\n# Compute the set difference\nprint(string2.difference(string1))\n```\n\n> **Demonstrator Notes:** This question brings together concepts from both the `Beginner` and `Intermediate` notebooks, making it a good checkpoint to assess whether students are ready to move into the `Intermediate` material. \n>\n> If students are struggling, suggest that they try the task on paper first. They will probably start by writing out the letters from each sentence and then comparing the two sets of letters. From there, you can show how Python supports the same process by turning a string into a list of characters and then using the `set` constructor to remove duplicates. This should hopefully help them connect the manual approach with the Python solution.  \n>\n> Once they have these concepts down, encourage students to think about why the `lower()` function (as suggested in the hint) is useful here. It ensures that comparisons between characters are case-insensitive.  \n\n**Question 4:** The code for this question is provided below.\n\n```{python}\n# given tuple\nt = ('a', 'b', 'c', 'd', 'e')\n\n# 1. access the first and last elements of t\nfirst = t[0]\nlast = t[-1]\nprint(\"First element:\", first)\nprint(\"Last element:\", last)\n\n# 2. slice out ('b', 'c', 'd')\nslice_part = t[1:4]\nprint(\"Slice ('b', 'c', 'd'):\", slice_part)\n\n# 3. check whether 'c' is in t\nis_c_present = 'c' in t\nprint(\"'c' in t?\", is_c_present)\n\n# 4. find the index of 'd' in t\nindex_d = t.index('d')\nprint(\"Index of 'd':\", index_d)\n\n# 5. count how many times 'a' appears in t\ncount_a = t.count('a')\nprint(\"Count of 'a':\", count_a)\n```\n\n> **Demonstrator Notes:** See notes on Question 1.\n\n**Question 5:** There are many ways to approach this question. Two examples are given below:\n\n```{python}\n# ----------------------------------------------------------------\n# Option 1:\n# ----------------------------------------------------------------\n# clinical trial dataset represented as a dictionary of lists\nclinical_data = {\n    \"Name\": [\"John\", \"Alice\", \"Maria\", \"David\", \"Sarah\"],\n    \"Weight (kg)\": [82, 68, 74, 90, 60],\n    \"Height (cm)\": [178, 165, 170, 185, 160]\n}\n\nprint(clinical_data)\n\n# ----------------------------------------------------------------\n# Option 2:\n# ----------------------------------------------------------------\n# clinical trial dataset represented as a dictionary of dictionaries\nclinical_data = {\n    \"John\": {\"Weight (kg)\": 82, \"Height (cm)\": 178},\n    \"Alice\": {\"Weight (kg)\": 68, \"Height (cm)\": 165},\n    \"Maria\": {\"Weight (kg)\": 74, \"Height (cm)\": 170},\n    \"David\": {\"Weight (kg)\": 90, \"Height (cm)\": 185},\n    \"Sarah\": {\"Weight (kg)\": 60, \"Height (cm)\": 160}\n}\n```\n\n> **Demonstrator Notes:** The aim of this question is to help students recognise that there are multiple valid ways to represent the same dataset in Python. The important part is thinking about how the data will be used. For example, if we need to look up information by subject name, a dictionary of dictionaries might be best; if we want to work with all weights at once (e.g. to build a histogram), a dictionary of lists is more convenient. Emphasise that the choice of data structure depends on the task - there isn’t one 'right' answer.\n\n## Advanced: Copying and References\n\n> **Broad Notes for Demonstrators:** If you see a student attempting the intermediate or advanced questions who does not seem at the level of the material, please do encourage them to first try the earlier notebooks. \n\n**Question 1:** The expected output is `[1,2,3,4]`. This is because `list_a` and `list_b` reference the same location in memory.\n\n```{python}\nlist_a = [1, 2, 3]\nlist_b = list_a\nlist_a.append(4)\nprint(list_b)\n```\n\n> **Demonstrator Notes:** The aim of this question is to get students to recognise that lists are mutable. As a list is mutable, both `list_a` and `list_b` refer to the same underlying object in memory. When we do `list_b = list_a`, we are not creating a copy of the list, but simply creating a new reference to the same list object. Therefore, when we perform `list_a.append(4)`, the change is reflected in both `list_a` and `list_b`. Encourage students to think about how they could gain the desired behaviour using the `.copy()` function (e.g. `list_b = list_a.copy()`).\n\n**Question 2:** Code A will print `[1,2,3]` whilst Code B will print `[4,5,6]`. This is because, when we replace `a` with `[4,5,6]` we change the reference to point to a new location in memory, breaking the connection between `a` and `b`. However, when we change the elements in `a` individually, both `a` and `b` remain pointing to the same location in memory. Thus, when we print `b`, we get `[4,5,6]`.\n\n```{python}\na = [1, 2, 3]\nb = a\na = [4, 5, 6]\nprint(b)\n\na = [1, 2, 3]\nb = a\na[0] = 4\na[1] = 5\na[2] = 6\nprint(b)\n```\n\n> **Demonstrator Notes:** See notes for Question 1.\n\n**Question 3:** The variable names `xyz` and `xyzsquared` are pointing to the same array. When we squared `xyzsquared` we also squared `xyz`. We could have avoided this by making `xyzsquared` a seperate copy of `xyz` using the `list` constructor like so:\n\n```{python}\nxyz = [1,2,3]\n\n# Make a list of x squared, y squared, z squared\nxyzsquared = list(xyz) # The change was implemented here!\nxyzsquared[0] = xyzsquared[0]**2\nxyzsquared[1] = xyzsquared[1]**2\nxyzsquared[2] = xyzsquared[2]**2\n\n# Get x, y and z from xyz list\nx = xyz[0]\ny = xyz[1]\nz = xyz[2]\n\n# Get x squared, y squared and z squared from\n# xyzsquared list\nxsquared = xyzsquared[0]\nysquared = xyzsquared[1]\nzsquared = xyzsquared[2]\n\nprint(x + y + z + xsquared + ysquared + zsquared)\n```\n\n> **Demonstrator Notes:** This question is designed to give students practice debugging code. Try to guide them to the solution where possible, rather than providing the full solution straight away.\n\n**Question 4:** When you do `backup = list(grid)`, Python only makes a new outer list. The smaller lists inside `([1, 2], [3, 4], [5, 6])` are still the exact same objects that grid is using. Because of that, if you change one of the inner lists, the same change shows up `backup`.\n\n > **Demonstrator Notes:** The aim of this question is to understand why the unexpected behaviour occured. If students ask how to fix this, that’s a natural question, but at this stage they don’t yet have the tools to do so. For now, keep the focus on helping them understand why the behaviour occurs, instead of talking about fixes at this stage.\n\n**Question 5:** The reasoning for this question is similar to that of Question 4, but noting that the three inner lists are all pointing to the same place in memory.\n\n > **Demonstrator Notes:** See the notes for Question 4.\n\n","srcMarkdownNoYaml":"\n\n\n\nThis notebook contains the solutions to the week 1 `Beginner`, `Intermediate` and `Advanced` exercises.\n\n### Table of Contents\n\n - [Welcome Page](./week_01_home.qmd)\n - [Beginner: Basic Data Types](./week_01_intro_to_data_types_beginner.qmd)\n - [Intermediate: Collections](./week_01_intro_to_data_types_intermediate.qmd)\n - [Advanced: Copying and References](./week_01_intro_to_data_types_advanced.qmd)\n\n - [**Solutions**](./week_01_solutions.qmd)\n   - [Beginner: Basic Data Types](#Beginner:-Basic-Data-Types)\n   - [Intermediate: Collections](#Intermediate:-Collections)\n   - [Advanced: Copying and References](#Advanced:-Copying-and-References)\n\n## Beginner: Basic Data Types\n\n**Question 1:** The solution to the question is given below:\n\n```{python}\n# Variables x, y and z\nx = 1\ny = 2\nz = 1.26\n\nmy_boolean = ((x**2 < y) and (y < z**3)) or ((z**3 < y) and (y < x**2))\n```\n\n> **Demonstrator Notes:** The purpose of this question is to prompt students to think about the use of the `and` and `or` boolean operators, as well as the syntax for `<`. When advising students on this question, make sure to help them break the inequalities $x^2<y<z^3$ and $z^3<y<x^2$ down using the `and` statement.\n\n**Question 2:** The solution to the question is given below:\n\n```{python}\n# Boolean variables\nis_raining = True\nhave_umbrella = False\n\n# Boolean telling you if you are going to get rained on\ngot_soaked = is_raining and (not have_umbrella)\n\nprint('Question: Will I get rained on?')\nprint('Answer: ' + str(got_soaked))\n```\n\n> **Demonstrator Notes:** Last year, many of the students struggled with Boolean logic. This question aims to get them thinking about how to combine logical connectives like `and` and `not`. If students are struggling with this, please try and prompt them to convert the natural language sentence `it's raining and I don't have my umbrella` to logical syntax by breaking it down into smaller sentences. Highlight that `I don't have my umbrella` is the logical opposite (negation) of `I have my umbrella`.\n\n**Question 3:** The completed truth table for this question is:\n\n\n| `A`     | `B`     | `C`     | `A and B` | `not C` | `(A and B) or (not C)` |\n|---------|---------|---------|-----------|---------|------------------------|\n| `True`  | `True`  | `True`  | `True`    | `False` | `True`                 | \n| `True`  | `True`  | `False` | `True`    | `True`  | `True`                 | \n| `True`  | `False` | `True`  | `False`   | `False` | `False`                | \n| `True`  | `False` | `False` | `False`   | `True`  | `True`                 | \n| `False` | `True`  | `True`  | `False`   | `False` | `False`                | \n| `False` | `True`  | `False` | `False`   | `True`  | `True`                 | \n| `False` | `False` | `True`  | `False`   | `False` | `False`                | \n| `False` | `False` | `False` | `False`   | `True`  | `True`                 | \n\nAnd the code for this question is:\n\n```{python}\n# Boolean variables\nA = True\nB = False\nC = True\n\n# Compute new boolean\nmy_boolean = (A and B) or (not C)\nprint(my_boolean)\n```\n\n> **Demonstrator Notes:** This question is again designed to get students thinking about Boolean logic. It is expected that, for many students, this will be their first encounter with truth tables and first-order logical operators. \n>\n> If a student is struggling with the abstraction, try to relate `A`, `B` and `C` to the example given in the slides. In the slides, `A` represents the statement `The cat is black` and `B` represents the statement `The cat has four legs`. To extend the example, you could define `C` to be, for instance, `The cat has blue eyes`. Once this is understood, try building the truth table column by column, starting with the `A and B` column, then the `not C` column and then finally the `(A and B) or (not C)` column.\n> \n> When giving examples, try to avoid statements with vague/ambiguous truth values. For instance, `The cat is tall` has an ambiguous truth value as there is not a clear distinction between `tall` and `not tall`.\n\n**Question 4:** The solution to this question is given below:\n\n```{python}\n# Height and width variables\nheight = 10\nwidth = 3\n\n# Perimeter\nperimeter = 2*(height+width)\n\n# Area\narea = height*width\n\n# Diagonal\ndiag = (height**2 + width**2)**(1/2)\n\n# Print results\nprint(perimeter, area, diag)\n```\n\n> **Demonstrator Notes:** At this stage, students will not know any `numpy`, so please make sure to use `x**(1/2)` instead of functions such as `np.sqrt(x)`. These functions will be taught at a later stage. It is expected that many students here will mistakenly write `^` for exponentiation instead of `**`, so please look out for this mistake. Some students may also need reminding that Pythagoras' theorem can be used to compute the length of the diagonal.\n\n**Question 5:** The solution to this question is given by:\n\n```{python}\n# Known variables\nv = 10\nu = 0\na = 9.81\n\n# Compute s\ns = (v**2-u**2)/(2*a)\nprint(s)\n```\n\n > **Demonstrator Notes:** Whilst the SUVAT equations are part of the UK A-level Physics syllabus, please be aware that many students may not know them. For instance, data science or chemistry students may not have taken Physics A-level (or potentially even GCSE) and overseas students may have been taught the subject using different notations. For this reason, be aware students may be non-responsive to this question because they do not understand that, e.g., `a` should be set to `9.81`. Try to assess whether the student is comfortable with the subject material before giving advice on how to solve the problem here.\n\n**Question 6:** The solution to this question is given by:\n\n```{python}\n# Compute time using variables from Question 5\nt = 2*s/(u+v)\nprint(t)\n```\n\n > **Demonstrator Notes:** See comments on previous question. Also be aware that there are multiple solutions to this question, as any of the equations $v=u+at$, $s=ut+\\frac{1}{2}at^2$ or $s=\\frac{(u+v)t}{2}$ can be used. Students who are unsure what to do should be encouraged to look at the linked document for question 5.\n\n**Question 7:** A code block containing the examples from the question is given below:\n\n```{python}\nprint((True and False) or True)\nprint(not (False or False))\nprint(True or False and False)\nprint(False ^ True)\nprint((True and not True) and (False or not False))\n```\n\nThe answers follow by standard boolean logic. The only difficult parts are determining the order of operations for the third example (python will interpret this as `True or (False and False)` rather than `(True or False) and False`) and the xor (`^`) on the fourth line.\n\n> **Demonstrator Notes:** Some students may find this question confusing because we are using the Boolean values `True` and `False` directly, rather than naming them as variables (e.g. `A` and `B`). Emphasize that there is no difference between the below code:  \n> ```\n> A = True\n> B = False\n> print(A and B)\n> ```  \n> and this code: \n> ```\n> print(True and False)\n> ```  \n> The logic is identical - the only change is whether we use named variables or literal values. Point this out clearly so students see that the rules of Boolean logic still apply in exactly the same way.  \n\n**Question 8:** The error in the code occurs when `float(x + y)` is run. \n\nWhen `x` and `y` are numeric, the `+` symbol is interpreted as addition and the result is cast to a float (e.g. if `x=1` and `y=5` as in the first example then `x+y` yeilds `6`). However, if they are instead strings (as in the second example), then the `+` symbol is interpreted as concatenation rather than addition. Therefore, when `x='2'` and `y='5'`, we get that `2+5` yeilds `25`, not `7`.\n\nThere are two approaches to resolving the issue. The first is to replace `x='2'` and `y='5'` with  `x=2` and `y=5`. The second, and preferred option, is to replace `float(x + y)` with `float(x)+float(y)` so there is no possibility that the `+` symbol is interpreted as concatenation here.\n\n> **Demonstrator Notes:** If students are struggling with this question, suggest that they search the document for the `+` symbol and make sure they understand how it is being used. Hint that the symbol might not be interpreted in the way they first expect, but avoid giving away the full answer unless they are really stuck. The aim is to guide them toward discovering the behaviour themselves.  \n\n**Question 9:** The first box is an assignment of the value `2 + 1` to a variable named `three`, so does not print anything. The second box prints `true` as the variable `z = (1 + 2 == 3)` is interpreted as a Boolean variable, and in Jupyter notebooks, if the last line of a box is simply a variable, with no assignment, then that variable is printed out. `z` is evaluated as `True` (as `1 + 2` does equal `3` in Python), so `True` is printed.\n\nFor the third box, `False` is printed as due to rounding errors `0.1 + 0.2` is evaluated to `0.30000000000000004` rather than `0.3`. This is a cautionary note that floating point math is not perfect.\n\n> **Demonstrator Notes:** First, it aims to get students to think about the difference between the assignment operator `=` and the equality operator `==`. Second, it serves as a cautionary note about floating point arithmetic in Python.\n> \n> After seeing the result, many students may ask how to properly check whether `0.1 + 0.2` equals `0.3`. For now, explain that we will cover this in more detail when we look at `numpy`. If they push further, encourage them to think about constructing a Boolean expression (similar to Question 1) that checks whether two numbers differ by only a very small amount. The aim here is to prepare them for the `np.allclose` function later on, while prompting them to reason about the problem themselves rather than being given the solution straight away.  \n\n**Question 10:** The final solution is given below:\n\n```{python}\n# The string we want to transform\nstart_string = 'Thas as te arang we want!'\nprint('Start:  ', start_string)\n\n# Helper strings you can use for replacements\nstring1 = 'a'\nstring2 = 'st'\nstring3 = 'he a'\nstring4 = ' ge'\nstring5 = 'stri'\nstring6 = 'sts'\nstring7 = 'is'\nstring8 = 'ara'\nstring9 = 'gen'\nstring10 = 'e a'\n\n# Step 1\nstep1 = start_string.replace(string1,string2)\nprint('Step 1: ', step1)\n\n# Step 2\nstep2 = step1.replace(string6,string7)\nprint('Step 2: ', step2)\n\n# Step 3\nstep3 = step2.replace(string2, string1)\nprint('Step 3: ', step3)\n\n# Step 4\nstep4 = step3.replace(string10, string3)\nprint('Step 4: ', step4)\n\n# Step 5\nstep5 = step4.replace(string8, string5)\nprint('Step 5: ', step5)\n```\n\n> **Demonstrator Notes:**  This question is designed to give students practice with the string `replace` function. Encourage them to experiment and work through the task step by step, even if their first attempt doesn’t work. The key learning outcome is to get comfortable with testing, adjusting, and trying again - it aims to enforce good programming habits.  \n\n## Intermediate: Collections\n\n> **Broad Notes for Demonstrators:** If you see a student attempting the intermediate questions who does not seem at the level of the material, please do encourage them to first try the beginner notebook. \n\n**Question 1:** The code for this question is given below:\n\n```{python}\n# Original list\nnums = [5, 2, 8, 2, 9]\nprint(\"Original list:\", nums)\n\n# 1. Retrieve the third element (index 2 because indexing starts at 0)\nthird_element = nums[2]\nprint(\"Third element:\", third_element)\n\n# 2. Slice the first three elements\nfirst_three = nums[:3]\nprint(\"First three elements:\", first_three)\n\n# 3. Replace the last element with 10\nnums[-1] = 10\nprint(\"After replacing last element with 10:\", nums)\n\n# 4. Append 7 to the end of the list\nnums.append(7)\nprint(\"After appending 7:\", nums)\n\n# 5. Remove the first occurrence of 2\nnums.remove(2)\nprint(\"After removing first occurrence of 2:\", nums)\n```\n\n > **Demonstrator Notes:** This question aims to give students some initial practice with lists. Common errors to look out for include failing to account for the fact Python uses zero indexing, or that slicing syntax such as `nums[:3]` doesn't include `nums[3]` in the output, only `nums[0]`,`nums[1]` and `nums[2]`.\n\n**Question 2:** The key to this question is that a list is *ordered* whilst a set is *unordered*. When the list is converted to a set, it's ordering is lost, and when converted back to a list it is now given in increasing (numerical) order by default.\n\n> **Demonstrator Notes:** Hopefully, this should not be a difficult question. Encourage students who are struggling to print out `my_set` and `my_list` and describe what is different between them.\n\n**Question 3:** The answer to this question is the letter `k`. To see this, the below code can be used:\n\n```{python}\n# Here are two strings\nstring1 = \"This is a long random sentence - I wonder which letters it contains and which letters it doesn't.\"\nstring2 = \"This task makes a clear and coherent string with words taken inside a small set\"\n\n# Make strings lowercase\nstring1 = string1.lower()\nstring2 = string2.lower()\n\n# Convert strings to sets\nstring1 = set(string1)\nstring2 = set(string2)\n\n# Compute the set difference\nprint(string2.difference(string1))\n```\n\n> **Demonstrator Notes:** This question brings together concepts from both the `Beginner` and `Intermediate` notebooks, making it a good checkpoint to assess whether students are ready to move into the `Intermediate` material. \n>\n> If students are struggling, suggest that they try the task on paper first. They will probably start by writing out the letters from each sentence and then comparing the two sets of letters. From there, you can show how Python supports the same process by turning a string into a list of characters and then using the `set` constructor to remove duplicates. This should hopefully help them connect the manual approach with the Python solution.  \n>\n> Once they have these concepts down, encourage students to think about why the `lower()` function (as suggested in the hint) is useful here. It ensures that comparisons between characters are case-insensitive.  \n\n**Question 4:** The code for this question is provided below.\n\n```{python}\n# given tuple\nt = ('a', 'b', 'c', 'd', 'e')\n\n# 1. access the first and last elements of t\nfirst = t[0]\nlast = t[-1]\nprint(\"First element:\", first)\nprint(\"Last element:\", last)\n\n# 2. slice out ('b', 'c', 'd')\nslice_part = t[1:4]\nprint(\"Slice ('b', 'c', 'd'):\", slice_part)\n\n# 3. check whether 'c' is in t\nis_c_present = 'c' in t\nprint(\"'c' in t?\", is_c_present)\n\n# 4. find the index of 'd' in t\nindex_d = t.index('d')\nprint(\"Index of 'd':\", index_d)\n\n# 5. count how many times 'a' appears in t\ncount_a = t.count('a')\nprint(\"Count of 'a':\", count_a)\n```\n\n> **Demonstrator Notes:** See notes on Question 1.\n\n**Question 5:** There are many ways to approach this question. Two examples are given below:\n\n```{python}\n# ----------------------------------------------------------------\n# Option 1:\n# ----------------------------------------------------------------\n# clinical trial dataset represented as a dictionary of lists\nclinical_data = {\n    \"Name\": [\"John\", \"Alice\", \"Maria\", \"David\", \"Sarah\"],\n    \"Weight (kg)\": [82, 68, 74, 90, 60],\n    \"Height (cm)\": [178, 165, 170, 185, 160]\n}\n\nprint(clinical_data)\n\n# ----------------------------------------------------------------\n# Option 2:\n# ----------------------------------------------------------------\n# clinical trial dataset represented as a dictionary of dictionaries\nclinical_data = {\n    \"John\": {\"Weight (kg)\": 82, \"Height (cm)\": 178},\n    \"Alice\": {\"Weight (kg)\": 68, \"Height (cm)\": 165},\n    \"Maria\": {\"Weight (kg)\": 74, \"Height (cm)\": 170},\n    \"David\": {\"Weight (kg)\": 90, \"Height (cm)\": 185},\n    \"Sarah\": {\"Weight (kg)\": 60, \"Height (cm)\": 160}\n}\n```\n\n> **Demonstrator Notes:** The aim of this question is to help students recognise that there are multiple valid ways to represent the same dataset in Python. The important part is thinking about how the data will be used. For example, if we need to look up information by subject name, a dictionary of dictionaries might be best; if we want to work with all weights at once (e.g. to build a histogram), a dictionary of lists is more convenient. Emphasise that the choice of data structure depends on the task - there isn’t one 'right' answer.\n\n## Advanced: Copying and References\n\n> **Broad Notes for Demonstrators:** If you see a student attempting the intermediate or advanced questions who does not seem at the level of the material, please do encourage them to first try the earlier notebooks. \n\n**Question 1:** The expected output is `[1,2,3,4]`. This is because `list_a` and `list_b` reference the same location in memory.\n\n```{python}\nlist_a = [1, 2, 3]\nlist_b = list_a\nlist_a.append(4)\nprint(list_b)\n```\n\n> **Demonstrator Notes:** The aim of this question is to get students to recognise that lists are mutable. As a list is mutable, both `list_a` and `list_b` refer to the same underlying object in memory. When we do `list_b = list_a`, we are not creating a copy of the list, but simply creating a new reference to the same list object. Therefore, when we perform `list_a.append(4)`, the change is reflected in both `list_a` and `list_b`. Encourage students to think about how they could gain the desired behaviour using the `.copy()` function (e.g. `list_b = list_a.copy()`).\n\n**Question 2:** Code A will print `[1,2,3]` whilst Code B will print `[4,5,6]`. This is because, when we replace `a` with `[4,5,6]` we change the reference to point to a new location in memory, breaking the connection between `a` and `b`. However, when we change the elements in `a` individually, both `a` and `b` remain pointing to the same location in memory. Thus, when we print `b`, we get `[4,5,6]`.\n\n```{python}\na = [1, 2, 3]\nb = a\na = [4, 5, 6]\nprint(b)\n\na = [1, 2, 3]\nb = a\na[0] = 4\na[1] = 5\na[2] = 6\nprint(b)\n```\n\n> **Demonstrator Notes:** See notes for Question 1.\n\n**Question 3:** The variable names `xyz` and `xyzsquared` are pointing to the same array. When we squared `xyzsquared` we also squared `xyz`. We could have avoided this by making `xyzsquared` a seperate copy of `xyz` using the `list` constructor like so:\n\n```{python}\nxyz = [1,2,3]\n\n# Make a list of x squared, y squared, z squared\nxyzsquared = list(xyz) # The change was implemented here!\nxyzsquared[0] = xyzsquared[0]**2\nxyzsquared[1] = xyzsquared[1]**2\nxyzsquared[2] = xyzsquared[2]**2\n\n# Get x, y and z from xyz list\nx = xyz[0]\ny = xyz[1]\nz = xyz[2]\n\n# Get x squared, y squared and z squared from\n# xyzsquared list\nxsquared = xyzsquared[0]\nysquared = xyzsquared[1]\nzsquared = xyzsquared[2]\n\nprint(x + y + z + xsquared + ysquared + zsquared)\n```\n\n> **Demonstrator Notes:** This question is designed to give students practice debugging code. Try to guide them to the solution where possible, rather than providing the full solution straight away.\n\n**Question 4:** When you do `backup = list(grid)`, Python only makes a new outer list. The smaller lists inside `([1, 2], [3, 4], [5, 6])` are still the exact same objects that grid is using. Because of that, if you change one of the inner lists, the same change shows up `backup`.\n\n > **Demonstrator Notes:** The aim of this question is to understand why the unexpected behaviour occured. If students ask how to fix this, that’s a natural question, but at this stage they don’t yet have the tools to do so. For now, keep the focus on helping them understand why the behaviour occurs, instead of talking about fixes at this stage.\n\n**Question 5:** The reasoning for this question is similar to that of Question 4, but noting that the three inner lists are all pointing to the same place in memory.\n\n > **Demonstrator Notes:** See the notes for Question 4.\n\n"},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["/Users/ft14968/Repos/intro-coding-data-analysis/quarto/_extensions/r-wasm/live/live.lua"],"include-in-header":{"text":"<meta name=\"robots\" content=\"noindex, nofollow\">\n"},"css":["../styles.css"],"toc":true,"toc-depth":3,"highlight-style":"github","number-sections":false,"output-file":"week_01_solutions_demonstrator_version.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.31","ojs-engine":true,"revealjs-plugins":[],"theme":"cosmo","toc-location":"right","code-copy":true,"grid":{"sidebar-width":"350px"},"title":"Week 1: Solutions","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["live-html"]}