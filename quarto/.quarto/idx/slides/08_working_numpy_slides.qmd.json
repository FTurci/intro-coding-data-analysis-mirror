{"title":"Working with NumPy: Indexing and Random Data","markdown":{"yaml":{"title":"Working with NumPy: Indexing and Random Data","format":{"revealjs":{"theme":"default","highlight-style":"github","code-block-bg":true,"code-block-border-left":"#31BAE9","code-copy":true,"code-overflow":"wrap"}},"execute":{"echo":true,"eval":true,"warning":false}},"headingText":"Array Indexing & Slicing","containsRefs":false,"markdown":"\n\n\n```{python}\nimport numpy as np\narr = np.array([10, 20, 30, 40, 50])\n\n# Integer indexing\nprint(\"Element at index 1:\", arr[1])\n\n# Basic slicing\nprint(\"Slice [1:4]:\", arr[1:4])\n```\n\n**Advanced slicing:**\n```{python}\nprint(\"Every other element:\", arr[::2])\nprint(\"Last three elements:\", arr[-3:])\nprint(\"Reversed array:\", arr[::-1])\n```\n\n---\n\n## Views vs Copies\n\n**Slicing creates views (shared data):**\n```{python}\nslice_view = arr[2:5]\nslice_view[0] = 99\nprint(\"Original after view modification:\", arr)\n```\n\n**Creating independent copies:**\n```{python}\narr = np.array([10, 20, 30, 40, 50])  # Reset\narr_copy = arr[2:5].copy()\narr_copy[0] = 100\nprint(\"Copy:\", arr_copy)\nprint(\"Original unchanged:\", arr)\n```\n\n---\n\n## Boolean Indexing\n\n**Filter data with conditions:**\n```{python}\narr = np.array([1, 2, 3, 4, 5, 6])\nthreshold = 3\n\nbool_mask = arr > threshold\nprint(\"Boolean mask:\", bool_mask)\nprint(\"Filtered values:\", arr[bool_mask])\n```\n\n**Using `np.where`:**\n```{python}\n# Get indices where condition is True\nindices = np.where(arr > threshold)[0]\nprint(\"Indices:\", indices)\n\n# Conditional selection\nresult = np.where(arr > 3, arr, 0)\nprint(\"Conditional result:\", result)\n```\n\n---\n\n## Generating Sequences\n\n**`np.arange` - step-based:**\n```{python}\nprint(\"Integers:\", np.arange(0, 10, 2))\nprint(\"Floats:\", np.arange(0.0, 1.0, 0.2))\n```\n\n**`np.linspace` - count-based:**\n```{python}\nprint(\"5 points from 0 to 1:\", np.linspace(0, 1, 5))\n```\n\n- **`arange`**: Use when you know the step size\n- **`linspace`**: Use when you know the number of points\n\n---\n\n## Filled Arrays\n\n```{python}\n# Create arrays with specific values\nzeros_arr = np.zeros(5)\nones_arr = np.ones(4)\nfull_arr = np.full(3, 7)\n\nprint(\"Zeros:\", zeros_arr)\nprint(\"Ones:\", ones_arr)\nprint(\"Full:\", full_arr)\n```\n\n**Same shape as existing array:**\n```{python}\ntemplate = np.array([1, 2, 3])\nprint(\"Zeros like:\", np.zeros_like(template))\nprint(\"Ones like:\", np.ones_like(template))\nprint(\"Full like:\", np.full_like(template, 9))\n```\n\n---\n\n## Random Number Generation\n\n**Initialize generator (for reproducibility):**\n```{python}\nrng = np.random.default_rng(seed=123)\n```\n\n**Different distributions:**\n```{python}\n# Random integers\nprint(\"Random integers:\", rng.integers(0, 100, size=5))\n\n# Uniform floats [0, 1)\nprint(\"Uniform [0,1):\", rng.random(5))\n\n# Normal distribution\nnormal_samples = rng.normal(loc=0, scale=1, size=5)\nprint(\"Normal samples:\", normal_samples)\n```\n\n---\n\n## Pseudo-Random Numbers\n\n**Computers are deterministic** - they use algorithms to generate \"pseudo-random\" sequences\n\n**Linear Congruential Generator example:**\n$$x_{n+1} = (a \\times x_n + c) \\bmod m$$\n\n**Key concept: Seeds enable reproducibility**\n```{python}\n# Same seed = same sequence\nrng1 = np.random.default_rng(seed=42)\nrng2 = np.random.default_rng(seed=42)\n\nprint(\"RNG1:\", rng1.integers(0, 10, size=3))\nprint(\"RNG2:\", rng2.integers(0, 10, size=3))  # Same output!\n```\n\n---\n\n## Performance Tips\n\n**Preallocate for efficiency:**\n```{python}\n# Less efficient: generate one at a time\n# for _ in range(1000):\n#     val = rng.integers(0, 100)\n\n# More efficient: preallocate\nprealloc = rng.integers(0, 100, size=1000)\n# Then use values from prealloc array\n```\n\n**Memory vs Speed tradeoff:**\n- Small tasks: 100-1,000 elements\n- Medium tasks: 10,000-100,000 elements  \n- Large tasks: 1,000,000+ elements\n\n---\n\n## Key Takeaways\n\n- **Views** share data, **copies** are independent\n- **Boolean indexing** enables powerful data filtering\n- **`arange` vs `linspace`** serve different use cases\n- **Random generators** need seeds for reproducibility\n- **Preallocating** arrays improves performance\n- Choose **array generation method** based on your needs\n","srcMarkdownNoYaml":"\n\n## Array Indexing & Slicing\n\n```{python}\nimport numpy as np\narr = np.array([10, 20, 30, 40, 50])\n\n# Integer indexing\nprint(\"Element at index 1:\", arr[1])\n\n# Basic slicing\nprint(\"Slice [1:4]:\", arr[1:4])\n```\n\n**Advanced slicing:**\n```{python}\nprint(\"Every other element:\", arr[::2])\nprint(\"Last three elements:\", arr[-3:])\nprint(\"Reversed array:\", arr[::-1])\n```\n\n---\n\n## Views vs Copies\n\n**Slicing creates views (shared data):**\n```{python}\nslice_view = arr[2:5]\nslice_view[0] = 99\nprint(\"Original after view modification:\", arr)\n```\n\n**Creating independent copies:**\n```{python}\narr = np.array([10, 20, 30, 40, 50])  # Reset\narr_copy = arr[2:5].copy()\narr_copy[0] = 100\nprint(\"Copy:\", arr_copy)\nprint(\"Original unchanged:\", arr)\n```\n\n---\n\n## Boolean Indexing\n\n**Filter data with conditions:**\n```{python}\narr = np.array([1, 2, 3, 4, 5, 6])\nthreshold = 3\n\nbool_mask = arr > threshold\nprint(\"Boolean mask:\", bool_mask)\nprint(\"Filtered values:\", arr[bool_mask])\n```\n\n**Using `np.where`:**\n```{python}\n# Get indices where condition is True\nindices = np.where(arr > threshold)[0]\nprint(\"Indices:\", indices)\n\n# Conditional selection\nresult = np.where(arr > 3, arr, 0)\nprint(\"Conditional result:\", result)\n```\n\n---\n\n## Generating Sequences\n\n**`np.arange` - step-based:**\n```{python}\nprint(\"Integers:\", np.arange(0, 10, 2))\nprint(\"Floats:\", np.arange(0.0, 1.0, 0.2))\n```\n\n**`np.linspace` - count-based:**\n```{python}\nprint(\"5 points from 0 to 1:\", np.linspace(0, 1, 5))\n```\n\n- **`arange`**: Use when you know the step size\n- **`linspace`**: Use when you know the number of points\n\n---\n\n## Filled Arrays\n\n```{python}\n# Create arrays with specific values\nzeros_arr = np.zeros(5)\nones_arr = np.ones(4)\nfull_arr = np.full(3, 7)\n\nprint(\"Zeros:\", zeros_arr)\nprint(\"Ones:\", ones_arr)\nprint(\"Full:\", full_arr)\n```\n\n**Same shape as existing array:**\n```{python}\ntemplate = np.array([1, 2, 3])\nprint(\"Zeros like:\", np.zeros_like(template))\nprint(\"Ones like:\", np.ones_like(template))\nprint(\"Full like:\", np.full_like(template, 9))\n```\n\n---\n\n## Random Number Generation\n\n**Initialize generator (for reproducibility):**\n```{python}\nrng = np.random.default_rng(seed=123)\n```\n\n**Different distributions:**\n```{python}\n# Random integers\nprint(\"Random integers:\", rng.integers(0, 100, size=5))\n\n# Uniform floats [0, 1)\nprint(\"Uniform [0,1):\", rng.random(5))\n\n# Normal distribution\nnormal_samples = rng.normal(loc=0, scale=1, size=5)\nprint(\"Normal samples:\", normal_samples)\n```\n\n---\n\n## Pseudo-Random Numbers\n\n**Computers are deterministic** - they use algorithms to generate \"pseudo-random\" sequences\n\n**Linear Congruential Generator example:**\n$$x_{n+1} = (a \\times x_n + c) \\bmod m$$\n\n**Key concept: Seeds enable reproducibility**\n```{python}\n# Same seed = same sequence\nrng1 = np.random.default_rng(seed=42)\nrng2 = np.random.default_rng(seed=42)\n\nprint(\"RNG1:\", rng1.integers(0, 10, size=3))\nprint(\"RNG2:\", rng2.integers(0, 10, size=3))  # Same output!\n```\n\n---\n\n## Performance Tips\n\n**Preallocate for efficiency:**\n```{python}\n# Less efficient: generate one at a time\n# for _ in range(1000):\n#     val = rng.integers(0, 100)\n\n# More efficient: preallocate\nprealloc = rng.integers(0, 100, size=1000)\n# Then use values from prealloc array\n```\n\n**Memory vs Speed tradeoff:**\n- Small tasks: 100-1,000 elements\n- Medium tasks: 10,000-100,000 elements  \n- Large tasks: 1,000,000+ elements\n\n---\n\n## Key Takeaways\n\n- **Views** share data, **copies** are independent\n- **Boolean indexing** enables powerful data filtering\n- **`arange` vs `linspace`** serve different use cases\n- **Random generators** need seeds for reproducibility\n- **Preallocating** arrays improves performance\n- Choose **array generation method** based on your needs\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","highlight-style":"github","output-file":"08_working_numpy_slides.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.7.31","auto-stretch":true,"title":"Working with NumPy: Indexing and Random Data","theme":"default","code-block-bg":true,"code-block-border-left":"#31BAE9","code-copy":true}}},"projectFormats":["live-html"]}