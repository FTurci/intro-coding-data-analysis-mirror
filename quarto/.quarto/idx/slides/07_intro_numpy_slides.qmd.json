{"title":"The `numpy` module","markdown":{"yaml":{"title":"The `numpy` module","format":{"pptx":{"reference-doc":"template.pptx"},"revealjs":{"theme":["simple","styles.scss"],"highlight-style":"github","code-block-bg":true,"code-block-border-left":"#31BAE9","code-block-font-size":"0.45em","code-copy":true,"code-overflow":"wrap","incremental":true,"smaller":true,"scrollable":true,"slide-number":true,"self-contained":true}},"execute":{"echo":true,"eval":true,"warning":false,"error":true}},"headingText":"Aims","containsRefs":false,"markdown":"\n\n\nBy the end of this lecture, you will be able to:\n\n- Explain what the NumPy module is and why it is used\n- Create and manipulate NumPy arrays\n- Perform element-wise operations and mathematical functions on arrays\n- Compare NumPy arrays with Python lists in terms of performance and functionality\n- Use basic aggregation and array manipulation functions in NumPy\n\n## What is `numpy`?\n\n**NumPy** is a Python library that makes working with numbers and large collections of data fast and easy. \n\n![Complete description at [https://numpy.org](https://numpy.org)](https://numpy.org/doc/stable/_static/numpylogo.svg)\n\nIt provides special **array** objects and tools for doing math efficiently, which is useful for data analysis and scientific computing.\n\n. . .\n\nIt is imported in your session using the following command\n\n```python\nimport numpy\n```\n. . .\n\nWe will follow a common practice and use a shorthand with the `as` syntax\n\n```python\nimport numpy as np\n```\n. . .\n\nSo `np` will always mean `numpy` for us.\n\n## Arrays vs lists\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n**Python Lists**\n\n- Ordered, Mutable  \n- Mixed data types\n- Explicit operations needed\n- Slower performance\n:::\n\n::: {.column width=\"50%\"}\n**NumPy Arrays**\n\n- Ordered, Mutable\n- **One** data type per array\n- Element-wise operations\n- Fast & memory efficient\n:::\n::::\n\n. . .\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n```{python}\nlist_ex = [1, 2, 3, 4]\nprint(list_ex)\n```\n\n:::\n\n::: {.column width=\"50%\"}\n```{python}\nimport numpy as np\n#notice that we explicitly call the np.array()\narr_ex = np.array([1, 2, 3, 4]) \nprint(arr_ex)\n```\n\n:::\n::::\n\n\nWe are going to see these differences in detail.\n\n---\n\n## Arrays from lists\n\nA purely numerical list can readily be converted to an array.\n\n\n```{python}\nimport numpy as np\n# Create array from list\nlist1 = [1.,1.,2.,3.,5.,8.]\narr1 = np.array(list1)\nprint(arr1)\n```\n\n. . .\n\nThe type of the elements yields the **data type** of the array\n\n```{python}\nprint(arr1.dtype)\n```\n\n> Try and change the list1 object to contain only integers and see the change!\n\n---\n\n\n## Array properties\n\nArrays possess plenty of properties.\n\nThese are accessed with the `.` notation^[use `.` and then `TAB` to see all of the properties].\n\n```{python}\nprint(f\"Data type: {arr1.dtype}\")\nprint(f\"Shape: {arr1.shape}\")\nprint(f\"Shape: {arr1.size}\")\n```\n\nFor now, we consider only 1d arrays, i.e. sequences. Their length is is their `size` and corresponds to the first element of the property `shape`.\n\n---\n\n## Accessing array elements\n\nSimilarly to lists, we access an element in an array via zero-based **indexing**\n\n\n```{python}\nprint(arr1[0])    # First element\nprint(arr1[-1])   # Last element\n```\n\nAgain, similarly to lists, we can access regions of the array via **slicing**\n\n```{python}\nprint(arr1[3:6])  # Elements from index 3 to 6\n```\n\n---\n\n\n## Element-wise Operations\n\nThe main motivation to use arrays is that lists are cumbersome when performing maths.\n\nSuppose we have a list and want to double all of its elements:\n\n```{python}\nlist1 = [1,2,3,4]\n```\nWe need to loop over all of them and create a new list\n```{python}\nlist2 = []\nfor item in list1:\n    list2.append(2*item)\nprint(list2)\n```\n\nIn fact, we can do this in a slightly more compact way using **list comprehension** \n\n```{python}\nlist2 = [item*2 for item in list1]\n```\nStill, an explicit loop is needed. Loops in Python are **slow**.\n\n## Element-wise Operations\n\nThe `numpy` syntax avoids the explicit Python loop.\n\n```{python}\narr1 = np.array(list1)\narr2 = 2*arr1\nprint(arr2)\n```\nThis is not just a cosmetic change: under the hood `numpy` uses an efficient architecture that performs operations in **compiled code**, making it much faster than Python loops.\n\n\n---\n\n## Performance advantage\n\nThis performance difference can be tracked explicitly. \n\nWe create a large list and a large array with identical content\n```{python}\n# Create a large list and array\nlarge_list = list(range(1_000_000))\nlarge_array = np.array(large_list)\n```\nAnd then track the time for the two operations\n```{python}\nimport time\n#  Track the time taken for the list multiplication\nstart = time.time()\nlist_result = [x * 2 for x in large_list]\nend = time.time()\nprint(f\"List comprehension time: {end - start:.5f} seconds\")\n\n# Time array multiplication\nstart = time.time()\narray_result = large_array * 2\nend = time.time()\nprint(f\"NumPy array time: {end - start:.5f} seconds\")\n```\n\n---\n\n##  General mathematical functions\n\nThe multiplication we performed earlier is done **element-wise**: every element is update according to teh same rule.\n\nWe can apply plenty of element-wise operations to the arrays. \n\nMany of these are available as `numpy` functions directly accessed from the `np.` module\n```{python}\n# Element-wise functions\nprint(f\"Square root: {np.sqrt(arr1)}\")\nprint(f\"Mean: {np.mean(arr1)}\")\nprint(f\"Cosine: {np.cos(arr1)}\")\n```\n\n. . .\n\nThe operations do not modify the original array, but produce **new copies**\n```{python}\narr2 = arr1*3/2 + 5\nprint(f\"Original: {arr1}\")\nprint(f\"Modified: {arr2}\")\n```\n\n---\n\n\n## Sums\n\nOther convenent `numpy` functions allow you to accumulate values without loops.\n\nAssume we have an array $x$\n\n```{python}\nx = np.array([1,2,3,4,5,6,7,8])\n```\n\n**Sums**\n\n$$\nS = \\sum_{i=1}^{n} x_i\n$$\n\nIn NumPy, this is translated as:\n\n```{python}\nS = np.sum(x)\nprint(S)\n```\n\n## Sums\n\n**Cumulative sums**\n\nA cumulative sum is a sequence where each element is the sum of all previous elements up to that position.\n$$\ny_i = \\sum_{j=1}^{i} x_j\n$$\n\nIn NumPy, this is translated as:\n\n```{python}\n y = np.cumsum(x)\n print(y)\n```\n---\n\n## Example: molecular masses\n\nLet's consider the formula for the **molecular mass** of a compound:\n\n$$\nM = \\sum_{i=1}^{n} a_i m_i\n$$\n\nwhere\n\n- $a_i$ is the number of atoms of element $i$\n- $m_i$ is the atomic mass of element $i$\n\n. . .\n\nWith `numpy`, you can compute this as:\n\n```{python}\na = np.array([2, 1, 4])      # Number of atoms for each element\nm = np.array([12.01, 1.01, 16.00])  # Atomic masses (e.g., C, H, O)\nM = np.sum(a * m)\nprint(f\"Molecular mass: {M}\")\n```\n\n---\n\n## Operations between arrays\n\nYou can perform arithmetic operations directly between arrays of the same shape. Operations like addition, subtraction, multiplication, and division are applied **element-wise**.\n\nFor example:\n\n**Element-wise operations:**\n```{python}\nadded = arr1 + arr2\nmultiplied = arr1 * arr2\nprint(f\"Added: {added}\")\nprint(f\"Multiplied: {multiplied}\")\n```\n\n. . .\n\n**Note:** Arrays must have compatible shapes!\n\n```{python}\narr3 = np.array([1, 2, 3])\narr4 = np.array([4, 5])\nresult = arr3 + arr4\n```\n\n--- \n\n## Combining arrays\n\nWith lists, the `+` operator concatenated different lists. Since for arrays the sign `+` corresponds to true mathematical addition, a dedicated concatenation function exists:\n```{python}\ncombined = np.concatenate([arr1, arr2])\nprint(f\"Unique elements: {combined}\")\n```\n\nMany other variations of concatenation exist. Consult the [documentation](https://numpy.org/doc/stable/).\n\n---\n\n## Key Takeaways\n\n- **NumPy arrays** are optimized for numerical operations\n- **Element-wise operations** work implicitly\n- **Performance benefits** for large datasets\n- **Mathematical functions** apply to entire arrays\n- **Shape compatibility** required for operations\n- Choose the **right tool** for your task\n","srcMarkdownNoYaml":"\n\n## Aims\n\nBy the end of this lecture, you will be able to:\n\n- Explain what the NumPy module is and why it is used\n- Create and manipulate NumPy arrays\n- Perform element-wise operations and mathematical functions on arrays\n- Compare NumPy arrays with Python lists in terms of performance and functionality\n- Use basic aggregation and array manipulation functions in NumPy\n\n## What is `numpy`?\n\n**NumPy** is a Python library that makes working with numbers and large collections of data fast and easy. \n\n![Complete description at [https://numpy.org](https://numpy.org)](https://numpy.org/doc/stable/_static/numpylogo.svg)\n\nIt provides special **array** objects and tools for doing math efficiently, which is useful for data analysis and scientific computing.\n\n. . .\n\nIt is imported in your session using the following command\n\n```python\nimport numpy\n```\n. . .\n\nWe will follow a common practice and use a shorthand with the `as` syntax\n\n```python\nimport numpy as np\n```\n. . .\n\nSo `np` will always mean `numpy` for us.\n\n## Arrays vs lists\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n**Python Lists**\n\n- Ordered, Mutable  \n- Mixed data types\n- Explicit operations needed\n- Slower performance\n:::\n\n::: {.column width=\"50%\"}\n**NumPy Arrays**\n\n- Ordered, Mutable\n- **One** data type per array\n- Element-wise operations\n- Fast & memory efficient\n:::\n::::\n\n. . .\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n```{python}\nlist_ex = [1, 2, 3, 4]\nprint(list_ex)\n```\n\n:::\n\n::: {.column width=\"50%\"}\n```{python}\nimport numpy as np\n#notice that we explicitly call the np.array()\narr_ex = np.array([1, 2, 3, 4]) \nprint(arr_ex)\n```\n\n:::\n::::\n\n\nWe are going to see these differences in detail.\n\n---\n\n## Arrays from lists\n\nA purely numerical list can readily be converted to an array.\n\n\n```{python}\nimport numpy as np\n# Create array from list\nlist1 = [1.,1.,2.,3.,5.,8.]\narr1 = np.array(list1)\nprint(arr1)\n```\n\n. . .\n\nThe type of the elements yields the **data type** of the array\n\n```{python}\nprint(arr1.dtype)\n```\n\n> Try and change the list1 object to contain only integers and see the change!\n\n---\n\n\n## Array properties\n\nArrays possess plenty of properties.\n\nThese are accessed with the `.` notation^[use `.` and then `TAB` to see all of the properties].\n\n```{python}\nprint(f\"Data type: {arr1.dtype}\")\nprint(f\"Shape: {arr1.shape}\")\nprint(f\"Shape: {arr1.size}\")\n```\n\nFor now, we consider only 1d arrays, i.e. sequences. Their length is is their `size` and corresponds to the first element of the property `shape`.\n\n---\n\n## Accessing array elements\n\nSimilarly to lists, we access an element in an array via zero-based **indexing**\n\n\n```{python}\nprint(arr1[0])    # First element\nprint(arr1[-1])   # Last element\n```\n\nAgain, similarly to lists, we can access regions of the array via **slicing**\n\n```{python}\nprint(arr1[3:6])  # Elements from index 3 to 6\n```\n\n---\n\n\n## Element-wise Operations\n\nThe main motivation to use arrays is that lists are cumbersome when performing maths.\n\nSuppose we have a list and want to double all of its elements:\n\n```{python}\nlist1 = [1,2,3,4]\n```\nWe need to loop over all of them and create a new list\n```{python}\nlist2 = []\nfor item in list1:\n    list2.append(2*item)\nprint(list2)\n```\n\nIn fact, we can do this in a slightly more compact way using **list comprehension** \n\n```{python}\nlist2 = [item*2 for item in list1]\n```\nStill, an explicit loop is needed. Loops in Python are **slow**.\n\n## Element-wise Operations\n\nThe `numpy` syntax avoids the explicit Python loop.\n\n```{python}\narr1 = np.array(list1)\narr2 = 2*arr1\nprint(arr2)\n```\nThis is not just a cosmetic change: under the hood `numpy` uses an efficient architecture that performs operations in **compiled code**, making it much faster than Python loops.\n\n\n---\n\n## Performance advantage\n\nThis performance difference can be tracked explicitly. \n\nWe create a large list and a large array with identical content\n```{python}\n# Create a large list and array\nlarge_list = list(range(1_000_000))\nlarge_array = np.array(large_list)\n```\nAnd then track the time for the two operations\n```{python}\nimport time\n#  Track the time taken for the list multiplication\nstart = time.time()\nlist_result = [x * 2 for x in large_list]\nend = time.time()\nprint(f\"List comprehension time: {end - start:.5f} seconds\")\n\n# Time array multiplication\nstart = time.time()\narray_result = large_array * 2\nend = time.time()\nprint(f\"NumPy array time: {end - start:.5f} seconds\")\n```\n\n---\n\n##  General mathematical functions\n\nThe multiplication we performed earlier is done **element-wise**: every element is update according to teh same rule.\n\nWe can apply plenty of element-wise operations to the arrays. \n\nMany of these are available as `numpy` functions directly accessed from the `np.` module\n```{python}\n# Element-wise functions\nprint(f\"Square root: {np.sqrt(arr1)}\")\nprint(f\"Mean: {np.mean(arr1)}\")\nprint(f\"Cosine: {np.cos(arr1)}\")\n```\n\n. . .\n\nThe operations do not modify the original array, but produce **new copies**\n```{python}\narr2 = arr1*3/2 + 5\nprint(f\"Original: {arr1}\")\nprint(f\"Modified: {arr2}\")\n```\n\n---\n\n\n## Sums\n\nOther convenent `numpy` functions allow you to accumulate values without loops.\n\nAssume we have an array $x$\n\n```{python}\nx = np.array([1,2,3,4,5,6,7,8])\n```\n\n**Sums**\n\n$$\nS = \\sum_{i=1}^{n} x_i\n$$\n\nIn NumPy, this is translated as:\n\n```{python}\nS = np.sum(x)\nprint(S)\n```\n\n## Sums\n\n**Cumulative sums**\n\nA cumulative sum is a sequence where each element is the sum of all previous elements up to that position.\n$$\ny_i = \\sum_{j=1}^{i} x_j\n$$\n\nIn NumPy, this is translated as:\n\n```{python}\n y = np.cumsum(x)\n print(y)\n```\n---\n\n## Example: molecular masses\n\nLet's consider the formula for the **molecular mass** of a compound:\n\n$$\nM = \\sum_{i=1}^{n} a_i m_i\n$$\n\nwhere\n\n- $a_i$ is the number of atoms of element $i$\n- $m_i$ is the atomic mass of element $i$\n\n. . .\n\nWith `numpy`, you can compute this as:\n\n```{python}\na = np.array([2, 1, 4])      # Number of atoms for each element\nm = np.array([12.01, 1.01, 16.00])  # Atomic masses (e.g., C, H, O)\nM = np.sum(a * m)\nprint(f\"Molecular mass: {M}\")\n```\n\n---\n\n## Operations between arrays\n\nYou can perform arithmetic operations directly between arrays of the same shape. Operations like addition, subtraction, multiplication, and division are applied **element-wise**.\n\nFor example:\n\n**Element-wise operations:**\n```{python}\nadded = arr1 + arr2\nmultiplied = arr1 * arr2\nprint(f\"Added: {added}\")\nprint(f\"Multiplied: {multiplied}\")\n```\n\n. . .\n\n**Note:** Arrays must have compatible shapes!\n\n```{python}\narr3 = np.array([1, 2, 3])\narr4 = np.array([4, 5])\nresult = arr3 + arr4\n```\n\n--- \n\n## Combining arrays\n\nWith lists, the `+` operator concatenated different lists. Since for arrays the sign `+` corresponds to true mathematical addition, a dedicated concatenation function exists:\n```{python}\ncombined = np.concatenate([arr1, arr2])\nprint(f\"Unique elements: {combined}\")\n```\n\nMany other variations of concatenation exist. Consult the [documentation](https://numpy.org/doc/stable/).\n\n---\n\n## Key Takeaways\n\n- **NumPy arrays** are optimized for numerical operations\n- **Element-wise operations** work implicitly\n- **Performance benefits** for large datasets\n- **Mathematical functions** apply to entire arrays\n- **Shape compatibility** required for operations\n- Choose the **right tool** for your task\n"},"formats":{"pptx":{"identifier":{"display-name":"Powerpoint","target-format":"pptx","base-format":"pptx"},"execute":{"fig-width":11,"fig-height":5.5,"fig-format":"png","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":false,"output-ext":"pptx","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"page-width":10},"pandoc":{"default-image-extension":"png","to":"pptx","reference-doc":"template.pptx","output-file":"07_intro_numpy_slides.pptx"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"title":"The `numpy` module"}},"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","highlight-style":"github","incremental":true,"self-contained":true,"output-file":"07_intro_numpy_slides.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.7.31","auto-stretch":true,"title":"The `numpy` module","theme":["simple","styles.scss"],"code-block-bg":true,"code-block-border-left":"#31BAE9","code-block-font-size":"0.45em","code-copy":true,"smaller":true,"scrollable":true,"slideNumber":true}}},"projectFormats":["live-html"]}