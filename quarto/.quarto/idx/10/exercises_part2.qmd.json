{"title":"Using a mask","markdown":{"yaml":{"title":"Using a mask","jupyter":"python3"},"headingText":"Pair programming: part 2","containsRefs":false,"markdown":"\n\n\n\nFor the second part of this activity you will remain in the same pairs/threes as the first part and you should continue writing code in the same way using *pair programming*. However, you should swap your roles, so one of the people directing (the **navigator**) should now be writing the code (the **driver**) and vice versa.\n\n\n## Masking a galaxy\n\nOne application for using a geometrical mask, like you have been developing, is when looking at images containing real objects like galaxies. In this case we have accessed a galaxy image as a png file. In reality, there are more specific file formats traditionally used to store this type of astronomical data but the principle is similar.\n\nWe can open the image of the galaxy using the following code. This uses a module called `pillow` (imported as `PIL`) which understands how to read image files and we can import the `Image` sub-module to open this file. We can convert that image into a `numpy` `array` object.\n\n```{python}\nfrom PIL import Image\nimport numpy as np\n\nim_filename = \"ngc253_small.png\"\nim = np.array(Image.open(im_filename))\n```\n\nIf we look at the shape of this image data we can see that is is 3D - it has height and width but also three entries for colour: Red, Green and Blue (RGB).\n\n```{python}\nprint(im.shape)\n```\n\nAs we did when plotting the mask, we can use a `matplotlib` function called `imshow()` to display this image, but this time it knows how to interpret the three colour channels to display an image with colour.\n\n```{python}\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8,8))\nax.imshow(im, origin=\"lower\")\n```\n\nThis is sprial galaxy [NGC 253](https://www.eso.org/public/images/eso0902a/), also known as the Sculpter Galaxy. If we wanted to mask this image so that only the pixels related to the galaxy remain, we can do so using a geometrical mask for an ellipse - similiar to the circular mask you have been developing but with a few additional parameters needed.\n\n## Creating an elliptical mask\n\nThe `inside_ellipse` function defined below will allow you to check whether an (x, y) value is inside an ellipse with the supplied parameters. As we've seen in previous weeks, functions can be used to avoid having to repeat code. \n\n```{python}\ndef inside_ellipse(x, y, centre=(0,0), a=2, b=1, alpha=0):\n    \n    x0,y0 = centre\n    \n    # Convert alpha in degrees to radians for use with cos/sin function\n    alpha_rad = np.radians(alpha)\n    \n    term1 = ((x-x0)*np.cos(alpha_rad) + (y-y0)*np.sin(alpha_rad))**2 / a**2\n    term2 = ((x-x0)*np.sin(alpha_rad) - (y-y0)*np.cos(alpha_rad))**2 / b**2\n    \n    total = term1 + term2\n\n    return total<1\n```\n\n### Equations for an ellipse\n\nTo understand the parameters that can be passed to the `inside_ellipse()` function we need to consider the form of an ellipse. The equation govering the edge of an ellipse is similiar to a circle but instead of one radius, $r$, there are now two parameters $a$ and $b$ defined as the semi-major and semi-minor axes (naming can be the other way round depending on which is larger).\n\nFor an ellipse centred at ($x_{0}$, $y_{0}$) and with the semi-major axis parallel to the x-axis the equation of the edge of the ellipse would be:\n\n$$ \\frac{(x-x_0)^2}{a^2} + \\frac{(y-y_0)^2}{b^2} = 1 $$\n\nThis would look something like:\n\n<img src=\"images/Ellipse_illustration_no-angle.png\" alt=\"Ellipse\" style=\"display:block;margin-left:auto;margin-right:auto;width:30%\"/>\n\nHowever, for our example we also need to consider an ellipse at an angle away from the x-axis, alpha ($\\alpha$). The edge for this ellipse can be calculated using the full equation:\n\n$$ \\frac{((x-x_0)\\cos\\alpha + (y-y_0)\\sin\\alpha)^2}{a^2} + \\frac{((x-x_0)\\sin\\alpha - (y-y_0)\\cos\\alpha)^2}{b^2} = 1 $$\n\nThis would look like:\n\n<img src=\"images/Ellipse_illustration_with-angle.png\" alt=\"Ellipse at an angle\" style=\"display:block;margin-left:auto;margin-right:auto;width:30%\"/>\n\nThe parameters needed to use `inside_ellipse` function are: the centre of the ellipse, the semi-major and semi-minor axes and the angle, $\\alpha$. For example:\n\n```{python}\nx1 = 0\ny1 = 0\nposition_is_in_ellipse1 = inside_ellipse(x1, y1, centre=(0, 0), a=2, b=1, alpha=0)\nprint(f\"Is position ({x1}, {y1}) inside the ellipse? {position_is_in_ellipse1}\")\n\nx2 = 0\ny2 = 4\nposition_is_in_ellipse2 = inside_ellipse(x2, y2, centre=(0, 0), a=2, b=1, alpha=0)\nprint(f\"Is position ({x2}, {y2}) inside the ellipse? {position_is_in_ellipse2}\")\n```\n\n---\n\n### Exercise B\n\nFor our example of the galaxy the parameters for a suitable ellipse are as follows:\n\n - centre position $x_0$, $y_0$ at (500, 470)\n - semi-major axis, $a$, of 365\n - semi-minor axis, $b$, of 70\n - angle alpha, $\\alpha$, of 38 degrees\n\n1. Use the `inside_ellipse` function to create an elliptical mask which could be used to mask the galaxy image so only the galaxy is included.\n2. Apply this mask to each of the (R, G, B) channels of the image `im` (recall this is a 3D `np.array` object). Call the masked image `im_masked`.\n\nAs above, you can use the plotting code below which uses the `matplotlib` function `imshow()` to plot the 3D `im_masked` object as a colour image (or to plot a 2D image for one colour channel).\n\n```{python}\n# ADD CODE HERE\n\n\n```\n\n```{python}\n# ADD CODE HERE\n\n\n```\n\n```{python}\n# UNCOMMENT THIS CODE TO PLOT YOUR MASKED IMAGE\n\n#import matplotlib.pyplot as plt\n#\n#fig, ax = plt.subplots(figsize=(8,8))\n#ax.imshow(im_masked.astype(int),origin=\"lower\")\n```\n\nTake time to discuss this but if you are both really stuck, there is a [hint notebook](hint2_apply_mask.qmd) available which shows how you would apply a mask which includes a rectangle to an image.\n\n---\n\n## Calculating the magnitude\n\nNow that we have masked out just the pixels related to the galaxy, one parameter we can derive is to calculate the galaxy brightness for a particular colour. Normally, this would not be done from an RGB image but we can use this to make an approximation.\n\nThe magnitude of an object is given by the equation:\n\n$$ m_{AB} = -2.5\\log_{10}(f_v) + 8.90 $$\n\nwhere:\n - $m_{AB}$ is the magnitude (on the AB scale)\n - $f_v$ is the spectral flux density (in units of Jansky, $Jy$)\n\n---\n\n### Exercise C\n\nWe can calculate an approximation of the spectral flux density, $f_{v}$, by **summing the pixel values** from our image and by applying a scale factor of $2.8\\times10^{-7}$.\n\nFrom your masked image of the galaxy, and using the details above, calculate an approximation of the magnitude of the Blue channel (the third channel) from this image.\n\nHow does this compare to the true value for \"B (AB)\"? - available here: http://simbad.u-strasbg.fr/simbad/sim-id?Ident=NGC+253&jsessionid=262A420D60A8A4D72D3384528AA0980A.main\n\nHint:\n  - Additional `numpy` functions which will be useful:\n    - `sum()` - https://numpy.org/doc/stable/reference/generated/numpy.sum.html\n    - `log10()` - https://numpy.org/doc/stable/reference/generated/numpy.log10.html     \n\n```{python}\n# ADD CODE HERE\n```\n\n---\n\n","srcMarkdownNoYaml":"\n\n\n## Pair programming: part 2\n\nFor the second part of this activity you will remain in the same pairs/threes as the first part and you should continue writing code in the same way using *pair programming*. However, you should swap your roles, so one of the people directing (the **navigator**) should now be writing the code (the **driver**) and vice versa.\n\n\n## Masking a galaxy\n\nOne application for using a geometrical mask, like you have been developing, is when looking at images containing real objects like galaxies. In this case we have accessed a galaxy image as a png file. In reality, there are more specific file formats traditionally used to store this type of astronomical data but the principle is similar.\n\nWe can open the image of the galaxy using the following code. This uses a module called `pillow` (imported as `PIL`) which understands how to read image files and we can import the `Image` sub-module to open this file. We can convert that image into a `numpy` `array` object.\n\n```{python}\nfrom PIL import Image\nimport numpy as np\n\nim_filename = \"ngc253_small.png\"\nim = np.array(Image.open(im_filename))\n```\n\nIf we look at the shape of this image data we can see that is is 3D - it has height and width but also three entries for colour: Red, Green and Blue (RGB).\n\n```{python}\nprint(im.shape)\n```\n\nAs we did when plotting the mask, we can use a `matplotlib` function called `imshow()` to display this image, but this time it knows how to interpret the three colour channels to display an image with colour.\n\n```{python}\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8,8))\nax.imshow(im, origin=\"lower\")\n```\n\nThis is sprial galaxy [NGC 253](https://www.eso.org/public/images/eso0902a/), also known as the Sculpter Galaxy. If we wanted to mask this image so that only the pixels related to the galaxy remain, we can do so using a geometrical mask for an ellipse - similiar to the circular mask you have been developing but with a few additional parameters needed.\n\n## Creating an elliptical mask\n\nThe `inside_ellipse` function defined below will allow you to check whether an (x, y) value is inside an ellipse with the supplied parameters. As we've seen in previous weeks, functions can be used to avoid having to repeat code. \n\n```{python}\ndef inside_ellipse(x, y, centre=(0,0), a=2, b=1, alpha=0):\n    \n    x0,y0 = centre\n    \n    # Convert alpha in degrees to radians for use with cos/sin function\n    alpha_rad = np.radians(alpha)\n    \n    term1 = ((x-x0)*np.cos(alpha_rad) + (y-y0)*np.sin(alpha_rad))**2 / a**2\n    term2 = ((x-x0)*np.sin(alpha_rad) - (y-y0)*np.cos(alpha_rad))**2 / b**2\n    \n    total = term1 + term2\n\n    return total<1\n```\n\n### Equations for an ellipse\n\nTo understand the parameters that can be passed to the `inside_ellipse()` function we need to consider the form of an ellipse. The equation govering the edge of an ellipse is similiar to a circle but instead of one radius, $r$, there are now two parameters $a$ and $b$ defined as the semi-major and semi-minor axes (naming can be the other way round depending on which is larger).\n\nFor an ellipse centred at ($x_{0}$, $y_{0}$) and with the semi-major axis parallel to the x-axis the equation of the edge of the ellipse would be:\n\n$$ \\frac{(x-x_0)^2}{a^2} + \\frac{(y-y_0)^2}{b^2} = 1 $$\n\nThis would look something like:\n\n<img src=\"images/Ellipse_illustration_no-angle.png\" alt=\"Ellipse\" style=\"display:block;margin-left:auto;margin-right:auto;width:30%\"/>\n\nHowever, for our example we also need to consider an ellipse at an angle away from the x-axis, alpha ($\\alpha$). The edge for this ellipse can be calculated using the full equation:\n\n$$ \\frac{((x-x_0)\\cos\\alpha + (y-y_0)\\sin\\alpha)^2}{a^2} + \\frac{((x-x_0)\\sin\\alpha - (y-y_0)\\cos\\alpha)^2}{b^2} = 1 $$\n\nThis would look like:\n\n<img src=\"images/Ellipse_illustration_with-angle.png\" alt=\"Ellipse at an angle\" style=\"display:block;margin-left:auto;margin-right:auto;width:30%\"/>\n\nThe parameters needed to use `inside_ellipse` function are: the centre of the ellipse, the semi-major and semi-minor axes and the angle, $\\alpha$. For example:\n\n```{python}\nx1 = 0\ny1 = 0\nposition_is_in_ellipse1 = inside_ellipse(x1, y1, centre=(0, 0), a=2, b=1, alpha=0)\nprint(f\"Is position ({x1}, {y1}) inside the ellipse? {position_is_in_ellipse1}\")\n\nx2 = 0\ny2 = 4\nposition_is_in_ellipse2 = inside_ellipse(x2, y2, centre=(0, 0), a=2, b=1, alpha=0)\nprint(f\"Is position ({x2}, {y2}) inside the ellipse? {position_is_in_ellipse2}\")\n```\n\n---\n\n### Exercise B\n\nFor our example of the galaxy the parameters for a suitable ellipse are as follows:\n\n - centre position $x_0$, $y_0$ at (500, 470)\n - semi-major axis, $a$, of 365\n - semi-minor axis, $b$, of 70\n - angle alpha, $\\alpha$, of 38 degrees\n\n1. Use the `inside_ellipse` function to create an elliptical mask which could be used to mask the galaxy image so only the galaxy is included.\n2. Apply this mask to each of the (R, G, B) channels of the image `im` (recall this is a 3D `np.array` object). Call the masked image `im_masked`.\n\nAs above, you can use the plotting code below which uses the `matplotlib` function `imshow()` to plot the 3D `im_masked` object as a colour image (or to plot a 2D image for one colour channel).\n\n```{python}\n# ADD CODE HERE\n\n\n```\n\n```{python}\n# ADD CODE HERE\n\n\n```\n\n```{python}\n# UNCOMMENT THIS CODE TO PLOT YOUR MASKED IMAGE\n\n#import matplotlib.pyplot as plt\n#\n#fig, ax = plt.subplots(figsize=(8,8))\n#ax.imshow(im_masked.astype(int),origin=\"lower\")\n```\n\nTake time to discuss this but if you are both really stuck, there is a [hint notebook](hint2_apply_mask.qmd) available which shows how you would apply a mask which includes a rectangle to an image.\n\n---\n\n## Calculating the magnitude\n\nNow that we have masked out just the pixels related to the galaxy, one parameter we can derive is to calculate the galaxy brightness for a particular colour. Normally, this would not be done from an RGB image but we can use this to make an approximation.\n\nThe magnitude of an object is given by the equation:\n\n$$ m_{AB} = -2.5\\log_{10}(f_v) + 8.90 $$\n\nwhere:\n - $m_{AB}$ is the magnitude (on the AB scale)\n - $f_v$ is the spectral flux density (in units of Jansky, $Jy$)\n\n---\n\n### Exercise C\n\nWe can calculate an approximation of the spectral flux density, $f_{v}$, by **summing the pixel values** from our image and by applying a scale factor of $2.8\\times10^{-7}$.\n\nFrom your masked image of the galaxy, and using the details above, calculate an approximation of the magnitude of the Blue channel (the third channel) from this image.\n\nHow does this compare to the true value for \"B (AB)\"? - available here: http://simbad.u-strasbg.fr/simbad/sim-id?Ident=NGC+253&jsessionid=262A420D60A8A4D72D3384528AA0980A.main\n\nHint:\n  - Additional `numpy` functions which will be useful:\n    - `sum()` - https://numpy.org/doc/stable/reference/generated/numpy.sum.html\n    - `log10()` - https://numpy.org/doc/stable/reference/generated/numpy.log10.html     \n\n```{python}\n# ADD CODE HERE\n```\n\n---\n\n"},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["/Users/ft14968/Repos/intro-coding-data-analysis/quarto/_extensions/r-wasm/live/live.lua"],"include-in-header":{"text":"<meta name=\"robots\" content=\"noindex, nofollow\">\n"},"css":["../styles.css"],"toc":true,"toc-depth":3,"highlight-style":"github","number-sections":false,"output-file":"exercises_part2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.31","ojs-engine":true,"revealjs-plugins":[],"theme":"cosmo","toc-location":"right","code-copy":true,"grid":{"sidebar-width":"350px"},"title":"Using a mask","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["live-html"]}