{"title":"Hint 2 - applying a rectangular mask","markdown":{"yaml":{"title":"Hint 2 - applying a rectangular mask","jupyter":"python3"},"headingText":"Create a rectanglar mask using a function","containsRefs":false,"markdown":"\n\n\n\n**Example: Applying a mask containing a rectangle to an image**\n\nI have downloaded an online image of a house for this example (from [Vector Stock](https://www.vectorstock.com/royalty-free-vector/view-of-the-house-from-the-inside-vector-19801844)). This image contains four different rooms and I want to use a rectangular mask so that only the office room is displayed. As described previously, we can open this image using a the `Image` sub-module of a module called `pillow` (imported as `PIL`) which understands how to read image files. We can then convert this input into a `numpy` `array` object.\n\n```{python}\nfrom PIL import Image\nimport numpy as np\n\nim_filename = \"images/image-house-vector-stock.jpg\"\nim = np.array(Image.open(im_filename))\n```\n\n`im` is a three dimensional `numpy` `array` object - includes height, width and colour channel (R, G, B).\n\n```{python}\nshape = im.shape\nprint(shape)\n```\n\n```{python}\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8,8))\nax.imshow(im)\n```\n\nThe `imshow` function knows how to interpret this 3D shape to show a colour image.\n\n\nI can define an function called `inside_rectangle()` to tell me whether a given (x, y) position is within a rectangle for a set of parameters. This will return `True` if the position is inside the rectangle and `False` otherwise.\n\nThe rectangle can be evaluated using the conditions:\n\n$$|x - x_0| = w/2$$\nand\n$$|y - y_0| = h/2$$\n\nwhere\n - $x$, $y$ are the x, y positions within the grid\n - $x_0$, $y_0$ are the centre of the rectangle\n - $w$, $h$ - are the full width and height of the rectangle\n - $| |$ means the magnitude of the difference\n\n```{python}\ndef inside_rectangle(x,y,centre=(0,0),width=20,height=10):\n    \n    x0 = centre[0]\n    y0 = centre[1]\n    \n    distance_x = np.abs(x - x0) # Magnitude of distance\n    distance_y = np.abs(y - y0) # Magnitude of distance\n    \n    # Check if (x, y) position is within the rectangle\n    if distance_x < width/2 and distance_y < height/2:\n        return True\n    else:\n        return False\n```\n\nFor this mask, I want to define the parameters as follows:\n\n```{python}\n# Input parameters\ncentre = (382,320)\nwidth = 280\nheight = 218\n```\n\nThe `inside_rectangle` function allows you to pass the parameters for your position and your rectangle and can tell you whether the position is within your rectangle (returns a `True` value) or not (returns a `False` value). For example if we had a position of (50, 50) we could use the function as follows:\n\n```{python}\nx = 50\ny = 50\n\nposition_is_in_rectangle = inside_rectangle(x, y, centre=centre, width=width, height=height)\n\nif position_is_in_rectangle:\n    print(f\"Position ({x}, {y}) is within the rectangle\")\nelse:\n    print(f\"Not within rectangle\")\n```\n\nHere we used the output of `inside_rectangle` as our condition directly (Python sees this `if True` or `if False` and follows the logic accordingly).\n\nWe can use the `inside_rectangle()` function to define our mask - looping over every element and checking the x, y position with the `inside_rectangle()` function with the appropriate parameters:\n\n```{python}\nncol = shape[0]\nnrow = shape[1]\n\n# Create array of zeros based on shape of input image - height x width\nrect_mask = np.zeros(shape[0:2],dtype=int)\n\nfor y in range(ncol): # iterate over first dimension\n    for x in range(nrow): # iterate over second dimension\n        # Check whether x, y position is within defined rectangle\n        position_is_in_rectangle = inside_rectangle(x, y, centre=centre, width=width, height=height)\n        if position_is_in_rectangle:\n            rect_mask[y, x] = 1\n\nprint(f\"Shape of mask: {rect_mask.shape}\")\n```\n\nAs before, we don't need an `else` block here because the array we have defined already contains zeros.\n\n**Extended:** See [alternative numpy method](hint1_mask.qmd#Extended:-Leveraging-numpy-functionality) mask in Hint 1 notebook for a more efficient way to create a square mask. Could you extend this method to reproduce a rectangular mask (without the need for the `inside_rectangle` function)?\n\n## Apply mask to the image\n\nNow we have created `rect_mask`, we need to apply this to my image. We can do this by multiplying `im` by `rect_mask` and this will combine element-wise. This means that each pixel in the image will be multiplied by the corresponding value within the mask. Multipying by 0 will result in the output pixel also being 0 but multiplying by 1 will retain the original value in that pixel.\n\nFor creating the `im_masked` output there a few ways you could do this - the upshot is that you want to create an array of the right *shape*:\n - Create an empty array of the right shape\n - Create a new variable called `im_masked` which is a copy of the `im` using the [`copy()` function (method)](https://numpy.org/doc/stable/reference/generated/numpy.copy.html)\n\nBecause `im` is a three dimensional array (height x weight x colour channel), one way to apply the mask is to do this for each of the three colours (R, G, B channels) separately.\n\n```{python}\n## Create an empty array of the right shape\nim_masked = np.empty(shape)\n## OR make a copy and then apply mask\n#im_masked = im.copy()\n\n# Update the values within this array for each colour channel\nim_masked[:,:,0] = im[:,:,0]*rect_mask # shapes match (780, 1000) x (780, 1000)\nim_masked[:,:,1] = im[:,:,1]*rect_mask # shapes match (780, 1000) x (780, 1000)\nim_masked[:,:,2] = im[:,:,2]*rect_mask # shapes match (780, 1000) x (780, 1000)\n\n# # Another way to write this would be to add an extra dimension to our mask\n# # - This can be done using the np.newaxis constant to add an extra dimension\n# # - Numpy can then *broadcast* along this new dimension to combine correctly\n# im_masked = im*rect_mask[:,:,np.newaxis] # shapes (780, 1000, 3) x (780, 1000, 1)\n\nfig, ax = plt.subplots(figsize=(8,8))\nax.imshow(im_masked.astype(int)) \n```\n\n","srcMarkdownNoYaml":"\n\n\n\n**Example: Applying a mask containing a rectangle to an image**\n\nI have downloaded an online image of a house for this example (from [Vector Stock](https://www.vectorstock.com/royalty-free-vector/view-of-the-house-from-the-inside-vector-19801844)). This image contains four different rooms and I want to use a rectangular mask so that only the office room is displayed. As described previously, we can open this image using a the `Image` sub-module of a module called `pillow` (imported as `PIL`) which understands how to read image files. We can then convert this input into a `numpy` `array` object.\n\n```{python}\nfrom PIL import Image\nimport numpy as np\n\nim_filename = \"images/image-house-vector-stock.jpg\"\nim = np.array(Image.open(im_filename))\n```\n\n`im` is a three dimensional `numpy` `array` object - includes height, width and colour channel (R, G, B).\n\n```{python}\nshape = im.shape\nprint(shape)\n```\n\n```{python}\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8,8))\nax.imshow(im)\n```\n\nThe `imshow` function knows how to interpret this 3D shape to show a colour image.\n\n## Create a rectanglar mask using a function\n\nI can define an function called `inside_rectangle()` to tell me whether a given (x, y) position is within a rectangle for a set of parameters. This will return `True` if the position is inside the rectangle and `False` otherwise.\n\nThe rectangle can be evaluated using the conditions:\n\n$$|x - x_0| = w/2$$\nand\n$$|y - y_0| = h/2$$\n\nwhere\n - $x$, $y$ are the x, y positions within the grid\n - $x_0$, $y_0$ are the centre of the rectangle\n - $w$, $h$ - are the full width and height of the rectangle\n - $| |$ means the magnitude of the difference\n\n```{python}\ndef inside_rectangle(x,y,centre=(0,0),width=20,height=10):\n    \n    x0 = centre[0]\n    y0 = centre[1]\n    \n    distance_x = np.abs(x - x0) # Magnitude of distance\n    distance_y = np.abs(y - y0) # Magnitude of distance\n    \n    # Check if (x, y) position is within the rectangle\n    if distance_x < width/2 and distance_y < height/2:\n        return True\n    else:\n        return False\n```\n\nFor this mask, I want to define the parameters as follows:\n\n```{python}\n# Input parameters\ncentre = (382,320)\nwidth = 280\nheight = 218\n```\n\nThe `inside_rectangle` function allows you to pass the parameters for your position and your rectangle and can tell you whether the position is within your rectangle (returns a `True` value) or not (returns a `False` value). For example if we had a position of (50, 50) we could use the function as follows:\n\n```{python}\nx = 50\ny = 50\n\nposition_is_in_rectangle = inside_rectangle(x, y, centre=centre, width=width, height=height)\n\nif position_is_in_rectangle:\n    print(f\"Position ({x}, {y}) is within the rectangle\")\nelse:\n    print(f\"Not within rectangle\")\n```\n\nHere we used the output of `inside_rectangle` as our condition directly (Python sees this `if True` or `if False` and follows the logic accordingly).\n\nWe can use the `inside_rectangle()` function to define our mask - looping over every element and checking the x, y position with the `inside_rectangle()` function with the appropriate parameters:\n\n```{python}\nncol = shape[0]\nnrow = shape[1]\n\n# Create array of zeros based on shape of input image - height x width\nrect_mask = np.zeros(shape[0:2],dtype=int)\n\nfor y in range(ncol): # iterate over first dimension\n    for x in range(nrow): # iterate over second dimension\n        # Check whether x, y position is within defined rectangle\n        position_is_in_rectangle = inside_rectangle(x, y, centre=centre, width=width, height=height)\n        if position_is_in_rectangle:\n            rect_mask[y, x] = 1\n\nprint(f\"Shape of mask: {rect_mask.shape}\")\n```\n\nAs before, we don't need an `else` block here because the array we have defined already contains zeros.\n\n**Extended:** See [alternative numpy method](hint1_mask.qmd#Extended:-Leveraging-numpy-functionality) mask in Hint 1 notebook for a more efficient way to create a square mask. Could you extend this method to reproduce a rectangular mask (without the need for the `inside_rectangle` function)?\n\n## Apply mask to the image\n\nNow we have created `rect_mask`, we need to apply this to my image. We can do this by multiplying `im` by `rect_mask` and this will combine element-wise. This means that each pixel in the image will be multiplied by the corresponding value within the mask. Multipying by 0 will result in the output pixel also being 0 but multiplying by 1 will retain the original value in that pixel.\n\nFor creating the `im_masked` output there a few ways you could do this - the upshot is that you want to create an array of the right *shape*:\n - Create an empty array of the right shape\n - Create a new variable called `im_masked` which is a copy of the `im` using the [`copy()` function (method)](https://numpy.org/doc/stable/reference/generated/numpy.copy.html)\n\nBecause `im` is a three dimensional array (height x weight x colour channel), one way to apply the mask is to do this for each of the three colours (R, G, B channels) separately.\n\n```{python}\n## Create an empty array of the right shape\nim_masked = np.empty(shape)\n## OR make a copy and then apply mask\n#im_masked = im.copy()\n\n# Update the values within this array for each colour channel\nim_masked[:,:,0] = im[:,:,0]*rect_mask # shapes match (780, 1000) x (780, 1000)\nim_masked[:,:,1] = im[:,:,1]*rect_mask # shapes match (780, 1000) x (780, 1000)\nim_masked[:,:,2] = im[:,:,2]*rect_mask # shapes match (780, 1000) x (780, 1000)\n\n# # Another way to write this would be to add an extra dimension to our mask\n# # - This can be done using the np.newaxis constant to add an extra dimension\n# # - Numpy can then *broadcast* along this new dimension to combine correctly\n# im_masked = im*rect_mask[:,:,np.newaxis] # shapes (780, 1000, 3) x (780, 1000, 1)\n\nfig, ax = plt.subplots(figsize=(8,8))\nax.imshow(im_masked.astype(int)) \n```\n\n"},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["/Users/ft14968/Repos/intro-coding-data-analysis/quarto/_extensions/r-wasm/live/live.lua"],"include-in-header":{"text":"<meta name=\"robots\" content=\"noindex, nofollow\">\n"},"css":["../styles.css"],"toc":true,"toc-depth":3,"highlight-style":"github","number-sections":false,"output-file":"hint2_apply_mask.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.31","ojs-engine":true,"revealjs-plugins":[],"theme":"cosmo","toc-location":"right","code-copy":true,"grid":{"sidebar-width":"350px"},"title":"Hint 2 - applying a rectangular mask","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["live-html"]}