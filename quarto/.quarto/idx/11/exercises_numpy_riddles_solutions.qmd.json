{"title":"Consolidation - `numpy` riddles","markdown":{"yaml":{"title":"Consolidation - `numpy` riddles","jupyter":"python3"},"headingText":"YOUR CODE HERE","containsRefs":false,"markdown":"\n\n\n\nSolve the following `numpy` riddles using `numpy` and its documentation. \n\n\nIf possible, work in the **pair programming** paradigm: work in pairs, with one person taking the role of the **driver** (writing the code) and one taking the role of the **navigator** (reading and understanding the documentation). Alternate the roles. Try to find solutions that are **short** (i.e. few line sof code) but **easy to understand**.\n\n```{python}\nimport numpy as np\n```\n\n\n**Diagonal Sum**:\n   - Riddle: Write a function that takes a square 2D NumPy array as input and returns the sum of the elements along the main diagonal.\n   - Example: `diagonal_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> 15`\n\n```{python}\n\ndef diagonal_sum(seq):\n    arr = np.asarray(seq)\n    return np.diagonal(arr).sum()\n\ndiagonal_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n```\n\n\n**Unique Elements Count**:\n   - Riddle: Write a function that takes a 1D NumPy array as input and returns the count of unique elements in the array.\n   - Example: `unique_count([1, 2, 3, 2, 4, 1, 5]) -> 5`\n\n```{python}\n## YOUR CODE HERE\ndef unique_count(sequence):\n    return np.unique(sequence).size\n\nunique_count([1, 2, 3, 2, 4, 1, 5]) \n```\n\n\n**Random sample ands cumulative sum**:\n   - Riddle: A fair coin is tossed 20 times, and we win 1£ for every head and lose 1£ for every tail. Assuming that we start with no money at the beginning, and that the seed of teh default random number generator is `seed=1234`, how much money do we have at every succesive step?\n\n```{python}\n## YOUR CODE HERE\n\nn_trials = 20\nrng = np.random.default_rng(1234)\nprint(\"The amount we have after every coin tossing is\", rng.choice([-1,1],n_trials).cumsum())\n```\n\n\n**Rolling Window**:\n   - Riddle: Write a function that takes a 1D NumPy array and a window size as input, and returns a 2D array where each row is a sliding window of the input array of a given size.\n   - For example, a 1d array with a rolling window of size 3: `rolling_window([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]`\n\n\nHint: you can use **list comprehension** and convert the final list to an array.\n\n```{python}\n## YOUR CODE HERE\n\ndef rolling_window(seq,window):\n    arr = np.asarray(seq)\n    num_rows  = len(seq)- window + 1\n    return np.array([arr[i:i+window] for i in range(num_rows)])\n    \n\nrolling_window([1, 2, 3, 4, 5], 3)\n```\n\n**Product of elements**:\n    - Riddle: The geometric mean of a number of observations $x_1, x_2,\\dots, x_n$ is defined as  $M = \\sqrt{x_1\\times x_2\\times \\dots x_n }$. Define a custom function to calculate the geometric mean.\n    - Example: `geometric_mean([1, 2, 3, 4, 5]) -> 10.954451150103322`\n\n```{python}\n## YOUR CODE HERE\n\n\ndef geometric_mean(seq):\n    return np.sqrt(np.prod(seq))\n\n\ngeometric_mean([1, 2, 3, 4, 5])\n```\n\n**Vectorised calculations and visualisation**:\n   - Riddle: Draw 100 thousand points uniformly distributed inside a circle of radius 1 centered at (0,0). Plot them using `scatplotter()` from `matplotlib`acoording to their radial coordinate:\n        - use the hexadecimal colour `\"#76d6ff\"` for points at a distance below 0.5 from the origin$.\n        - use the hexadecimal colour `\"ffe701\"` for points furtehr away.\n   \n\nHint1: disk point picking is not  trivial: https://mathworld.wolfram.com/DiskPointPicking.html\n\nHint2: For matplotlib's `plot`, use the pixel style `','`, and remmber to set the axis to be in the same units (`\"equal\"`)\n\n\n```{python}\n## YOUR CODE HERE\nnpoints = 100_000\ntheta = np.random.uniform(0, 2*np.pi, npoints)\nr = np.sqrt(np.random.uniform(0, 1, npoints))\nx = r * np.cos(theta)\ny = r * np.sin(theta)\n\ninside = r<0.5\n\nimport matplotlib.pyplot as plt\n\nplt.plot(x[inside],y[inside],',',color=\"#76d6ff\")\nplt.plot(x[~inside],y[~inside],',',color=\"#ffe701\")\nplt.axis(\"equal\")\n```\n\n\n","srcMarkdownNoYaml":"\n\n\n\nSolve the following `numpy` riddles using `numpy` and its documentation. \n\n\nIf possible, work in the **pair programming** paradigm: work in pairs, with one person taking the role of the **driver** (writing the code) and one taking the role of the **navigator** (reading and understanding the documentation). Alternate the roles. Try to find solutions that are **short** (i.e. few line sof code) but **easy to understand**.\n\n```{python}\nimport numpy as np\n```\n\n\n**Diagonal Sum**:\n   - Riddle: Write a function that takes a square 2D NumPy array as input and returns the sum of the elements along the main diagonal.\n   - Example: `diagonal_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> 15`\n\n```{python}\n## YOUR CODE HERE\n\ndef diagonal_sum(seq):\n    arr = np.asarray(seq)\n    return np.diagonal(arr).sum()\n\ndiagonal_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n```\n\n\n**Unique Elements Count**:\n   - Riddle: Write a function that takes a 1D NumPy array as input and returns the count of unique elements in the array.\n   - Example: `unique_count([1, 2, 3, 2, 4, 1, 5]) -> 5`\n\n```{python}\n## YOUR CODE HERE\ndef unique_count(sequence):\n    return np.unique(sequence).size\n\nunique_count([1, 2, 3, 2, 4, 1, 5]) \n```\n\n\n**Random sample ands cumulative sum**:\n   - Riddle: A fair coin is tossed 20 times, and we win 1£ for every head and lose 1£ for every tail. Assuming that we start with no money at the beginning, and that the seed of teh default random number generator is `seed=1234`, how much money do we have at every succesive step?\n\n```{python}\n## YOUR CODE HERE\n\nn_trials = 20\nrng = np.random.default_rng(1234)\nprint(\"The amount we have after every coin tossing is\", rng.choice([-1,1],n_trials).cumsum())\n```\n\n\n**Rolling Window**:\n   - Riddle: Write a function that takes a 1D NumPy array and a window size as input, and returns a 2D array where each row is a sliding window of the input array of a given size.\n   - For example, a 1d array with a rolling window of size 3: `rolling_window([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]`\n\n\nHint: you can use **list comprehension** and convert the final list to an array.\n\n```{python}\n## YOUR CODE HERE\n\ndef rolling_window(seq,window):\n    arr = np.asarray(seq)\n    num_rows  = len(seq)- window + 1\n    return np.array([arr[i:i+window] for i in range(num_rows)])\n    \n\nrolling_window([1, 2, 3, 4, 5], 3)\n```\n\n**Product of elements**:\n    - Riddle: The geometric mean of a number of observations $x_1, x_2,\\dots, x_n$ is defined as  $M = \\sqrt{x_1\\times x_2\\times \\dots x_n }$. Define a custom function to calculate the geometric mean.\n    - Example: `geometric_mean([1, 2, 3, 4, 5]) -> 10.954451150103322`\n\n```{python}\n## YOUR CODE HERE\n\n\ndef geometric_mean(seq):\n    return np.sqrt(np.prod(seq))\n\n\ngeometric_mean([1, 2, 3, 4, 5])\n```\n\n**Vectorised calculations and visualisation**:\n   - Riddle: Draw 100 thousand points uniformly distributed inside a circle of radius 1 centered at (0,0). Plot them using `scatplotter()` from `matplotlib`acoording to their radial coordinate:\n        - use the hexadecimal colour `\"#76d6ff\"` for points at a distance below 0.5 from the origin$.\n        - use the hexadecimal colour `\"ffe701\"` for points furtehr away.\n   \n\nHint1: disk point picking is not  trivial: https://mathworld.wolfram.com/DiskPointPicking.html\n\nHint2: For matplotlib's `plot`, use the pixel style `','`, and remmber to set the axis to be in the same units (`\"equal\"`)\n\n\n```{python}\n## YOUR CODE HERE\nnpoints = 100_000\ntheta = np.random.uniform(0, 2*np.pi, npoints)\nr = np.sqrt(np.random.uniform(0, 1, npoints))\nx = r * np.cos(theta)\ny = r * np.sin(theta)\n\ninside = r<0.5\n\nimport matplotlib.pyplot as plt\n\nplt.plot(x[inside],y[inside],',',color=\"#76d6ff\")\nplt.plot(x[~inside],y[~inside],',',color=\"#ffe701\")\nplt.axis(\"equal\")\n```\n\n\n"},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["/Users/ft14968/Repos/intro-coding-data-analysis/quarto/_extensions/r-wasm/live/live.lua"],"include-in-header":{"text":"<meta name=\"robots\" content=\"noindex, nofollow\">\n"},"css":["../styles.css"],"toc":true,"toc-depth":3,"highlight-style":"github","number-sections":false,"output-file":"exercises_numpy_riddles_solutions.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.31","ojs-engine":true,"revealjs-plugins":[],"theme":"cosmo","toc-location":"right","code-copy":true,"grid":{"sidebar-width":"350px"},"title":"Consolidation - `numpy` riddles","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["live-html"]}