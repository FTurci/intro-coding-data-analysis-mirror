{
  "hash": "9c14d1001cd559fdb74e1f0ff21929df",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: '`numpy` Exercises'\njupyter: python3\n---\n\n\nThese exercises test your understanding of the NumPy concepts covered in the introduction notebook.\n\n\n## Exercise 1: Import and Basic Array Creation\n\n**Task:** Import NumPy with the standard `import` command and create a NumPy array from the list `[2, 4, 6, 8, 10, 12]`. Print the array, its data type, and its shape.\n\n::: {#89f7a46c .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\narr = np.array([2, 4, 6, 8, 10, 12])\nprint(\"Array:\", arr)\nprint(\"Data type:\", arr.dtype)\nprint(\"Shape:\", arr.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nArray: [ 2  4  6  8 10 12]\nData type: int64\nShape: (6,)\n```\n:::\n:::\n\n\n## Exercise 2: Array Indexing and Slicing\n\n**Task:** Using the array you created in Exercise 1:\n\n- Print the first element\n- Print the last element\n- Print elements from index 2 to 4 (inclusive of 2, exclusive of 5)\n- Print every second element\n\n::: {#a20af750 .cell execution_count=2}\n``` {.python .cell-code}\nprint(\"First element:\", arr[0])\nprint(\"Last element:\", arr[-1])\nprint(\"Elements from index 2 to 4:\", arr[2:5])\nprint(\"Every second element:\", arr[::2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFirst element: 2\nLast element: 12\nElements from index 2 to 4: [ 6  8 10]\nEvery second element: [ 2  6 10]\n```\n:::\n:::\n\n\n## Exercise 3: Element-wise Operations\n\n**Task:** Create a NumPy array `arr = np.array([1, 4, 9, 16, 25])`. Perform the following operations and print the results:\n\n- Multiply each element by 3\n- Add 10 to each element\n- Calculate the square root of each element\n- Apply the sine function to each element\n\n::: {#98048499 .cell execution_count=3}\n``` {.python .cell-code}\narr = np.array([1, 4, 9, 16, 25])\nprint(\"Original array:\", arr)\nprint(\"Multiply by 3:\", arr * 3)\nprint(\"Add 10:\", arr + 10)\nprint(\"Square root:\", np.sqrt(arr))\nprint(\"Sine function:\", np.sin(arr))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOriginal array: [ 1  4  9 16 25]\nMultiply by 3: [ 3 12 27 48 75]\nAdd 10: [11 14 19 26 35]\nSquare root: [1. 2. 3. 4. 5.]\nSine function: [ 0.84147098 -0.7568025   0.41211849 -0.28790332 -0.13235175]\n```\n:::\n:::\n\n\n## Exercise 4: Array Operations with Two Arrays\n\n**Task:** Create two NumPy arrays:\n\n- `arr1 = np.array([1, 2, 3, 4, 5])`\n- `arr2 = np.array([10, 20, 30, 40, 50])`\n\nPerform element-wise operations and print the results:\n\n- Add the two arrays\n- Subtract arr1 from arr2\n- Multiply the two arrays\n- Divide arr2 by arr1\n\n::: {#93bef333 .cell execution_count=4}\n``` {.python .cell-code}\narr1 = np.array([1, 2, 3, 4, 5])\narr2 = np.array([10, 20, 30, 40, 50])\n\nprint(\"arr1:\", arr1)\nprint(\"arr2:\", arr2)\nprint(\"Addition:\", arr1 + arr2)\nprint(\"Subtraction (arr2 - arr1):\", arr2 - arr1)\nprint(\"Multiplication:\", arr1 * arr2)\nprint(\"Division (arr2 / arr1):\", arr2 / arr1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narr1: [1 2 3 4 5]\narr2: [10 20 30 40 50]\nAddition: [11 22 33 44 55]\nSubtraction (arr2 - arr1): [ 9 18 27 36 45]\nMultiplication: [ 10  40  90 160 250]\nDivision (arr2 / arr1): [10. 10. 10. 10. 10.]\n```\n:::\n:::\n\n\n## Exercise 5: Shape Mismatch Error\n\n**Task:** Create two arrays with different lengths:\n\n- `arr_a = np.array([1, 2, 3, 4])`\n- `arr_b = np.array([10, 20])`\n\nTry to add these arrays together. What happens? Write the code and explain the error in a comment.\n\n::: {#c57d8599 .cell execution_count=5}\n``` {.python .cell-code}\narr_a = np.array([1, 2, 3, 4])\narr_b = np.array([10, 20])\n\nprint(\"arr_a:\", arr_a)\nprint(\"arr_b:\", arr_b)\n\ntry:\n    result = arr_a + arr_b\n    print(\"Result:\", result)\nexcept ValueError as e:\n    print(\"Error occurred:\", e)\n    \n# This happens because the arrays have different shapes: (4,) and (2,)\n# NumPy cannot broadcast these shapes together for element-wise operations\n# The arrays must have compatible shapes for element-wise operations\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narr_a: [1 2 3 4]\narr_b: [10 20]\nError occurred: operands could not be broadcast together with shapes (4,) (2,) \n```\n:::\n:::\n\n\n## Exercise 6: Reductive Operations\n\n**Task:** Create a NumPy array `data = np.array([12, 8, 15, 3, 7, 20, 11, 9])`. Calculate and print:\n\n- The sum of all elements\n- The mean (average) of all elements\n- The maximum value\n- The minimum value\n- The standard deviation\n\n::: {#470ed83b .cell execution_count=6}\n``` {.python .cell-code}\ndata = np.array([12, 8, 15, 3, 7, 20, 11, 9])\n\nprint(\"Data:\", data)\nprint(\"Sum:\", np.sum(data))\nprint(\"Mean:\", np.mean(data))\nprint(\"Maximum:\", np.max(data))\nprint(\"Minimum:\", np.min(data))\nprint(\"Standard deviation:\", np.std(data))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData: [12  8 15  3  7 20 11  9]\nSum: 85\nMean: 10.625\nMaximum: 20\nMinimum: 3\nStandard deviation: 4.871793817476269\n```\n:::\n:::\n\n\n## Exercise 7: Array Manipulation\n\n**Task:** Create a NumPy array `numbers = np.array([5, 2, 8, 1, 9, 3])`. Perform the following operations:\n\n- Sort the array and print the result\n- Calculate the cumulative sum and print the result\n- Create a new array with duplicates: `with_duplicates = np.array([5, 2, 8, 1, 9, 3, 5, 2, 1])` and find the unique elements\n\n::: {#f76fa323 .cell execution_count=7}\n``` {.python .cell-code}\nnumbers = np.array([5, 2, 8, 1, 9, 3])\nprint(\"Original numbers:\", numbers)\nprint(\"Sorted array:\", np.sort(numbers))\nprint(\"Cumulative sum:\", np.cumsum(numbers))\n\nwith_duplicates = np.array([5, 2, 8, 1, 9, 3, 5, 2, 1])\nprint(\"Array with duplicates:\", with_duplicates)\nprint(\"Unique elements:\", np.unique(with_duplicates))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOriginal numbers: [5 2 8 1 9 3]\nSorted array: [1 2 3 5 8 9]\nCumulative sum: [ 5  7 15 16 25 28]\nArray with duplicates: [5 2 8 1 9 3 5 2 1]\nUnique elements: [1 2 3 5 8 9]\n```\n:::\n:::\n\n\n## Exercise 8: List vs NumPy Comparison\n\n**Task:** Compare the flexibility of lists vs NumPy arrays:\n\n1. Create a Python list containing mixed data types: `mixed_list = [1, 'hello', 3.14, True]`\n2. Try to create a NumPy array from this list. What happens to the data types?\n3. Create a list of numbers: `num_list = [1, 2, 3, 4, 5]`\n4. Try to multiply the entire list by 2 using `num_list * 2`. What happens?\n5. Create a NumPy array from the same numbers and multiply by 2. Compare the results.\n\n::: {#cceb5f68 .cell execution_count=8}\n``` {.python .cell-code}\n# Mixed data types\nmixed_list = [1, 'hello', 3.14, True]\nprint(\"Mixed list:\", mixed_list)\n\nmixed_array = np.array(mixed_list)\nprint(\"NumPy array from mixed list:\", mixed_array)\nprint(\"Array dtype:\", mixed_array.dtype)\nprint(\"# NumPy converted everything to strings (the most general type)\")\n\n# List multiplication vs NumPy\nnum_list = [1, 2, 3, 4, 5]\nprint(\"\\nNumeric list:\", num_list)\nprint(\"List * 2:\", num_list * 2)\nprint(\"# List multiplication repeats the entire list\")\n\nnum_array = np.array([1, 2, 3, 4, 5])\nprint(\"NumPy array:\", num_array)\nprint(\"Array * 2:\", num_array * 2)\nprint(\"# NumPy multiplication is element-wise\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMixed list: [1, 'hello', 3.14, True]\nNumPy array from mixed list: ['1' 'hello' '3.14' 'True']\nArray dtype: <U32\n# NumPy converted everything to strings (the most general type)\n\nNumeric list: [1, 2, 3, 4, 5]\nList * 2: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n# List multiplication repeats the entire list\nNumPy array: [1 2 3 4 5]\nArray * 2: [ 2  4  6  8 10]\n# NumPy multiplication is element-wise\n```\n:::\n:::\n\n\n## Exercise 9: Performance Comparison\n\n**Task:** Compare the performance of list comprehension vs NumPy operations:\n\n1. Import the `time` module\n2. Create a range of 50,000 numbers using numpy `np.arange()`\n3. Time how long it takes to square each number using a **list comprehension**, i.e. the syntax `[x**2 for x in myarray]`\n4. Time how long it takes to square each number using NumPy operations\n5. Calculate and print how many times faster the NumPy operation is\n\n::: {#308ffb7a .cell execution_count=9}\n``` {.python .cell-code}\nimport time\n\nnum_range = 50000\ntest_array = np.arange(num_range)\n\n# List comprehension timing\ntime1 = time.time()\nlist_squared = [x**2 for x in test_array]\ntime2 = time.time()\nlist_time = time2 - time1\n\n# NumPy operation timing\ntime1 = time.time()\narr_squared = test_array**2\ntime2 = time.time()\narr_time = time2 - time1\n\nprint(f\"List comprehension time: {list_time:.6f} seconds\")\nprint(f\"NumPy operation time: {arr_time:.6f} seconds\")\n\nif arr_time > 0:\n    print(f\"NumPy is {list_time/arr_time:.1f} times faster\")\nelse:\n    print(\"NumPy operation was too fast to measure accurately\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList comprehension time: 0.002060 seconds\nNumPy operation time: 0.000089 seconds\nNumPy is 23.2 times faster\n```\n:::\n:::\n\n\n## Exercise 10: Complex Operations\n\n**Task:** Create a NumPy array representing angles in degrees: `angles_deg = np.array([0, 30, 45, 60, 90, 120, 180])`\n\n1. Convert these angles to radians (hint: multiply by π/180, use `np.pi`)\n2. Calculate the sine and cosine of each angle\n3. Verify that sin²(x) + cos²(x) = 1 for each angle (use `np.sin()` and `np.cos()`)\n4. Print all results\n\n::: {#c7885577 .cell execution_count=10}\n``` {.python .cell-code}\nangles_deg = np.array([0, 30, 45, 60, 90, 120, 180])\nprint(\"Angles in degrees:\", angles_deg)\n\n# Convert to radians\nangles_rad = angles_deg * np.pi / 180\nprint(\"Angles in radians:\", angles_rad)\n\n# Calculate sine and cosine\nsin_values = np.sin(angles_rad)\ncos_values = np.cos(angles_rad)\nprint(\"Sine values:\", sin_values)\nprint(\"Cosine values:\", cos_values)\n\n# Verify sin²(x) + cos²(x) = 1\nverification = sin_values**2 + cos_values**2\nprint(\"sin²(x) + cos²(x):\", verification)\nprint(\"All close to 1?\", np.allclose(verification, 1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAngles in degrees: [  0  30  45  60  90 120 180]\nAngles in radians: [0.         0.52359878 0.78539816 1.04719755 1.57079633 2.0943951\n 3.14159265]\nSine values: [0.00000000e+00 5.00000000e-01 7.07106781e-01 8.66025404e-01\n 1.00000000e+00 8.66025404e-01 1.22464680e-16]\nCosine values: [ 1.00000000e+00  8.66025404e-01  7.07106781e-01  5.00000000e-01\n  6.12323400e-17 -5.00000000e-01 -1.00000000e+00]\nsin²(x) + cos²(x): [1. 1. 1. 1. 1. 1. 1.]\nAll close to 1? True\n```\n:::\n:::\n\n\n::: {#513da4be .cell execution_count=11}\n``` {.python .cell-code}\n# Additional verification - showing the identity holds for each angle\nfor i, angle in enumerate(angles_deg):\n    identity_value = sin_values[i]**2 + cos_values[i]**2\n    print(f\"{angle}°: sin²({angle}) + cos²({angle}) = {identity_value:.10f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0°: sin²(0) + cos²(0) = 1.0000000000\n30°: sin²(30) + cos²(30) = 1.0000000000\n45°: sin²(45) + cos²(45) = 1.0000000000\n60°: sin²(60) + cos²(60) = 1.0000000000\n90°: sin²(90) + cos²(90) = 1.0000000000\n120°: sin²(120) + cos²(120) = 1.0000000000\n180°: sin²(180) + cos²(180) = 1.0000000000\n```\n:::\n:::\n\n\n## Challenge Exercise: Temperature Conversion\n\n**Task:** You have temperature readings in Celsius: `celsius_temps = np.array([0, 10, 20, 25, 30, 35, 40])`\n\n1. Convert all temperatures to Fahrenheit using the formula: F = (C × 9/5) + 32\n2. Convert all temperatures to Kelvin using the formula: K = C + 273.15\n3. Calculate the temperature range (max - min) for each scale\n\n::: {#69e0abeb .cell execution_count=12}\n``` {.python .cell-code}\ncelsius_temps = np.array([0, 10, 20, 25, 30, 35, 40])\nprint(\"Celsius temperatures:\", celsius_temps)\n\n# Convert to Fahrenheit\nfahrenheit_temps = (celsius_temps * 9/5) + 32\nprint(\"Fahrenheit temperatures:\", fahrenheit_temps)\n\n# Convert to Kelvin\nkelvin_temps = celsius_temps + 273.15\nprint(\"Kelvin temperatures:\", kelvin_temps)\n\n# Calculate temperature ranges\ncelsius_range = np.max(celsius_temps) - np.min(celsius_temps)\nfahrenheit_range = np.max(fahrenheit_temps) - np.min(fahrenheit_temps)\nkelvin_range = np.max(kelvin_temps) - np.min(kelvin_temps)\n\nprint(f\"\\nTemperature ranges:\")\nprint(f\"Celsius: {celsius_range}°C\")\nprint(f\"Fahrenheit: {fahrenheit_range}°F\") \nprint(f\"Kelvin: {kelvin_range}K\")\n\n# Note: The range in Celsius and Kelvin is the same because it's just a shift\n# The range in Fahrenheit is larger due to the scaling factor (9/5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCelsius temperatures: [ 0 10 20 25 30 35 40]\nFahrenheit temperatures: [ 32.  50.  68.  77.  86.  95. 104.]\nKelvin temperatures: [273.15 283.15 293.15 298.15 303.15 308.15 313.15]\n\nTemperature ranges:\nCelsius: 40°C\nFahrenheit: 72.0°F\nKelvin: 40.0K\n```\n:::\n:::\n\n\n    ## Challenge 2: Kinetic energy\n\n    **Task** Given arrays of mass (kg) and velocity (m/s) for several objects:\n    ```python\n    # copy and paste this code below\n    masses = np.array([2.0, 1.5, 3.0, 0.5])      # in kilograms\n    velocities = np.array([10.0, 20.0, 15.0, 5.0]) # in meters per second\n    ```\n\n    1. Calculate the kinetic energy $K$ for each object using the formula: \n\n    $$K =  \\dfrac{1}{2}m v^2$$\n\n    2. Calculate the total kinetic energy of the system (sum of all objects)\n\n::: {#f89aba86 .cell execution_count=13}\n``` {.python .cell-code}\nimport numpy as np\n\nmasses = np.array([2.0, 1.5, 3.0, 0.5])       # kg\nvelocities = np.array([10.0, 20.0, 15.0, 5.0]) # m/s\n\n# 1. Kinetic energy for each object\nkinetic_energy = 0.5 * masses * velocities**2\nprint(\"Kinetic energy of each object:\", kinetic_energy)\n\n# 2. Total kinetic energy of the system\ntotal_ke = np.sum(kinetic_energy)\nprint(\"Total kinetic energy:\", total_ke)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nKinetic energy of each object: [100.   300.   337.5    6.25]\nTotal kinetic energy: 743.75\n```\n:::\n:::\n\n\n## Challenge 3: Temperature Analysis\n\n**Task:**\nGiven a NumPy array of daily temperatures for 30 days:\n\n```python\ntemperatures = np.array([23.5, 24.0, 21.2, 25.6, 22.8, 23.9, 26.1, 27.3, 21.7, 22.5,\n                         24.6, 25.8, 20.9, 22.3, 24.7, 26.0, 27.5, 21.0, 22.9, 24.8,\n                         25.9, 27.6, 20.8, 22.7, 24.5, 26.2, 27.7, 20.5, 22.6, 24.9])\n```\n\nPerform the following tasks:\n\n1. Find the top 3 hottest days and their temperatures.\n2. Calculate the day-to-day percentage change in temperature.\n\n::: {#78e3bfba .cell execution_count=14}\n``` {.python .cell-code}\nimport numpy as np\n\ntemperatures = np.array([23.5, 24.0, 21.2, 25.6, 22.8, 23.9, 26.1, 27.3, 21.7, 22.5,\n                         24.6, 25.8, 20.9, 22.3, 24.7, 26.0, 27.5, 21.0, 22.9, 24.8,\n                         25.9, 27.6, 20.8, 22.7, 24.5, 26.2, 27.7, 20.5, 22.6, 24.9])\n\n# 1. Top 3 hottest days\ntop3_indices = np.argsort(temperatures)[-3:][::-1]\ntop3_temps = temperatures[top3_indices]\nprint(\"Top 3 hottest days (indices and temperatures):\", list(zip(top3_indices, top3_temps)))\n\n# 2. Day-to-day percentage change\npct_change = (temperatures[1:] - temperatures[:-1]) / temperatures[:-1] * 100\nprint(\"Day-to-day percentage change:\", pct_change)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTop 3 hottest days (indices and temperatures): [(26, 27.7), (21, 27.6), (16, 27.5)]\nDay-to-day percentage change: [  2.12765957 -11.66666667  20.75471698 -10.9375       4.8245614\n   9.20502092   4.59770115 -20.51282051   3.68663594   9.33333333\n   4.87804878 -18.99224806   6.69856459  10.76233184   5.26315789\n   5.76923077 -23.63636364   9.04761905   8.29694323   4.43548387\n   6.56370656 -24.63768116   9.13461538   7.92951542   6.93877551\n   5.72519084 -25.99277978  10.24390244  10.17699115]\n```\n:::\n:::\n\n\n",
    "supporting": [
      "exercises_numpy_solutions_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}