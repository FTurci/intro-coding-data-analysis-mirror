{
  "hash": "210e147d4e8f89d170317bac60332e8e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: '`numpy` Exercises'\njupyter: python3\n---\n\n\nThese exercises test your understanding of the NumPy concepts covered in the introduction notebook.\n\n\n## Exercise 1: Import and Basic Array Creation\n\n**Task:** Import NumPy with the standard `import` command and create a NumPy array from the list `[2, 4, 6, 8, 10, 12]`. Print the array, its data type, and its shape.\n\n::: {#bf339ab6 .cell execution_count=1}\n``` {.python .cell-code}\n# Your code here\n```\n:::\n\n\n## Exercise 2: Array Indexing and Slicing\n\n**Task:** Using the array you created in Exercise 1:\n\n- Print the first element\n- Print the last element\n- Print elements from index 2 to 4 (inclusive of 2, exclusive of 5)\n- Print every second element\n\n::: {#63d99db1 .cell execution_count=2}\n``` {.python .cell-code}\n# Your code here\n```\n:::\n\n\n## Exercise 3: Element-wise Operations\n\n**Task:** Create a NumPy array `arr = np.array([1, 4, 9, 16, 25])`. Perform the following operations and print the results:\n\n- Multiply each element by 3\n- Add 10 to each element\n- Calculate the square root of each element\n- Apply the sine function to each element\n\n::: {#7932f7f2 .cell execution_count=3}\n``` {.python .cell-code}\n# Your code here\n```\n:::\n\n\n## Exercise 4: Array Operations with Two Arrays\n\n**Task:** Create two NumPy arrays:\n\n- `arr1 = np.array([1, 2, 3, 4, 5])`\n- `arr2 = np.array([10, 20, 30, 40, 50])`\n\nPerform element-wise operations and print the results:\n\n- Add the two arrays\n- Subtract arr1 from arr2\n- Multiply the two arrays\n- Divide arr2 by arr1\n\n::: {#b9914c3a .cell execution_count=4}\n``` {.python .cell-code}\n# Your code here\n```\n:::\n\n\n## Exercise 5: Shape Mismatch Error\n\n**Task:** Create two arrays with different lengths:\n\n- `arr_a = np.array([1, 2, 3, 4])`\n- `arr_b = np.array([10, 20])`\n\nTry to add these arrays together. What happens? Write the code and explain the error in a comment.\n\n::: {#6b42578a .cell execution_count=5}\n``` {.python .cell-code}\n# Your code here\n```\n:::\n\n\n## Exercise 6: Reductive Operations\n\n**Task:** Create a NumPy array `data = np.array([12, 8, 15, 3, 7, 20, 11, 9])`. Calculate and print:\n\n- The sum of all elements\n- The mean (average) of all elements\n- The maximum value\n- The minimum value\n- The standard deviation\n\n::: {#7b669356 .cell execution_count=6}\n``` {.python .cell-code}\n# Your code here\n```\n:::\n\n\n## Exercise 7: Array Manipulation\n\n**Task:** Create a NumPy array `numbers = np.array([5, 2, 8, 1, 9, 3])`. Perform the following operations:\n\n- Sort the array and print the result\n- Calculate the cumulative sum and print the result\n- Create a new array with duplicates: `with_duplicates = np.array([5, 2, 8, 1, 9, 3, 5, 2, 1])` and find the unique elements\n\n::: {#925360a1 .cell execution_count=7}\n``` {.python .cell-code}\n# Your code here\n```\n:::\n\n\n## Exercise 8: List vs NumPy Comparison\n\n**Task:** Compare the flexibility of lists vs NumPy arrays:\n\n1. Create a Python list containing mixed data types: `mixed_list = [1, 'hello', 3.14, True]`\n2. Try to create a NumPy array from this list. What happens to the data types?\n3. Create a list of numbers: `num_list = [1, 2, 3, 4, 5]`\n4. Try to multiply the entire list by 2 using `num_list * 2`. What happens?\n5. Create a NumPy array from the same numbers and multiply by 2. Compare the results.\n\n::: {#966e12e0 .cell execution_count=8}\n``` {.python .cell-code}\n# Your code here\n```\n:::\n\n\n## Exercise 9: Performance Comparison\n\n**Task:** Compare the performance of list comprehension vs NumPy operations:\n\n1. Import the `time` module\n2. Create a range of 50,000 numbers using numpy `np.arange()`\n3. Time how long it takes to square each number using a **list comprehension**, i.e. the syntax `[x**2 for x in myarray]`\n4. Time how long it takes to square each number using NumPy operations\n5. Calculate and print how many times faster the NumPy operation is\n\n::: {#985f9f40 .cell execution_count=9}\n``` {.python .cell-code}\n# Your code here\n```\n:::\n\n\n## Exercise 10: Complex Operations\n\n**Task:** Create a NumPy array representing angles in degrees: `angles_deg = np.array([0, 30, 45, 60, 90, 120, 180])`\n1. Convert these angles to radians (hint: multiply by π/180, use `np.pi`)\n2. Calculate the sine and cosine of each angle\n3. Verify that sin²(x) + cos²(x) = 1 for each angle (use `np.sin()` and `np.cos()`)\n4. Print all results\n\n::: {#b67ff723 .cell execution_count=10}\n``` {.python .cell-code}\n# Your code here\n```\n:::\n\n\n::: {#fcebad91 .cell execution_count=11}\n``` {.python .cell-code}\n# Your code here\n```\n:::\n\n\n## Challenge 1: Temperature Conversion\n\n**Task:** You have temperature readings in Celsius: `celsius_temps = np.array([0, 10, 20, 25, 30, 35, 40])`\n\n1. Convert all temperatures to Fahrenheit using the formula: F = (C × 9/5) + 32\n2. Convert all temperatures to Kelvin using the formula: K = C + 273.15\n3. Calculate the temperature range (max - min) for each scale\n\n::: {#d3457583 .cell execution_count=12}\n``` {.python .cell-code}\n# Your code here\n```\n:::\n\n\n## Challenge 2: Kinetic energy\n\n**Task** Given arrays of mass (kg) and velocity (m/s) for several objects:\n```python\n# copy and paste this code below\nmasses = np.array([2.0, 1.5, 3.0, 0.5])      # in kilograms\nvelocities = np.array([10.0, 20.0, 15.0, 5.0]) # in meters per second\n```\n\n1. Calculate the kinetic energy $K$ for each object using the formula: \n\n$$K =  \\dfrac{1}{2}m v^2$$\n\n2. Calculate the total kinetic energy of the system (sum of all objects)\n\n::: {#f6965cad .cell execution_count=13}\n``` {.python .cell-code}\n# Your code here\n```\n:::\n\n\n## Challenge 3: Temperature Analysis\n\n**Task:**\nGiven a NumPy array of daily temperatures for 30 days:\n\n```python\ntemperatures = np.array([23.5, 24.0, 21.2, 25.6, 22.8, 23.9, 26.1, 27.3, 21.7, 22.5,\n                         24.6, 25.8, 20.9, 22.3, 24.7, 26.0, 27.5, 21.0, 22.9, 24.8,\n                         25.9, 27.6, 20.8, 22.7, 24.5, 26.2, 27.7, 20.5, 22.6, 24.9])\n```\n\nPerform the following tasks:\n\n1. Find the top 3 hottest days and their temperatures.\n2. Calculate the day-to-day percentage change in temperature.\n\n::: {#9c5d85c4 .cell execution_count=14}\n``` {.python .cell-code}\n# Your code here\n```\n:::\n\n\n",
    "supporting": [
      "exercises_numpy_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}