{
  "hash": "4fd31e857195ca8ee1145a357cfc8774",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Answers\njupyter: python3\n---\n\n\n# Creating a mask containing a circle\n\n## Pair programming: part 1\n\n\n### Exercise A\n\nCreate a 100 x 100 square grid containing a circle. The centre of the circle should be at position `x = 40`, `y = 50` and have a radius of 10. Call your output `circular_mask`.\n\n*Break this idea down into the different steps:*\n - *Start by creating an array - how could you create an array of the right shape?*\n - *How would you turn the equation above into code?*\n - *How would you evaluate one (x, y) position to start with?*\n - *How do you move on to evaluate every position?*\n - *...*\n\n**Important note**: For `numpy` remember that the axes are opposite to what you would expect for an x-y grid - they store data as *row-major* meaning you access the row as the first index (y) and the column as the second index (x). This means position `arr[1, 0]` would be at position (0, 1) in x, y co-ordinates rather than (1, 0) as you may expect.\n\nWhen completed, you can use the plotting code below to show your mask. This uses a `matplotlib` function called `imshow` ([documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.imshow.html); [example from image gallery](https://matplotlib.org/stable/gallery/images_contours_and_fields/image_demo.html)) which can plot your 2D data on a grid.\n\n::: {#139da84d .cell execution_count=1}\n``` {.python .cell-code}\n# ADD CODE HERE\nimport numpy as np\n\nn  = 100\ncircular_mask = np.zeros((n,n))\nx0, y0 = 40,50\nradius = 10\nrows, cols = np.indices(circular_mask.shape)\n\ncircular_mask = ((rows-y0)**2+(cols-x0)**2)<=radius**2\n```\n:::\n\n\n::: {#f9b50ef4 .cell execution_count=2}\n``` {.python .cell-code}\n### UNCOMMENT THIS CODE TO PLOT YOUR MASK WHEN COMPLETED\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6, 3.2))\n\nax.set_title('Circular Mask')\nax.imshow(circular_mask,cmap=\"bone\",origin=\"lower\") # Setting colourmap (cmap) and the position of 0,0 (origin) on the plot\n```\n\n::: {.cell-output .cell-output-display}\n![](exercises_part1_solutions_files/figure-html/cell-3-output-1.png){}\n:::\n:::\n\n\n---\n\n*Extended*:\n\n1. Consider how you could create a mask for a rectangle rather than a circle (or a square)\n\n::: {#c3e314d9 .cell execution_count=3}\n``` {.python .cell-code}\n# 10 by 20 rectangle from x0,y0\nLx = 10\nLy= 20\nmask = (rows-y0>0) & (rows-y0<Ly)  & (cols-x0>0) & (cols-x0<Lx)\nplt.imshow(mask,cmap=\"bone\",origin=\"lower\")\n```\n\n::: {.cell-output .cell-output-display}\n![](exercises_part1_solutions_files/figure-html/cell-4-output-1.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "exercises_part1_solutions_files"
    ],
    "filters": [],
    "includes": {}
  }
}