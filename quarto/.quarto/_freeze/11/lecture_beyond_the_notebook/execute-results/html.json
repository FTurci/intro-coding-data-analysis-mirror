{
  "hash": "0fd23ceac9a46e0e0c50584049a3dbad",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Beyond the notebook\njupyter: python3\n---\n\n\n\n## Our file system\n\nOur notebooks in `jupyter` do not exist in the void. They are stored in a directory on an online account on the *Noteable* server. These directories have a **structure**, the *file system*, and we can navigate this structure using dedicated commands.\n\nThese are not python commands, but are in fact specific to the file system itself, and follow different logic and conventions. For this reason, we prepend them with the `!` character. At the moment, we will use one command per cell.\n\n## Pathway to the current directory\n\nFirst, let's check where we are right now in the file system. To do so, we query the **p**athway to the **w**orking ***d***irectory with the `pwd` command.\n\n::: {#16a3c5d6 .cell execution_count=1}\n``` {.python .cell-code}\n! pwd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n/Users/ft14968/Repos/intro-coding-data-analysis/quarto/11\r\n```\n:::\n:::\n\n\nThis shows where we currently are, and each of you should have a different path, with a different username.\n\n## Listing the content of the current directory\n\nThe `ls` command lists the files and directories in the current directory. The current directory is represented by a `.` (dot).\n\n::: {#cbe10e3f .cell execution_count=2}\n``` {.python .cell-code}\n! ls \n```\n\n::: {.cell-output .cell-output-stdout}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>example.html\n\nexample.qmd\n\n<span class=\"ansi-cyan-fg ansi-bold\">exercises_numpy_riddles_solutions_files</span>\n\nexercises_numpy_riddles_solutions.html\n\nexercises_numpy_riddles_solutions.qmd\n\nexercises_numpy_riddles.html\n\nexercises_numpy_riddles.qmd\n\nexercises_python_riddles_solutions.html\n\nexercises_python_riddles_solutions.qmd\n\nexercises_python_riddles.qmd\n\nlecture_beyond_the_notebook.qmd\n\nlecture_beyond_the_notebook.quarto_ipynb\n\nparabola.png\n\n<span class=\"ansi-cyan-fg ansi-bold\">src2</span>\n</pre>\n```\n:::\n\n:::\n:::\n\n\n## Creating a new directory\n\nThe `mkdir` command creates a new directory in the specified path. For example, to create a new directory in the current directory we can write\n\n::: {#66a39d23 .cell execution_count=3}\n``` {.python .cell-code}\n! mkdir new_directory \n```\n:::\n\n\nWe can check its existence with `ls`.\n\n::: {#ac200757 .cell execution_count=4}\n``` {.python .cell-code}\n! ls\n```\n\n::: {.cell-output .cell-output-stdout}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>example.html\n\nexample.qmd\n\n<span class=\"ansi-cyan-fg ansi-bold\">exercises_numpy_riddles_solutions_files</span>\n\nexercises_numpy_riddles_solutions.html\n\nexercises_numpy_riddles_solutions.qmd\n\nexercises_numpy_riddles.html\n\nexercises_numpy_riddles.qmd\n\nexercises_python_riddles_solutions.html\n\nexercises_python_riddles_solutions.qmd\n\nexercises_python_riddles.qmd\n\nlecture_beyond_the_notebook.qmd\n\nlecture_beyond_the_notebook.quarto_ipynb\n\n<span class=\"ansi-cyan-fg ansi-bold\">new_directory</span>\n\nparabola.png\n\n<span class=\"ansi-cyan-fg ansi-bold\">src2</span>\n</pre>\n```\n:::\n\n:::\n:::\n\n\nEqually, we can go back to the `jupyter` interface and see the new directory in the graphical user interface.\n\n## Changing directory\n\nIt is easy to change the current directory with the `cd` command. For example, to go to the `new_directory` with\n\n::: {#a12ac7fd .cell execution_count=5}\n``` {.python .cell-code}\n! cd new_directory\n```\n:::\n\n\nAnd we we can go back to the previous directory with the `cd` command again using `..`\n\n::: {#79e300e2 .cell execution_count=6}\n``` {.python .cell-code}\n! cd ..\n```\n:::\n\n\n## Creating an empty file\n\nThe `touch` command creates a new file in the specified path. For example, to create a new file in the current directory we can write\n\n::: {#d98ba9fc .cell execution_count=7}\n``` {.python .cell-code}\n! touch new_directory/new_file.txt\n```\n:::\n\n\nWe can check its existence with `ls`.\n\n::: {#841fb553 .cell execution_count=8}\n``` {.python .cell-code}\n! ls new_directory\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnew_file.txt\r\n```\n:::\n:::\n\n\nWe can open this file in the graphical user interface and edit the contents\n\n\n[follows demonstration in *Noteable* with dummy text in the file `new_file.txt`]\n\n## Viewing file content\n\nThe `cat` command prints the content of a file. For example, to view the content of `new_file.txt` we can write\n\n::: {#7e66eb25 .cell execution_count=9}\n``` {.python .cell-code}\n! cat new_directory/new_file.txt \n```\n:::\n\n\nSeveral other commands exist to display parts of files, such as `head`, `tail` etc. Try them if you like!\n\n## Exercise\n\n- Create a new jupyter notebook using the graphical user interface.\n- From the **notebook**, use the commands above to create:\n    - a new directory called `src`\n    - a new file inside the directory called `naive_script.py`\n    - open it with double click for the files tab in `jupyter` and write a minimal code\n\n    ```python\n    print(\"Hello, World!\")\n\n    ```\n\n\n\n    - save the file\n    - use the `cat` command from the notebook to view the content of `naive_script.py`\n\n\n## Running scripts: from the notebook\n\nFor the entire duration of this course, you have been running `python` codes by typing them inside the notebook cells and executing the code cells.\n\nThe notebooks are complex files, that contain a lot of information beyond your code: the markdown, images, and a lot of extra data (called metadata).\n\nA much more essential way to store `python` code is to use **scripts**. These are files with the `.py` extension, like your `naive_script.py` file. Inside a script you can only have\n\n- `python` code\n- `python` comments to the code (i.e. lines prepended by the `#`)\n\nThis means that the scripts are simple, portable pure text files containing **instructions** in the `python` language.\n\nCan we execute such instructions? Yes, we **run** a script in various way. A simple way is to do it directly from a code  cell in the notebook. For this we use a special `jupyter` command called `run` followed by the path to the script.\n\n[check that you are in the correct path and the script exist]\n\n::: {#1ff07f91 .cell execution_count=10}\n``` {.python .cell-code}\nrun src/naive_script.py\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">OSError</span>                                   Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/.pyenv/versions/3.11.1/lib/python3.11/site-packages/IPython/core/magics/execution.py:727</span>, in <span class=\"ansi-cyan-fg\">ExecutionMagics.run</span><span class=\"ansi-blue-fg\">(self, parameter_s, runner, file_finder)</span>\n<span class=\"ansi-green-fg\">    726</span>     fpath = arg_lst[<span class=\"ansi-green-fg\">0</span>]\n<span class=\"ansi-green-fg\">--&gt; </span><span class=\"ansi-green-fg\">727</span>     filename = <span class=\"ansi-yellow-bg\">file_finder</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">fpath</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">    728</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">except</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">IndexError</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> e:\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/.pyenv/versions/3.11.1/lib/python3.11/site-packages/IPython/utils/path.py:90</span>, in <span class=\"ansi-cyan-fg\">get_py_filename</span><span class=\"ansi-blue-fg\">(name)</span>\n<span class=\"ansi-green-fg\">     89</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> py_name\n<span class=\"ansi-green-fg\">---&gt; </span><span class=\"ansi-green-fg\">90</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">IOError</span>(<span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">File `</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">%r</span><span class=\"ansi-yellow-fg\">` not found.</span><span class=\"ansi-yellow-fg\">\"</span> % name)\n\n<span class=\"ansi-red-fg\">OSError</span>: File `'src/naive_script.py'` not found.\n\nThe above exception was the direct cause of the following exception:\n\n<span class=\"ansi-red-fg\">Exception</span>                                 Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[10]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">1</span> <span class=\"ansi-yellow-bg\">get_ipython</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">run_line_magic</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">'</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">run</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-fg ansi-yellow-bg\">'</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">src/naive_script.py</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/.pyenv/versions/3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:2481</span>, in <span class=\"ansi-cyan-fg\">InteractiveShell.run_line_magic</span><span class=\"ansi-blue-fg\">(self, magic_name, line, _stack_depth)</span>\n<span class=\"ansi-green-fg\">   2479</span>     kwargs[<span class=\"ansi-yellow-fg\">'</span><span class=\"ansi-yellow-fg\">local_ns</span><span class=\"ansi-yellow-fg\">'</span>] = <span style=\"color:rgb(0,135,0)\">self</span>.get_local_scope(stack_depth)\n<span class=\"ansi-green-fg\">   2480</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> <span style=\"color:rgb(0,135,0)\">self</span>.builtin_trap:\n<span class=\"ansi-green-fg\">-&gt; </span><span class=\"ansi-green-fg\">2481</span>     result = <span class=\"ansi-yellow-bg\">fn</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">args</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">   2483</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># The code below prevents the output from being displayed</span>\n<span class=\"ansi-green-fg\">   2484</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># when using magics with decorator @output_can_be_silenced</span>\n<span class=\"ansi-green-fg\">   2485</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># when the last Python token in the expression is a ';'.</span>\n<span class=\"ansi-green-fg\">   2486</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">getattr</span>(fn, magic.MAGIC_OUTPUT_CAN_BE_SILENCED, <span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/.pyenv/versions/3.11.1/lib/python3.11/site-packages/IPython/core/magics/execution.py:738</span>, in <span class=\"ansi-cyan-fg\">ExecutionMagics.run</span><span class=\"ansi-blue-fg\">(self, parameter_s, runner, file_finder)</span>\n<span class=\"ansi-green-fg\">    736</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> os.name == <span class=\"ansi-yellow-fg\">'</span><span class=\"ansi-yellow-fg\">nt</span><span class=\"ansi-yellow-fg\">'</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">and</span> re.match(<span class=\"ansi-yellow-fg\">r</span><span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">^</span><span class=\"ansi-yellow-fg\">'</span><span class=\"ansi-yellow-fg\">.*</span><span class=\"ansi-yellow-fg\">'</span><span class=\"ansi-yellow-fg\">$</span><span class=\"ansi-yellow-fg\">\"</span>,fpath):\n<span class=\"ansi-green-fg\">    737</span>         warn(<span class=\"ansi-yellow-fg\">'</span><span class=\"ansi-yellow-fg\">For Windows, use double quotes to wrap a filename: </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">%r</span><span class=\"ansi-yellow-fg\">un </span><span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">mypath</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\\\</span><span class=\"ansi-yellow-fg\">myfile.py</span><span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">'</span>)\n<span class=\"ansi-green-fg\">--&gt; </span><span class=\"ansi-green-fg\">738</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">Exception</span>(msg) <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span class=\"ansi-blue-fg ansi-bold\">e</span>\n<span class=\"ansi-green-fg\">    739</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">except</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">TypeError</span>:\n<span class=\"ansi-green-fg\">    740</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> fpath <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> sys.meta_path:\n\n<span class=\"ansi-red-fg\">Exception</span>: File `'src/naive_script.py'` not found.</pre>\n```\n:::\n\n:::\n:::\n\n\nAs you can see, we have executed the instructions of the script and its textual output has been printed in the notebook. No variables are created during the process.\n\n## The Terminal\n\n\nAll the commands that we have seen above can be used in a pure-text environment called **the terminal**. The terminal is a text-based interface to an operating system (local or remote).\n\n\nYou do not use the mouse to perform actions. Instead, you **write** commands. These commands belong to the scripting language called `bash` (see [here](https://www.gnu.org/software/bash/manual/html_node/index.html) for more information). It is different from `python`, they can interact together in the notebook.\n\n\nYou can launch a terminal directly from `Noteable` by clicking on the `New` button, then selecting `Terminal`.\n\n\n![image.png](attachment:image.png)\n\n## Exercise\n\n- We try to navigate folders from the terminal and create a file\n- Open the terminal and\n    - change the directory to `src` (using `cd`)\n    - create a new file inside the directory called `parabola.py` (use `touch`)\n    - go back to the `Noteable` file tab, refresh the web-page and open the `parabola.py`  file\n    - open it and write a minimal code to plot a parabola. For example:\n\n    ```python\n    import numpy as np\n    import matplotlib.pyplot as plt\n    a = 1.\n    b =1.\n    c = 2\n    xlo = 0\n    xhi = 10\n    npoints = 100\n    x = np.linspace(xlo, xhi, npoints)\n    y = a*x**2 + b*x + c\n    plt.plot(x,y)\n    plt.savefig(\"parabola.png\")\n\n\n    ```\n\n    - save the file and go back to the Terminal tab\n    - use the `cat` command to check the content \n\n\n##  Exercise: Running scripts from the Terminal\n\nWe have seen that we can run the scripts from the notebook using the `run` command. In a very similar way, we can run scripts from the terminal, just by using the `python` command followed by the path to the script.\n\n\nDo the following:\n\n- first run the `parabola` script from the notebook using `run`: you should see the plot appear in the notebook.\n- then go back to the Terminal and run the `parabola.py` script using the `python` command followed by the path to the script: e.g.  `python src/parabola.py`. Where is the output?\n\n::: {#5615e490 .cell execution_count=11}\n``` {.python .cell-code}\nrun src/parabola.py\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">OSError</span>                                   Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/.pyenv/versions/3.11.1/lib/python3.11/site-packages/IPython/core/magics/execution.py:727</span>, in <span class=\"ansi-cyan-fg\">ExecutionMagics.run</span><span class=\"ansi-blue-fg\">(self, parameter_s, runner, file_finder)</span>\n<span class=\"ansi-green-fg\">    726</span>     fpath = arg_lst[<span class=\"ansi-green-fg\">0</span>]\n<span class=\"ansi-green-fg\">--&gt; </span><span class=\"ansi-green-fg\">727</span>     filename = <span class=\"ansi-yellow-bg\">file_finder</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">fpath</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">    728</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">except</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">IndexError</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">as</span> e:\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/.pyenv/versions/3.11.1/lib/python3.11/site-packages/IPython/utils/path.py:90</span>, in <span class=\"ansi-cyan-fg\">get_py_filename</span><span class=\"ansi-blue-fg\">(name)</span>\n<span class=\"ansi-green-fg\">     89</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> py_name\n<span class=\"ansi-green-fg\">---&gt; </span><span class=\"ansi-green-fg\">90</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">IOError</span>(<span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">File `</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">%r</span><span class=\"ansi-yellow-fg\">` not found.</span><span class=\"ansi-yellow-fg\">\"</span> % name)\n\n<span class=\"ansi-red-fg\">OSError</span>: File `'src/parabola.py'` not found.\n\nThe above exception was the direct cause of the following exception:\n\n<span class=\"ansi-red-fg\">Exception</span>                                 Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[11]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">1</span> <span class=\"ansi-yellow-bg\">get_ipython</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span><span class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">run_line_magic</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">'</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">run</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-fg ansi-yellow-bg\">'</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">src/parabola.py</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/.pyenv/versions/3.11.1/lib/python3.11/site-packages/IPython/core/interactiveshell.py:2481</span>, in <span class=\"ansi-cyan-fg\">InteractiveShell.run_line_magic</span><span class=\"ansi-blue-fg\">(self, magic_name, line, _stack_depth)</span>\n<span class=\"ansi-green-fg\">   2479</span>     kwargs[<span class=\"ansi-yellow-fg\">'</span><span class=\"ansi-yellow-fg\">local_ns</span><span class=\"ansi-yellow-fg\">'</span>] = <span style=\"color:rgb(0,135,0)\">self</span>.get_local_scope(stack_depth)\n<span class=\"ansi-green-fg\">   2480</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> <span style=\"color:rgb(0,135,0)\">self</span>.builtin_trap:\n<span class=\"ansi-green-fg\">-&gt; </span><span class=\"ansi-green-fg\">2481</span>     result = <span class=\"ansi-yellow-bg\">fn</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">args</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">*</span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">   2483</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># The code below prevents the output from being displayed</span>\n<span class=\"ansi-green-fg\">   2484</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># when using magics with decorator @output_can_be_silenced</span>\n<span class=\"ansi-green-fg\">   2485</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># when the last Python token in the expression is a ';'.</span>\n<span class=\"ansi-green-fg\">   2486</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">getattr</span>(fn, magic.MAGIC_OUTPUT_CAN_BE_SILENCED, <span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>):\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/.pyenv/versions/3.11.1/lib/python3.11/site-packages/IPython/core/magics/execution.py:738</span>, in <span class=\"ansi-cyan-fg\">ExecutionMagics.run</span><span class=\"ansi-blue-fg\">(self, parameter_s, runner, file_finder)</span>\n<span class=\"ansi-green-fg\">    736</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> os.name == <span class=\"ansi-yellow-fg\">'</span><span class=\"ansi-yellow-fg\">nt</span><span class=\"ansi-yellow-fg\">'</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">and</span> re.match(<span class=\"ansi-yellow-fg\">r</span><span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">^</span><span class=\"ansi-yellow-fg\">'</span><span class=\"ansi-yellow-fg\">.*</span><span class=\"ansi-yellow-fg\">'</span><span class=\"ansi-yellow-fg\">$</span><span class=\"ansi-yellow-fg\">\"</span>,fpath):\n<span class=\"ansi-green-fg\">    737</span>         warn(<span class=\"ansi-yellow-fg\">'</span><span class=\"ansi-yellow-fg\">For Windows, use double quotes to wrap a filename: </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">%r</span><span class=\"ansi-yellow-fg\">un </span><span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">mypath</span><span style=\"font-weight:bold;color:rgb(175,95,0)\">\\\\</span><span class=\"ansi-yellow-fg\">myfile.py</span><span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">'</span>)\n<span class=\"ansi-green-fg\">--&gt; </span><span class=\"ansi-green-fg\">738</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">Exception</span>(msg) <span style=\"font-weight:bold;color:rgb(0,135,0)\">from</span><span style=\"color:rgb(188,188,188)\"> </span><span class=\"ansi-blue-fg ansi-bold\">e</span>\n<span class=\"ansi-green-fg\">    739</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">except</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">TypeError</span>:\n<span class=\"ansi-green-fg\">    740</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> fpath <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> sys.meta_path:\n\n<span class=\"ansi-red-fg\">Exception</span>: File `'src/parabola.py'` not found.</pre>\n```\n:::\n\n:::\n:::\n\n\n## Reusing code\n\n\nThe most useful feature of the scripts is that they can store code for future usage in an organized manner. We do not need to have all of our code in a single notebook: we can split the relvant bits, put them into scripts and use them again and again in different projects.\n\nWhat allows us to do this is the  special `python` keywork `import`, that we have already used many times. \n\n\nLet's move our working directory to `src` and try importing our `parabola.py` script\n\n::: {#c3f5c78d .cell execution_count=12}\n``` {.python .cell-code}\ncd src\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[Errno 2] No such file or directory: 'src'\n/Users/ft14968/Repos/intro-coding-data-analysis/quarto/11\n```\n:::\n:::\n\n\nIn `python` we can only import `.py` files, so we drop the `.py` extension when importing.\n\n::: {#1fa15a17 .cell execution_count=13}\n``` {.python .cell-code}\nimport parabola\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[13]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">import</span><span style=\"color:rgb(188,188,188)\"> </span><span class=\"ansi-blue-fg ansi-bold\">parabola</span>\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'parabola'</pre>\n```\n:::\n\n:::\n:::\n\n\nNow the variables defined in `parabola.py` are available in our current notebook.\n\n::: {#5ca845e9 .cell execution_count=14}\n``` {.python .cell-code}\nprint(parabola.xhi)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[14]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">1</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">parabola</span>.xhi)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'parabola' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nCongratulations! You have written your first `python` **module**!\n\n## Exercise\n\nThe module above is not very useful. A better way to reuse code is to encapsulate it in a **custom .\n\n\n- Modify your `parabola.py` script to create a function `plot_parabola` that takes `a`, `b`, `c`, `xlo`, `xhi` as parameters.\n\n- Then, import your parabola module in the present notebook using the following line:\n\n    ```python\n    import parabola as pb\n    ```\n\n-  Can you find a way to access your function `plot_parabola` from `pb` ?\n- Improve your function to customize the appearence of the plot (adding custom labels, colors, linestyles) and use the function with such changes. **Important** you will need to restart the notebook for these to take effect, because a module is loaded only once.\n\n\n## More exercises on the terminal\n\n\n1.  Most commands in `bash` allow you to acces their documentation with `<name_of_the_command> --help `. Can you find out what the command `mv` does?\n\n::: {#3d095cd5 .cell execution_count=15}\n``` {.python .cell-code}\n##YOUR CODE HERE\n```\n:::\n\n\n2. Find a way to rename your `parabola.py` script to `geometry.py`\n\n::: {#72872a0c .cell execution_count=16}\n``` {.python .cell-code}\n##YOUR CODE HERE\n```\n:::\n\n\nMost commands in `bash` support options, using the dash `-` sytax. For example, `ls -l` will list the files in a long format. Can you use  `ls --help` to find out what the `-l` option does\n\n::: {#66da55e1 .cell execution_count=17}\n``` {.python .cell-code}\nls --help\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nls: unrecognized option `--help'\r\nusage: ls [-@ABCFGHILOPRSTUWXabcdefghiklmnopqrstuvwxy1%,] [--color=when] [-D format] [file ...]\r\n```\n:::\n:::\n\n\n- Can you find an additional option for `ls -l` to fils files in reverse time order?\n\n::: {#9dae7655 .cell execution_count=18}\n``` {.python .cell-code}\n##YOUR CODE HERE\n```\n:::\n\n\n## Riddles\n\nTo revise the material from the previous lectures, we can try to solve some riddles.\n\nYou can find the exercises here below\n\n- [Python Riddles](exercises_python_riddles.qmd)\n- [Numpy Riddles](exercises_numpy_riddles.qmd)\n\n",
    "supporting": [
      "lecture_beyond_the_notebook_files"
    ],
    "filters": [],
    "includes": {}
  }
}