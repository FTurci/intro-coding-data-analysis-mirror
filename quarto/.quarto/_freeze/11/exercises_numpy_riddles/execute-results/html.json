{
  "hash": "38f00654337b287ea2168c89b2f1159d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Consolidation - `numpy` riddles\njupyter: python3\n---\n\n\n\nSolve the following `numpy` riddles using `numpy` and its documentation. \n\n\nIf possible, work in the **pair programming** paradigm: work in pairs, with one person taking the role of the **driver** (writing the code) and one taking the role of the **navigator** (reading and understanding the documentation). Alternate the roles. Try to find solutions that are **short** (i.e. few line sof code) but **easy to understand**.\n\n::: {#50a80876 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n```\n:::\n\n\n**Diagonal Sum**:\n   - Riddle: Write a function that takes a square 2D NumPy array as input and returns the sum of the elements along the main diagonal.\n   - Example: `diagonal_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> 15`\n\n::: {#78ecdc6f .cell execution_count=2}\n``` {.python .cell-code}\n## YOUR CODE HERE\n```\n:::\n\n\n**Unique Elements Count**:\n   - Riddle: Write a function that takes a 1D NumPy array as input and returns the count of unique elements in the array.\n   - Example: `unique_count([1, 2, 3, 2, 4, 1, 5]) -> 5`\n\n::: {#0e14faaa .cell execution_count=3}\n``` {.python .cell-code}\n## YOUR CODE HERE\n```\n:::\n\n\n**Random sample ands cumulative sum**:\n   - Riddle: A fair coin is tossed 20 times, and we win 1£ for every head and lose 1£ for every tail. Assuming that we start with no money at the beginning, and that the seed of teh default random number generator is `seed=1234`, how much money do we have at every succesive step?\n\n::: {#21203c0a .cell execution_count=4}\n``` {.python .cell-code}\n## YOUR CODE HERE\n```\n:::\n\n\n**Rolling Window**:\n   - Riddle: Write a function that takes a 1D NumPy array and a window size as input, and returns a 2D array where each row is a sliding window of the input array of a given size.\n   - For example, a 1d array with a rolling window of size 3: `rolling_window([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]`\n\n\nHint: you can use **list comprehension** and convert the final list to an array.\n\n::: {#2a561650 .cell execution_count=5}\n``` {.python .cell-code}\n## YOUR CODE HERE\n```\n:::\n\n\n**Product of elements**:\n    - Riddle: The geometric mean of a number of observations $x_1, x_2,\\dots, x_n$ is defined as  $M = \\sqrt{x_1\\times x_2\\times \\dots x_n }$. Define a custom function to calculate the geometric mean.\n    - Example: `geometric_mean([1, 2, 3, 4, 5]) -> 10.954451150103322`\n\n::: {#bb79cddd .cell execution_count=6}\n``` {.python .cell-code}\n## YOUR CODE HERE\n```\n:::\n\n\n**Vectorised calculations and visualisation**:\n   - Riddle: Draw 100 thousand points uniformly distributed inside a circle of radius 1 centered at (0,0). Plot them using `scatter()` from `matplotlib` according to their radial coordinate:\n        - use the hexadecimal colour `\"#76d6ff\"` for points at a distance below 0.5 from the origin$.\n        - use the hexadecimal colour `\"ffe701\"` for points furtehr away.\n   \n\nHint1: disk point picking is not  trivial: https://mathworld.wolfram.com/DiskPointPicking.html\n\nHint2: For matplotlib's `plot`, use the pixel style `','`, and remmber to set the axis to be in the same units (`\"equal\"`)\n\n::: {#d264d137 .cell execution_count=7}\n``` {.python .cell-code}\n## YOUR CODE HERE\n```\n:::\n\n\n",
    "supporting": [
      "exercises_numpy_riddles_files"
    ],
    "filters": [],
    "includes": {}
  }
}