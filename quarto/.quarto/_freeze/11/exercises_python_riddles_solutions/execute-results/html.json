{
  "hash": "c7faf2ccb1965e95706afaad8f0df945",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Consolidation - `Python` riddles\njupyter: python3\n---\n\n\n\nSolve the following using standard Python features and built-in functions.\n\nIf possible, work in the **pair programming** paradigm: work in pairs, with one person taking the role of the **driver** (writing the code) and one taking the role of the **navigator** (reading and understanding the documentation). Alternate the roles. Try to find solutions that are **short** (i.e. few line sof code) but **easy to understand**.\n\n**Sum of Digits**\n- Riddle: Write a function `sum_digits(n)` that takes an integer `n` and returns the sum of its digits.\n- Test it with the following test cases: `sum_digits(145)-->10` and `sum_digits(102)-->3`\n\nHint: remember that you can convert an integer to a string with `str(n)` and a character `c` to integer with `int(c)`.\n\n::: {#b3a739cd .cell execution_count=1}\n``` {.python .cell-code}\ndef sum_digits(n):\n    return sum(int(c) for c in str(n))\n\nassert sum_digits(102)==3\nassert sum_digits(145)==10\n```\n:::\n\n\n**Palyndrome checker**\n\n- Riddle: A word is a palyndrome if it reads the same forwards and backwards. Write a function `is_palindrome(s)` that takes an object `s`, checks that it is a string and returns `True` if `s` is a palindrome and `False` otherwise. \n- Test it with the following test cases: `is_palindrome(\"racecar\")-->True` , `is_palindrome(\"hello\")-->False` and  `is_palindrome(3)-->error`\n\n\nHint: an object is a string if `typ(s)` returns `str`.\n\n::: {#9bcf6403 .cell execution_count=2}\n``` {.python .cell-code}\n#YOUR CODE HERE\ndef is_palindrome(s):\n    if type(s) == str:\n        return s == s[::-1]\n    else:\n        print(\"Error: Input is not a string.\")\n        return\n\nassert is_palindrome(\"racecar\")==True\nassert is_palindrome(\"hello\")==False\n\nis_palindrome(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nError: Input is not a string.\n```\n:::\n:::\n\n\n",
    "supporting": [
      "exercises_python_riddles_solutions_files"
    ],
    "filters": [],
    "includes": {}
  }
}