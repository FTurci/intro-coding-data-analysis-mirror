{
  "hash": "b158ecef63a6a12ecf5393848285621b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Consolidation - `numpy` riddles\njupyter: python3\n---\n\n\n\nSolve the following `numpy` riddles using `numpy` and its documentation. \n\n\nIf possible, work in the **pair programming** paradigm: work in pairs, with one person taking the role of the **driver** (writing the code) and one taking the role of the **navigator** (reading and understanding the documentation). Alternate the roles. Try to find solutions that are **short** (i.e. few line sof code) but **easy to understand**.\n\n::: {#151ab5a2 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n```\n:::\n\n\n**Diagonal Sum**:\n   - Riddle: Write a function that takes a square 2D NumPy array as input and returns the sum of the elements along the main diagonal.\n   - Example: `diagonal_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> 15`\n\n::: {#08323e34 .cell execution_count=2}\n``` {.python .cell-code}\n## YOUR CODE HERE\n\ndef diagonal_sum(seq):\n    arr = np.asarray(seq)\n    return np.diagonal(arr).sum()\n\ndiagonal_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n15\n```\n:::\n:::\n\n\n**Unique Elements Count**:\n   - Riddle: Write a function that takes a 1D NumPy array as input and returns the count of unique elements in the array.\n   - Example: `unique_count([1, 2, 3, 2, 4, 1, 5]) -> 5`\n\n::: {#cd0dd45d .cell execution_count=3}\n``` {.python .cell-code}\n## YOUR CODE HERE\ndef unique_count(sequence):\n    return np.unique(sequence).size\n\nunique_count([1, 2, 3, 2, 4, 1, 5]) \n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n5\n```\n:::\n:::\n\n\n**Random sample ands cumulative sum**:\n   - Riddle: A fair coin is tossed 20 times, and we win 1£ for every head and lose 1£ for every tail. Assuming that we start with no money at the beginning, and that the seed of teh default random number generator is `seed=1234`, how much money do we have at every succesive step?\n\n::: {#5ee9083e .cell execution_count=4}\n``` {.python .cell-code}\n## YOUR CODE HERE\n\nn_trials = 20\nrng = np.random.default_rng(1234)\nprint(\"The amount we have after every coin tossing is\", rng.choice([-1,1],n_trials).cumsum())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe amount we have after every coin tossing is [ 1  2  3  2  1  2  1  0 -1 -2 -1 -2 -1 -2 -1 -2 -1  0  1  0]\n```\n:::\n:::\n\n\n**Rolling Window**:\n   - Riddle: Write a function that takes a 1D NumPy array and a window size as input, and returns a 2D array where each row is a sliding window of the input array of a given size.\n   - For example, a 1d array with a rolling window of size 3: `rolling_window([1, 2, 3, 4, 5], 3) -> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]`\n\n\nHint: you can use **list comprehension** and convert the final list to an array.\n\n::: {#d8fb149b .cell execution_count=5}\n``` {.python .cell-code}\n## YOUR CODE HERE\n\ndef rolling_window(seq,window):\n    arr = np.asarray(seq)\n    num_rows  = len(seq)- window + 1\n    return np.array([arr[i:i+window] for i in range(num_rows)])\n    \n\nrolling_window([1, 2, 3, 4, 5], 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\narray([[1, 2, 3],\n       [2, 3, 4],\n       [3, 4, 5]])\n```\n:::\n:::\n\n\n**Product of elements**:\n    - Riddle: The geometric mean of a number of observations $x_1, x_2,\\dots, x_n$ is defined as  $M = \\sqrt{x_1\\times x_2\\times \\dots x_n }$. Define a custom function to calculate the geometric mean.\n    - Example: `geometric_mean([1, 2, 3, 4, 5]) -> 10.954451150103322`\n\n::: {#d974668b .cell execution_count=6}\n``` {.python .cell-code}\n## YOUR CODE HERE\n\n\ndef geometric_mean(seq):\n    return np.sqrt(np.prod(seq))\n\n\ngeometric_mean([1, 2, 3, 4, 5])\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n10.954451150103322\n```\n:::\n:::\n\n\n**Vectorised calculations and visualisation**:\n   - Riddle: Draw 100 thousand points uniformly distributed inside a circle of radius 1 centered at (0,0). Plot them using `scatplotter()` from `matplotlib`acoording to their radial coordinate:\n        - use the hexadecimal colour `\"#76d6ff\"` for points at a distance below 0.5 from the origin$.\n        - use the hexadecimal colour `\"ffe701\"` for points furtehr away.\n   \n\nHint1: disk point picking is not  trivial: https://mathworld.wolfram.com/DiskPointPicking.html\n\nHint2: For matplotlib's `plot`, use the pixel style `','`, and remmber to set the axis to be in the same units (`\"equal\"`)\n\n::: {#0daf0bbf .cell execution_count=7}\n``` {.python .cell-code}\n## YOUR CODE HERE\nnpoints = 100_000\ntheta = np.random.uniform(0, 2*np.pi, npoints)\nr = np.sqrt(np.random.uniform(0, 1, npoints))\nx = r * np.cos(theta)\ny = r * np.sin(theta)\n\ninside = r<0.5\n\nimport matplotlib.pyplot as plt\n\nplt.plot(x[inside],y[inside],',',color=\"#76d6ff\")\nplt.plot(x[~inside],y[~inside],',',color=\"#ffe701\")\nplt.axis(\"equal\")\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n(-1.0996463517906905,\n 1.0992516399542742,\n -1.0994327729527829,\n 1.098998268565109)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](exercises_numpy_riddles_solutions_files/figure-html/cell-8-output-2.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "exercises_numpy_riddles_solutions_files"
    ],
    "filters": [],
    "includes": {}
  }
}