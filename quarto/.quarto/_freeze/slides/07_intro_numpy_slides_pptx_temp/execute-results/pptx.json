{
  "hash": "671fdae43afdedf7ebb8ea92897871f0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: The `numpy` module\n\nformat: \n  pptx:\n    reference-doc: template.pptx\n  live-revealjs:\n    theme: default\n    highlight-style: github\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n    code-copy: true\n    code-overflow: wrap\n    incremental: true\n    smaller: true\n    scrollable: true\n    slide-number: true\n    self-contained: true\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  error: true\n---\n\n## Aims\n\nBy the end of this lecture, you will be able to:\n\n- Explain what the NumPy module is and why it is used\n- Create and manipulate NumPy arrays\n- Perform element-wise operations and mathematical functions on arrays\n- Compare NumPy arrays with Python lists in terms of performance and functionality\n- Use basic aggregation and array manipulation functions in NumPy\n\n## What is `numpy`?\n\n**NumPy** is a Python library that makes working with numbers and large collections of data fast and easy. \n\n![Complete description at [https://numpy.org](https://numpy.org)](https://numpy.org/doc/stable/_static/numpylogo.svg)\n\nIt provides special **array** objects and tools for doing math efficiently, which is useful for data analysis and scientific computing.\n\n\nIt is imported in your session using the following command\n\n```python\nimport numpy\n```\n\nWe will follow a common practice and use a shorthand with the `as` syntax\n\n```python\nimport numpy as np\n```\n\nSo `np` will always mean `numpy` for us.\n\n## Arrays vs lists\n\n\n**Python Lists**\n\n- Ordered, Mutable  \n- Mixed data types\n- Explicit operations needed\n- Slower performance\n\n**NumPy Arrays**\n\n- Ordered, Mutable\n- **One** data type per array\n- Element-wise operations\n- Fast & memory efficient\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nlist_ex = [1, 2, 3, 4]\nprint(list_ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 4]\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\n#notice that we explicitly call the np.array()\narr_ex = np.array([1, 2, 3, 4]) \nprint(arr_ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1 2 3 4]\n```\n:::\n:::\n\n\nWe are going to see these differences in detail.\n\n---\n\n## Arrays from lists\n\nA purely numerical list can readily be converted to an array.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\n# Create array from list\nlist1 = [1.,1.,2.,3.,5.,8.]\narr1 = np.array(list1)\nprint(arr1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1. 1. 2. 3. 5. 8.]\n```\n:::\n:::\n\n\nThe type of the elements yields the **data type** of the array\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nprint(arr1.dtype)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfloat64\n```\n:::\n:::\n\n\n> Try and change the list1 object to contain only integers and see the change!\n\n---\n\n\n## Array properties\n\nArrays possess plenty of properties.\n\nThese are accessed with the `.` notation.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nprint(f\"Data type: {arr1.dtype}\")\nprint(f\"Shape: {arr1.shape}\")\nprint(f\"Shape: {arr1.size}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData type: float64\nShape: (6,)\nShape: 6\n```\n:::\n:::\n\n\nFor now, we consider only 1d arrays, i.e. sequences. Their length is is their `size` and corresponds to the first element of the property `shape`.\n\n---\n\n## Accessing array elements\n\nSimilarly to lists, we access an element in an array via zero-based **indexing**\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nprint(arr1[0])    # First element\nprint(arr1[-1])   # Last element\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.0\n8.0\n```\n:::\n:::\n\n\nAgain, similarly to lists, we can access regions of the array via **slicing**\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nprint(arr1[3:6])  # Elements from index 3 to 6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[3. 5. 8.]\n```\n:::\n:::\n\n\n---\n\n\n## Element-wise Operations\n\nThe main motivation to use arrays is that lists are cumbersome when performing maths.\n\nSuppose we have a list and want to double all of its elements:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nlist1 = [1,2,3,4]\n```\n:::\n\n\nWe need to loop over all of them and create a new list\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nlist2 = []\nfor item in list1:\n    list2.append(2*item)\nprint(list2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2, 4, 6, 8]\n```\n:::\n:::\n\n\nIn fact, we can do this in a slightly more compact way using **list comprehension** \n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nlist2 = [item*2 for item in list1]\n```\n:::\n\n\nStill, an explicit loop is needed. Loops in Python are **slow**.\n\n## Element-wise Operations\n\nThe `numpy` syntax avoids the explicit Python loop.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\narr1 = np.array(list1)\narr2 = 2*arr1\nprint(arr2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2 4 6 8]\n```\n:::\n:::\n\n\nThis is not just a cosmetic change: under the hood `numpy` uses an efficient architecture that performs operations in **compiled code**, making it much faster than Python loops.\n\n\n---\n\n## Performance advantage\n\nThis performance difference can be tracked explicitly. \n\nWe create a large list and a large array with identical content\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Create a large list and array\nlarge_list = list(range(1_000_000))\nlarge_array = np.array(large_list)\n```\n:::\n\n\nAnd then track the time for the two operations\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nimport time\n#  Track the time taken for the list multiplication\nstart = time.time()\nlist_result = [x * 2 for x in large_list]\nend = time.time()\nprint(f\"List comprehension time: {end - start:.5f} seconds\")\n\n# Time array multiplication\nstart = time.time()\narray_result = large_array * 2\nend = time.time()\nprint(f\"NumPy array time: {end - start:.5f} seconds\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList comprehension time: 0.01326 seconds\nNumPy array time: 0.00109 seconds\n```\n:::\n:::\n\n\n---\n\n##  General mathematical functions\n\nThe multiplication we performed earlier is done **element-wise**: every element is update according to teh same rule.\n\nWe can apply plenty of element-wise operations to the arrays. \n\nMany of these are available as `numpy` functions directly accessed from the `np.` module\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# Element-wise functions\nprint(f\"Square root: {np.sqrt(arr1)}\")\nprint(f\"Mean: {np.mean(arr1)}\")\nprint(f\"Cosine: {np.cos(arr1)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSquare root: [1.         1.41421356 1.73205081 2.        ]\nMean: 2.5\nCosine: [ 0.54030231 -0.41614684 -0.9899925  -0.65364362]\n```\n:::\n:::\n\n\nThe operations do not modify the original array, but produce **new copies**\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\narr2 = arr1*3/2 + 5\nprint(f\"Original: {arr1}\")\nprint(f\"Modified: {arr2}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOriginal: [1 2 3 4]\nModified: [ 6.5  8.   9.5 11. ]\n```\n:::\n:::\n\n\n---\n\n\n## Sums\n\nOther convenent `numpy` functions allow you to accumulate values without loops.\n\nAssume we have an array $x$\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nx = np.array([1,2,3,4,5,6,7,8])\n```\n:::\n\n\n**Sums**\n\n$$\nS = \\sum_{i=1}^{n} x_i\n$$\n\nIn NumPy, this is translated as:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nS = np.sum(x)\nprint(S)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n36\n```\n:::\n:::\n\n\n## Sums\n\n**Cumulative sums**\n\nA cumulative sum is a sequence where each element is the sum of all previous elements up to that position.\n$$\ny_i = \\sum_{j=1}^{i} x_j\n$$\n\nIn NumPy, this is translated as:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n y = np.cumsum(x)\n print(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[ 1  3  6 10 15 21 28 36]\n```\n:::\n:::\n\n\n---\n\n## Example: molecular masses\n\nLet's consider the formula for the **molecular mass** of a compound:\n\n$$\nM = \\sum_{i=1}^{n} a_i m_i\n$$\n\nwhere\n\n- $a_i$ is the number of atoms of element $i$\n- $m_i$ is the atomic mass of element $i$\n\n\nWith `numpy`, you can compute this as:\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\na = np.array([2, 1, 4])      # Number of atoms for each element\nm = np.array([12.01, 1.01, 16.00])  # Atomic masses (e.g., C, H, O)\nM = np.sum(a * m)\nprint(f\"Molecular mass: {M}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMolecular mass: 89.03\n```\n:::\n:::\n\n\n---\n\n## Operations between arrays\n\nYou can perform arithmetic operations directly between arrays of the same shape. Operations like addition, subtraction, multiplication, and division are applied **element-wise**.\n\nFor example:\n\n**Element-wise operations:**\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nadded = arr1 + arr2\nmultiplied = arr1 * arr2\nprint(f\"Added: {added}\")\nprint(f\"Multiplied: {multiplied}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAdded: [ 7.5 10.  12.5 15. ]\nMultiplied: [ 6.5 16.  28.5 44. ]\n```\n:::\n:::\n\n\n**Note:** Arrays must have compatible shapes!\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\narr3 = np.array([1, 2, 3])\narr4 = np.array([4, 5])\n# result = arr3 + arr4  # This would cause an error - incompatible shapes\n```\n:::\n\n\n--- \n\n## Combining arrays\n\nWith lists, the `+` operator concatenated different lists. Since for arrays the sign `+` corresponds to true mathematical addition, a dedicated concatenation function exists:\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\ncombined = np.concatenate([arr1, arr2])\nprint(f\"Unique elements: {combined}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnique elements: [ 1.   2.   3.   4.   6.5  8.   9.5 11. ]\n```\n:::\n:::\n\n\nMany other variations of concatenation exist. Consult the [documentation](https://numpy.org/doc/stable/).\n\n---\n\n## Key Takeaways\n\n- **NumPy arrays** are optimized for numerical operations\n- **Element-wise operations** work implicitly\n- **Performance benefits** for large datasets\n- **Mathematical functions** apply to entire arrays\n- **Shape compatibility** required for operations\n- Choose the **right tool** for your task\n\n",
    "supporting": [
      "07_intro_numpy_slides_pptx_temp_files"
    ],
    "filters": []
  }
}