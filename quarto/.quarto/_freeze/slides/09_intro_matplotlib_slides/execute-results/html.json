{
  "hash": "cb45671b73aa602d7cd3041353f5ed9c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Plotting with `matplotlib`'\nformat: \n  revealjs:\n    theme: default\n    highlight-style: github\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n    code-copy: true\n    code-overflow: wrap\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  fig-width: 8\n  fig-height: 5\n---\n\n## Introduction to matplotlib\n\n**matplotlib** - Powerful Python library for creating visualizations\n\n::: {#94e8bd26 .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n```\n:::\n\n\n**Key concepts:**\n- **Figure**: The canvas\n- **Axes**: The x-y plotting area\n- **Object-oriented** approach (recommended)\n\n::: {#b5658a1e .cell execution_count=2}\n``` {.python .cell-code}\nfig, ax = plt.subplots()  # Create figure and axes\n```\n\n::: {.cell-output .cell-output-display}\n![](09_intro_matplotlib_slides_files/figure-revealjs/cell-3-output-1.png){}\n:::\n:::\n\n\n---\n\n## Two Plotting Approaches\n\n**Pyplot (MATLAB-style):**\n```python\nplt.plot(x, y)  # Direct plotting\n```\n\n**Object-oriented (Recommended):**\n\n::: {#b7732f9c .cell execution_count=3}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\nax.plot(x, y)  # Plot using axes object\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[3]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-green-fg\">      1</span> fig, ax = plt.subplots()\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">2</span> ax.plot(<span class=\"ansi-yellow-bg\">x</span>, y)  <span style=\"font-style:italic;color:rgb(95,135,135)\"># Plot using axes object</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'x' is not defined</pre>\n```\n:::\n\n:::\n\n::: {.cell-output .cell-output-display}\n![](09_intro_matplotlib_slides_files/figure-revealjs/cell-4-output-2.png){}\n:::\n:::\n\n\n**Why object-oriented?**\n- More explicit control\n- Better for complex plots\n- Modern best practice\n\n---\n\n## Basic Plot Types\n\n::: {#55e78a18 .cell execution_count=4}\n``` {.python .cell-code}\n# Sample data\nrng = np.random.default_rng(seed=124)\nx = np.arange(1, 20, 2)\ny1 = x**2\ny2 = x**2 + rng.normal(size=len(x))*50\n\nfig, ax = plt.subplots()\nax.plot(x, y1, label=\"Line plot\")        # Line plot\nax.scatter(x, y2, label=\"Scatter plot\")  # Scatter plot\nax.legend()\n```\n\n::: {.cell-output .cell-output-display}\n![](09_intro_matplotlib_slides_files/figure-revealjs/cell-5-output-1.png){}\n:::\n:::\n\n\n---\n\n## Customizing Appearance\n\n::: {#eeb06a2d .cell execution_count=5}\n``` {.python .cell-code}\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Styling options\nax.plot(x, y1, color=\"slategrey\", linestyle=\"--\", linewidth=2)\nax.scatter(x, y2, color=\"indianred\", marker='+', s=60)\n\n# Labels and limits\nax.set_xlabel(\"X values\")\nax.set_ylabel(\"Y values\")\nax.set_xlim(0, 20)\nax.set_title(\"Customized Plot\")\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nText(0.5, 1.0, 'Customized Plot')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](09_intro_matplotlib_slides_files/figure-revealjs/cell-6-output-2.png){}\n:::\n:::\n\n\n---\n\n## Common Style Options\n\n**Colors:** Named colors, hex codes, RGB\n- `color=\"red\"`, `color=\"#FF0000\"`, `color=(1,0,0)`\n\n**Line styles:** \n- `linestyle=\"-\"` (solid), `\"--\"` (dashed), `\":\"` (dotted)\n\n**Markers:**\n- `marker=\"o\"` (circle), `\"+\"` (plus), `\"^\"` (triangle)\n\n**Transparency:**\n- `alpha=0.7` (70% opaque)\n\n---\n\n## Legends and Annotations\n\n::: {#8973b47f .cell execution_count=6}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\n\nax.plot(x, y1, label=\"Fitted line\", color=\"blue\", linestyle=\"--\")\nax.scatter(x, y2, label=\"Measurements\", color=\"red\", marker='o')\n\nax.set_xlabel(\"x\")\nax.set_ylabel(\"y\") \nax.legend()  # Uses the label parameters\nax.set_title(\"Plot with Legend\")\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nText(0.5, 1.0, 'Plot with Legend')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](09_intro_matplotlib_slides_files/figure-revealjs/cell-7-output-2.png){}\n:::\n:::\n\n\n---\n\n## Histograms\n\n::: {#1d13db84 .cell execution_count=7}\n``` {.python .cell-code}\n# Generate random data\nrng = np.random.default_rng(seed=68)\ndata1 = rng.normal(0, 1, 5000)\ndata2 = rng.normal(1, 1.5, 1000)\n\nfig, ax = plt.subplots()\nbins = np.arange(-4, 6, 0.3)\n\nax.hist(data1, bins=bins, alpha=0.7, color=\"skyblue\", \n        density=True, label=\"Dataset 1\")\nax.hist(data2, bins=bins, alpha=0.7, color=\"orange\", \n        density=True, label=\"Dataset 2\")\n\nax.set_xlabel(\"Value\")\nax.set_ylabel(\"Density\")\nax.legend()\n```\n\n::: {.cell-output .cell-output-display}\n![](09_intro_matplotlib_slides_files/figure-revealjs/cell-8-output-1.png){}\n:::\n:::\n\n\n---\n\n## Histogram Options\n\n**Key parameters:**\n- `bins`: Number or explicit bin edges\n- `alpha`: Transparency (0-1)\n- `density`: Normalize to show probability density\n- `histtype`: 'bar', 'step', 'stepfilled'\n\n::: {#3f8a7ed9 .cell execution_count=8}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\nax.hist(data1, bins=30, alpha=0.6, histtype='step', \n        color='purple', linewidth=2)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n(array([  1.,   0.,   1.,   5.,   6.,  24.,  38.,  56., 132., 135., 204.,\n        272., 376., 442., 452., 515., 502., 494., 393., 305., 229., 160.,\n        107.,  76.,  28.,  32.,   9.,   3.,   2.,   1.]),\n array([-4.01393721, -3.75715456, -3.50037191, -3.24358926, -2.9868066 ,\n        -2.73002395, -2.4732413 , -2.21645865, -1.95967599, -1.70289334,\n        -1.44611069, -1.18932804, -0.93254538, -0.67576273, -0.41898008,\n        -0.16219743,  0.09458523,  0.35136788,  0.60815053,  0.86493318,\n         1.12171584,  1.37849849,  1.63528114,  1.89206379,  2.14884645,\n         2.4056291 ,  2.66241175,  2.9191944 ,  3.17597706,  3.43275971,\n         3.68954236]),\n [<matplotlib.patches.Polygon at 0x12ffb8e90>])\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](09_intro_matplotlib_slides_files/figure-revealjs/cell-9-output-2.png){}\n:::\n:::\n\n\n---\n\n## Multiple Plots on Same Axes\n\n::: {#28ced8ba .cell execution_count=9}\n``` {.python .cell-code}\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Multiple data series\nx_vals = np.linspace(0, 2*np.pi, 100)\ny1 = np.sin(x_vals)\ny2 = np.cos(x_vals)\ny3 = np.sin(2*x_vals)\n\nax.plot(x_vals, y1, label=\"sin(x)\")\nax.plot(x_vals, y2, label=\"cos(x)\", linestyle='--')\nax.scatter(x_vals[::10], y3[::10], label=\"sin(2x)\", marker='o')\n\nax.legend()\nax.set_xlabel(\"x\")\nax.set_ylabel(\"y\")\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nText(0, 0.5, 'y')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](09_intro_matplotlib_slides_files/figure-revealjs/cell-10-output-2.png){}\n:::\n:::\n\n\n---\n\n## Anatomy of a Figure\n\n![Matplotlib anatomy shows the components: Figure, Axes, Labels, Legend, Ticks, etc.](images/anatomy_example.png){width=60%}\n\n**Key components:**\n- **Figure**: Overall container\n- **Axes**: Plot area with data\n- **Axis labels**: x/y descriptions  \n- **Ticks**: Scale markers\n- **Legend**: Data series identification\n\n---\n\n## Figure Size and Layout\n\n::: {#586e8fc8 .cell execution_count=10}\n``` {.python .cell-code}\n# Control figure size\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Multiple subplots (brief example)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot([1, 2, 3], [1, 4, 2])\nax2.scatter([1, 2, 3], [2, 1, 3])\nax1.set_title(\"Plot 1\")\nax2.set_title(\"Plot 2\")\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nText(0.5, 1.0, 'Plot 2')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](09_intro_matplotlib_slides_files/figure-revealjs/cell-11-output-2.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](09_intro_matplotlib_slides_files/figure-revealjs/cell-11-output-3.png){}\n:::\n:::\n\n\n---\n\n## Best Practices\n\n- **Always** label your axes\n- **Use legends** for multiple data series\n- **Choose appropriate** plot types for your data\n- **Control figure size** for readability\n- **Use colors wisely** - consider colorblind accessibility\n- **Keep it simple** - don't over-decorate\n\n::: {#c7f86e0b .cell execution_count=11}\n``` {.python .cell-code}\n# Good example\nfig, ax = plt.subplots(figsize=(8, 5))\nax.plot(x, y1, label=\"Data\")\nax.set_xlabel(\"Time (s)\")\nax.set_ylabel(\"Amplitude (V)\")\nax.set_title(\"Signal vs Time\")\nax.legend()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ValueError</span>                                Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[11]</span><span class=\"ansi-green-fg\">, line 3</span>\n<span class=\"ansi-green-fg\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Good example</span>\n<span class=\"ansi-green-fg\">      2</span> fig, ax = plt.subplots(figsize=(<span class=\"ansi-green-fg\">8</span>, <span class=\"ansi-green-fg\">5</span>))\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">3</span> <span class=\"ansi-yellow-bg\">ax</span><span class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">plot</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">x</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">y1</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">label</span><span class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">Data</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">      4</span> ax.set_xlabel(<span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">Time (s)</span><span class=\"ansi-yellow-fg\">\"</span>)\n<span class=\"ansi-green-fg\">      5</span> ax.set_ylabel(<span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">Amplitude (V)</span><span class=\"ansi-yellow-fg\">\"</span>)\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/.pyenv/versions/3.11.1/lib/python3.11/site-packages/matplotlib/axes/_axes.py:1724</span>, in <span class=\"ansi-cyan-fg\">Axes.plot</span><span class=\"ansi-blue-fg\">(self, scalex, scaley, data, *args, **kwargs)</span>\n<span class=\"ansi-green-fg\">   1481</span> <span style=\"font-style:italic\" class=\"ansi-yellow-fg\">\"\"\"</span>\n<span class=\"ansi-green-fg\">   1482</span> <span style=\"font-style:italic\" class=\"ansi-yellow-fg\">Plot y versus x as lines and/or markers.</span>\n<span class=\"ansi-green-fg\">   1483</span> \n<span class=\"ansi-green-fg\">   (...)</span><span class=\"ansi-green-fg\">   1721</span> <span style=\"font-style:italic\" class=\"ansi-yellow-fg\">(``'green'``) or hex strings (``'#008000'``).</span>\n<span class=\"ansi-green-fg\">   1722</span> <span style=\"font-style:italic\" class=\"ansi-yellow-fg\">\"\"\"</span>\n<span class=\"ansi-green-fg\">   1723</span> kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D)\n<span class=\"ansi-green-fg\">-&gt; </span><span class=\"ansi-green-fg\">1724</span> lines = [*<span style=\"color:rgb(0,135,0)\">self</span>._get_lines(<span style=\"color:rgb(0,135,0)\">self</span>, *args, data=data, **kwargs)]\n<span class=\"ansi-green-fg\">   1725</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> line <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> lines:\n<span class=\"ansi-green-fg\">   1726</span>     <span style=\"color:rgb(0,135,0)\">self</span>.add_line(line)\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/.pyenv/versions/3.11.1/lib/python3.11/site-packages/matplotlib/axes/_base.py:303</span>, in <span class=\"ansi-cyan-fg\">_process_plot_var_args.__call__</span><span class=\"ansi-blue-fg\">(self, axes, data, *args, **kwargs)</span>\n<span class=\"ansi-green-fg\">    301</span>     this += args[<span class=\"ansi-green-fg\">0</span>],\n<span class=\"ansi-green-fg\">    302</span>     args = args[<span class=\"ansi-green-fg\">1</span>:]\n<span class=\"ansi-green-fg\">--&gt; </span><span class=\"ansi-green-fg\">303</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">yield from</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_plot_args</span><span class=\"ansi-yellow-bg\">(</span>\n<span class=\"ansi-green-fg\">    304</span> <span class=\"ansi-yellow-bg\">    </span><span class=\"ansi-yellow-bg\">axes</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">this</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">kwargs</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">ambiguous_fmt_datakey</span><span class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">ambiguous_fmt_datakey</span><span class=\"ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">~/.pyenv/versions/3.11.1/lib/python3.11/site-packages/matplotlib/axes/_base.py:499</span>, in <span class=\"ansi-cyan-fg\">_process_plot_var_args._plot_args</span><span class=\"ansi-blue-fg\">(self, axes, tup, kwargs, return_kwargs, ambiguous_fmt_datakey)</span>\n<span class=\"ansi-green-fg\">    496</span>     axes.yaxis.update_units(y)\n<span class=\"ansi-green-fg\">    498</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> x.shape[<span class=\"ansi-green-fg\">0</span>] != y.shape[<span class=\"ansi-green-fg\">0</span>]:\n<span class=\"ansi-green-fg\">--&gt; </span><span class=\"ansi-green-fg\">499</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">ValueError</span>(<span class=\"ansi-yellow-fg\">f</span><span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">x and y must have same first dimension, but </span><span class=\"ansi-yellow-fg\">\"</span>\n<span class=\"ansi-green-fg\">    500</span>                      <span class=\"ansi-yellow-fg\">f</span><span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">have shapes </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>x.shape<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span class=\"ansi-yellow-fg\"> and </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>y.shape<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span class=\"ansi-yellow-fg\">\"</span>)\n<span class=\"ansi-green-fg\">    501</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> x.ndim &gt; <span class=\"ansi-green-fg\">2</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">or</span> y.ndim &gt; <span class=\"ansi-green-fg\">2</span>:\n<span class=\"ansi-green-fg\">    502</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">ValueError</span>(<span class=\"ansi-yellow-fg\">f</span><span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">x and y can be no greater than 2D, but have </span><span class=\"ansi-yellow-fg\">\"</span>\n<span class=\"ansi-green-fg\">    503</span>                      <span class=\"ansi-yellow-fg\">f</span><span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">shapes </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>x.shape<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span class=\"ansi-yellow-fg\"> and </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>y.shape<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span class=\"ansi-yellow-fg\">\"</span>)\n\n<span class=\"ansi-red-fg\">ValueError</span>: x and y must have same first dimension, but have shapes (10,) and (100,)</pre>\n```\n:::\n\n:::\n\n::: {.cell-output .cell-output-display}\n![](09_intro_matplotlib_slides_files/figure-revealjs/cell-12-output-2.png){}\n:::\n:::\n\n\n---\n\n## Key Takeaways\n\n- **matplotlib** is the standard Python plotting library\n- **Object-oriented** approach with `fig, ax` is recommended\n- **Customization** options for colors, styles, markers\n- **Multiple plot types**: line, scatter, histogram\n- **Always annotate** with labels, legends, titles\n- **Practice** with different plot types and styling options\n\n",
    "supporting": [
      "09_intro_matplotlib_slides_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {}
  }
}